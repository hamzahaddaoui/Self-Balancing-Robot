

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Jun 30 22:39:23 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    64                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           	psect	idataCOMRAM
    67  002F9C                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for _kD
    71  002F9C  00                 	db	0
    72  002F9D  B0                 	db	176
    73  002F9E  40                 	db	64
    74                           
    75                           ;initializer for _kI
    76  002F9F  9A                 	db	154
    77  002FA0  D9                 	db	217
    78  002FA1  3F                 	db	63
    79                           
    80                           ;initializer for _kP
    81  002FA2  33                 	db	51
    82  002FA3  13                 	db	19
    83  002FA4  40                 	db	64
    84                           
    85                           	psect	idataBANK0
    86  002FA5                     __pidataBANK0:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _K
    90  002FA5  CD                 	db	205
    91  002FA6  9C                 	db	156
    92  002FA7  40                 	db	64
    93                           
    94                           ;initializer for _alpha
    95  002FA8  9A                 	db	154
    96  002FA9  59                 	db	89
    97  002FAA  3F                 	db	63
    98                           
    99                           	psect	smallconst
   100  000600                     __psmallconst:
   101                           	opt stack 0
   102  000600  00                 	db	0
   103  000601                     _dpowers:
   104                           	opt stack 0
   105  000601  0001               	dw	1
   106  000603  0000               	dw	0
   107  000605  000A               	dw	10
   108  000607  0000               	dw	0
   109  000609  0064               	dw	100
   110  00060B  0000               	dw	0
   111  00060D  03E8               	dw	1000
   112  00060F  0000               	dw	0
   113  000611  2710               	dw	10000
   114  000613  0000               	dw	0
   115  000615  86A0               	dw	34464
   116  000617  0001               	dw	1
   117  000619  4240               	dw	16960
   118  00061B  000F               	dw	15
   119  00061D  9680               	dw	38528
   120  00061F  0098               	dw	152
   121  000621  E100               	dw	57600
   122  000623  05F5               	dw	1525
   123  000625  CA00               	dw	51712
   124  000627  3B9A               	dw	15258
   125  000629                     __end_of_dpowers:
   126                           	opt stack 0
   127  000629                     __npowers_:
   128                           	opt stack 0
   129  000629  00                 	db	0
   130  00062A  80                 	db	128
   131  00062B  3F                 	db	63
   132  00062C  CD                 	db	205
   133  00062D  CC                 	db	204
   134  00062E  3D                 	db	61
   135  00062F  D7                 	db	215
   136  000630  23                 	db	35
   137  000631  3C                 	db	60
   138  000632  12                 	db	18
   139  000633  83                 	db	131
   140  000634  3A                 	db	58
   141  000635  B7                 	db	183
   142  000636  D1                 	db	209
   143  000637  38                 	db	56
   144  000638  C6                 	db	198
   145  000639  27                 	db	39
   146  00063A  37                 	db	55
   147  00063B  38                 	db	56
   148  00063C  86                 	db	134
   149  00063D  35                 	db	53
   150  00063E  C0                 	db	192
   151  00063F  D6                 	db	214
   152  000640  33                 	db	51
   153  000641  CC                 	db	204
   154  000642  2B                 	db	43
   155  000643  32                 	db	50
   156  000644  70                 	db	112
   157  000645  89                 	db	137
   158  000646  30                 	db	48
   159  000647  E7                 	db	231
   160  000648  DB                 	db	219
   161  000649  2E                 	db	46
   162  00064A  E5                 	db	229
   163  00064B  3C                 	db	60
   164  00064C  1E                 	db	30
   165  00064D  42                 	db	66
   166  00064E  A2                 	db	162
   167  00064F  0D                 	db	13
   168  000650                     __end_of__npowers_:
   169                           	opt stack 0
   170  000650                     __powers_:
   171                           	opt stack 0
   172  000650  00                 	db	0
   173  000651  80                 	db	128
   174  000652  3F                 	db	63
   175  000653  00                 	db	0
   176  000654  20                 	db	32
   177  000655  41                 	db	65
   178  000656  00                 	db	0
   179  000657  C8                 	db	200
   180  000658  42                 	db	66
   181  000659  00                 	db	0
   182  00065A  7A                 	db	122
   183  00065B  44                 	db	68
   184  00065C  40                 	db	64
   185  00065D  1C                 	db	28
   186  00065E  46                 	db	70
   187  00065F  50                 	db	80
   188  000660  C3                 	db	195
   189  000661  47                 	db	71
   190  000662  24                 	db	36
   191  000663  74                 	db	116
   192  000664  49                 	db	73
   193  000665  97                 	db	151
   194  000666  18                 	db	24
   195  000667  4B                 	db	75
   196  000668  BC                 	db	188
   197  000669  BE                 	db	190
   198  00066A  4C                 	db	76
   199  00066B  6B                 	db	107
   200  00066C  6E                 	db	110
   201  00066D  4E                 	db	78
   202  00066E  03                 	db	3
   203  00066F  15                 	db	21
   204  000670  50                 	db	80
   205  000671  79                 	db	121
   206  000672  AD                 	db	173
   207  000673  60                 	db	96
   208  000674  F3                 	db	243
   209  000675  49                 	db	73
   210  000676  71                 	db	113
   211  000677                     __end_of__powers_:
   212                           	opt stack 0
   213  000677                     _RADtoDEG:
   214                           	opt stack 0
   215  000677  2F                 	db	47
   216  000678  65                 	db	101
   217  000679  42                 	db	66
   218  00067A                     __end_of_RADtoDEG:
   219                           	opt stack 0
   220  00067A                     exp@coeff:
   221                           	opt stack 0
   222  00067A  00                 	db	0
   223  00067B  80                 	db	128
   224  00067C  3F                 	db	63
   225  00067D  72                 	db	114
   226  00067E  31                 	db	49
   227  00067F  3F                 	db	63
   228  000680  FE                 	db	254
   229  000681  75                 	db	117
   230  000682  3E                 	db	62
   231  000683  58                 	db	88
   232  000684  63                 	db	99
   233  000685  3D                 	db	61
   234  000686  95                 	db	149
   235  000687  1D                 	db	29
   236  000688  3C                 	db	60
   237  000689  C5                 	db	197
   238  00068A  AE                 	db	174
   239  00068B  3A                 	db	58
   240  00068C  79                 	db	121
   241  00068D  21                 	db	33
   242  00068E  39                 	db	57
   243  00068F  94                 	db	148
   244  000690  80                 	db	128
   245  000691  37                 	db	55
   246  000692  93                 	db	147
   247  000693  A7                 	db	167
   248  000694  35                 	db	53
   249  000695  56                 	db	86
   250  000696  15                 	db	21
   251  000697  34                 	db	52
   252  000698                     __end_ofexp@coeff:
   253                           	opt stack 0
   254  000698                     log@coeff:
   255                           	opt stack 0
   256  000698  00                 	db	0
   257  000699  00                 	db	0
   258  00069A  00                 	db	0
   259  00069B  00                 	db	0
   260  00069C  80                 	db	128
   261  00069D  3F                 	db	63
   262  00069E  F0                 	db	240
   263  00069F  FF                 	db	255
   264  0006A0  BE                 	db	190
   265  0006A1  E2                 	db	226
   266  0006A2  A9                 	db	169
   267  0006A3  3E                 	db	62
   268  0006A4  83                 	db	131
   269  0006A5  76                 	db	118
   270  0006A6  BE                 	db	190
   271  0006A7  AE                 	db	174
   272  0006A8  2B                 	db	43
   273  0006A9  3E                 	db	62
   274  0006AA  3C                 	db	60
   275  0006AB  C3                 	db	195
   276  0006AC  BD                 	db	189
   277  0006AD  D2                 	db	210
   278  0006AE  13                 	db	19
   279  0006AF  3D                 	db	61
   280  0006B0  78                 	db	120
   281  0006B1  D3                 	db	211
   282  0006B2  BB                 	db	187
   283  0006B3                     __end_oflog@coeff:
   284                           	opt stack 0
   285  0006B3                     atan@coeff_a:
   286                           	opt stack 0
   287  0006B3  3C                 	db	60
   288  0006B4  04                 	db	4
   289  0006B5  42                 	db	66
   290  0006B6  9F                 	db	159
   291  0006B7  6A                 	db	106
   292  0006B8  42                 	db	66
   293  0006B9  90                 	db	144
   294  0006BA  01                 	db	1
   295  0006BB  42                 	db	66
   296  0006BC  4D                 	db	77
   297  0006BD  BB                 	db	187
   298  0006BE  40                 	db	64
   299  0006BF  EC                 	db	236
   300  0006C0  47                 	db	71
   301  0006C1  3E                 	db	62
   302  0006C2  8E                 	db	142
   303  0006C3  1F                 	db	31
   304  0006C4  BB                 	db	187
   305  0006C5                     __end_ofatan@coeff_a:
   306                           	opt stack 0
   307  0006C5                     atan@coeff_b:
   308                           	opt stack 0
   309  0006C5  3C                 	db	60
   310  0006C6  04                 	db	4
   311  0006C7  42                 	db	66
   312  0006C8  5A                 	db	90
   313  0006C9  8B                 	db	139
   314  0006CA  42                 	db	66
   315  0006CB  04                 	db	4
   316  0006CC  44                 	db	68
   317  0006CD  42                 	db	66
   318  0006CE  9C                 	db	156
   319  0006CF  4F                 	db	79
   320  0006D0  41                 	db	65
   321  0006D1  00                 	db	0
   322  0006D2  80                 	db	128
   323  0006D3  3F                 	db	63
   324  0006D4                     __end_ofatan@coeff_b:
   325                           	opt stack 0
   326  0000                     _TMR0	set	4054
   327  0000                     _CCP1CON	set	4029
   328  0000                     _CCPR1L	set	4030
   329  0000                     _OSCCON	set	4051
   330  0000                     _PR2	set	4043
   331  0000                     _RCSTA	set	4011
   332  0000                     _SPBRG	set	4015
   333  0000                     _SSPADD	set	4040
   334  0000                     _SSPBUF	set	4041
   335  0000                     _SSPCON1	set	4038
   336  0000                     _SSPCON1bits	set	4038
   337  0000                     _SSPCON2	set	4037
   338  0000                     _SSPCON2bits	set	4037
   339  0000                     _SSPSTAT	set	4039
   340  0000                     _SSPSTATbits	set	4039
   341  0000                     _T0CON	set	4053
   342  0000                     _T2CON	set	4042
   343  0000                     _TRISA	set	3986
   344  0000                     _TRISB	set	3987
   345  0000                     _TRISC	set	3988
   346  0000                     _TXREG	set	4013
   347  0000                     _TXSTA	set	4012
   348  0000                     _BRG16	set	32195
   349  0000                     _BRGH	set	32098
   350  0000                     _GIE	set	32663
   351  0000                     _PLLEN	set	31966
   352  0000                     _RA0	set	31744
   353  0000                     _RB2	set	31754
   354  0000                     _RB3	set	31755
   355  0000                     _RB4	set	31756
   356  0000                     _RB5	set	31757
   357  0000                     _RCIE	set	31981
   358  0000                     _SPEN	set	32095
   359  0000                     _TMR0IE	set	32661
   360  0000                     _TMR0IF	set	32658
   361  0000                     _TXEN	set	32101
   362  0000                     _TXIF	set	31988
   363  0006D4  25                 	db	37
   364  0006D5  34                 	db	52	;'4'
   365  0006D6  2E                 	db	46
   366  0006D7  32                 	db	50	;'2'
   367  0006D8  66                 	db	102	;'f'
   368  0006D9  0A                 	db	10
   369  0006DA  00                 	db	0
   370                           
   371                           ; #config settings
   372  0006DB  00                 	db	0	; dummy byte at the end
   373  0000                     
   374                           	psect	cinit
   375  002C4E                     __pcinit:
   376                           	opt stack 0
   377  002C4E                     start_initialization:
   378                           	opt stack 0
   379  002C4E                     __initialization:
   380                           	opt stack 0
   381                           
   382                           ; Initialize objects allocated to BANK0 (6 bytes)
   383                           ; load TBLPTR registers with __pidataBANK0
   384  002C4E  0EA5               	movlw	low __pidataBANK0
   385  002C50  6EF6               	movwf	tblptrl,c
   386  002C52  0E2F               	movlw	high __pidataBANK0
   387  002C54  6EF7               	movwf	tblptrh,c
   388  002C56  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   389  002C58  6EF8               	movwf	tblptru,c
   390  002C5A  EE00  F0E7         	lfsr	0,__pdataBANK0
   391  002C5E  EE10 F006          	lfsr	1,6
   392  002C62                     copy_data0:
   393  002C62  0009               	tblrd		*+
   394  002C64  CFF5 FFEE          	movff	tablat,postinc0
   395  002C68  50E5               	movf	postdec1,w,c
   396  002C6A  50E1               	movf	fsr1l,w,c
   397  002C6C  E1FA               	bnz	copy_data0
   398                           
   399                           ; Initialize objects allocated to COMRAM (9 bytes)
   400                           ; load TBLPTR registers with __pidataCOMRAM
   401  002C6E  0E9C               	movlw	low __pidataCOMRAM
   402  002C70  6EF6               	movwf	tblptrl,c
   403  002C72  0E2F               	movlw	high __pidataCOMRAM
   404  002C74  6EF7               	movwf	tblptrh,c
   405  002C76  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   406  002C78  6EF8               	movwf	tblptru,c
   407  002C7A  EE00  F03E         	lfsr	0,__pdataCOMRAM
   408  002C7E  EE10 F009          	lfsr	1,9
   409  002C82                     copy_data1:
   410  002C82  0009               	tblrd		*+
   411  002C84  CFF5 FFEE          	movff	tablat,postinc0
   412  002C88  50E5               	movf	postdec1,w,c
   413  002C8A  50E1               	movf	fsr1l,w,c
   414  002C8C  E1FA               	bnz	copy_data1
   415                           
   416                           ; Clear objects allocated to BANK1 (35 bytes)
   417  002C8E  EE01  F027         	lfsr	0,__pbssBANK1
   418  002C92  0E23               	movlw	35
   419  002C94                     clear_0:
   420  002C94  6AEE               	clrf	postinc0,c
   421  002C96  06E8               	decf	wreg,f,c
   422  002C98  E1FD               	bnz	clear_0
   423                           
   424                           ; Clear objects allocated to BANK0 (20 bytes)
   425  002C9A  EE00  F0D3         	lfsr	0,__pbssBANK0
   426  002C9E  0E14               	movlw	20
   427  002CA0                     clear_1:
   428  002CA0  6AEE               	clrf	postinc0,c
   429  002CA2  06E8               	decf	wreg,f,c
   430  002CA4  E1FD               	bnz	clear_1
   431                           
   432                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   433  002CA6  6A47               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   434                           
   435                           ; Clear objects allocated to COMRAM (11 bytes)
   436  002CA8  EE00  F033         	lfsr	0,__pbssCOMRAM
   437  002CAC  0E0B               	movlw	11
   438  002CAE                     clear_2:
   439  002CAE  6AEE               	clrf	postinc0,c
   440  002CB0  06E8               	decf	wreg,f,c
   441  002CB2  E1FD               	bnz	clear_2
   442  002CB4                     end_of_initialization:
   443                           	opt stack 0
   444  002CB4                     __end_of__initialization:
   445                           	opt stack 0
   446  002CB4  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   447  002CB6  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   448  002CB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   449  002CBA  6EF8               	movwf	tblptru,c
   450  002CBC  0100               	movlb	0
   451  002CBE  EF6D  F009         	goto	_main	;jump to C main() function
   452                           tblptru	equ	0xFF8
   453                           tblptrh	equ	0xFF7
   454                           tblptrl	equ	0xFF6
   455                           tablat	equ	0xFF5
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           postdec1	equ	0xFE5
   459                           fsr1l	equ	0xFE1
   460                           
   461                           	psect	bitbssCOMRAM
   462  000238                     __pbitbssCOMRAM:
   463                           	opt stack 0
   464  000238                     _BIT:
   465                           	opt stack 0
   466  000238                     	ds	1
   467                           tblptru	equ	0xFF8
   468                           tblptrh	equ	0xFF7
   469                           tblptrl	equ	0xFF6
   470                           tablat	equ	0xFF5
   471                           postinc0	equ	0xFEE
   472                           wreg	equ	0xFE8
   473                           postdec1	equ	0xFE5
   474                           fsr1l	equ	0xFE1
   475                           
   476                           	psect	bssCOMRAM
   477  000033                     __pbssCOMRAM:
   478                           	opt stack 0
   479  000033                     PIDupdate@precErrore:
   480                           	opt stack 0
   481  000033                     	ds	3
   482  000036                     _gyroY:
   483                           	opt stack 0
   484  000036                     	ds	3
   485  000039                     _PID:
   486                           	opt stack 0
   487  000039                     	ds	2
   488  00003B                     _errno:
   489                           	opt stack 0
   490  00003B                     	ds	2
   491  00003D                     _j:
   492                           	opt stack 0
   493  00003D                     	ds	1
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	dataCOMRAM
   504  00003E                     __pdataCOMRAM:
   505                           	opt stack 0
   506  00003E                     _kD:
   507                           	opt stack 0
   508  00003E                     	ds	3
   509  000041                     _kI:
   510                           	opt stack 0
   511  000041                     	ds	3
   512  000044                     _kP:
   513                           	opt stack 0
   514  000044                     	ds	3
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           postdec1	equ	0xFE5
   522                           fsr1l	equ	0xFE1
   523                           
   524                           	psect	bssBANK0
   525  0000D3                     __pbssBANK0:
   526                           	opt stack 0
   527  0000D3                     _millis:
   528                           	opt stack 0
   529  0000D3                     	ds	4
   530  0000D7                     PIDupdate@sumErrore:
   531                           	opt stack 0
   532  0000D7                     	ds	3
   533  0000DA                     _accX:
   534                           	opt stack 0
   535  0000DA                     	ds	3
   536  0000DD                     _currentAngle:
   537                           	opt stack 0
   538  0000DD                     	ds	3
   539  0000E0                     _errore:
   540                           	opt stack 0
   541  0000E0                     	ds	3
   542  0000E3                     _offsetAngle:
   543                           	opt stack 0
   544  0000E3                     	ds	3
   545  0000E6                     _i:
   546                           	opt stack 0
   547  0000E6                     	ds	1
   548                           tblptru	equ	0xFF8
   549                           tblptrh	equ	0xFF7
   550                           tblptrl	equ	0xFF6
   551                           tablat	equ	0xFF5
   552                           postinc0	equ	0xFEE
   553                           wreg	equ	0xFE8
   554                           postdec1	equ	0xFE5
   555                           fsr1l	equ	0xFE1
   556                           
   557                           	psect	dataBANK0
   558  0000E7                     __pdataBANK0:
   559                           	opt stack 0
   560  0000E7                     _K:
   561                           	opt stack 0
   562  0000E7                     	ds	3
   563  0000EA                     _alpha:
   564                           	opt stack 0
   565  0000EA                     	ds	3
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1l	equ	0xFE1
   574                           
   575                           	psect	bssBANK1
   576  000127                     __pbssBANK1:
   577                           	opt stack 0
   578  000127                     _data:
   579                           	opt stack 0
   580  000127                     	ds	20
   581  00013B                     _loopMillis:
   582                           	opt stack 0
   583  00013B                     	ds	4
   584  00013F                     _pidMillis:
   585                           	opt stack 0
   586  00013F                     	ds	4
   587  000143                     _sensMillis:
   588                           	opt stack 0
   589  000143                     	ds	4
   590  000147                     _vPin:
   591                           	opt stack 0
   592  000147                     	ds	3
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           postdec1	equ	0xFE5
   600                           fsr1l	equ	0xFE1
   601                           
   602                           	psect	cstackBANK1
   603  000100                     __pcstackBANK1:
   604                           	opt stack 0
   605  000100                     computeAngle@dt:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0x0
   609  000100                     	ds	3
   610  000103                     computeAngle@mode:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x3
   614  000103                     	ds	1
   615  000104                     computeAngle@angleSum:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x4
   619  000104                     	ds	3
   620  000107                     _computeAngle$1189:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0x7
   624  000107                     	ds	3
   625  00010A                     _computeAngle$1190:
   626                           	opt stack 0
   627                           
   628                           ; 3 bytes @ 0xA
   629  00010A                     	ds	3
   630  00010D                     _computeAngle$1191:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0xD
   634  00010D                     	ds	3
   635  000110                     _computeAngle$1192:
   636                           	opt stack 0
   637                           
   638                           ; 3 bytes @ 0x10
   639  000110                     	ds	3
   640  000113                     _computeAngle$1193:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0x13
   644  000113                     	ds	3
   645  000116                     _computeAngle$1194:
   646                           	opt stack 0
   647                           
   648                           ; 3 bytes @ 0x16
   649  000116                     	ds	3
   650  000119                     _computeAngle$1195:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x19
   654  000119                     	ds	3
   655  00011C                     _computeAngle$1196:
   656                           	opt stack 0
   657                           
   658                           ; 3 bytes @ 0x1C
   659  00011C                     	ds	3
   660  00011F                     computeAngle@rawAccX:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x1F
   664  00011F                     	ds	2
   665  000121                     computeAngle@rawAccY:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x21
   669  000121                     	ds	2
   670  000123                     computeAngle@rawAccZ:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x23
   674  000123                     	ds	2
   675  000125                     computeAngle@rawGyroY:
   676                           	opt stack 0
   677                           
   678                           ; 2 bytes @ 0x25
   679  000125                     	ds	2
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           postdec1	equ	0xFE5
   687                           fsr1l	equ	0xFE1
   688                           
   689                           	psect	cstackBANK0
   690  000060                     __pcstackBANK0:
   691                           	opt stack 0
   692  000060                     ?___ftmul:
   693                           	opt stack 0
   694  000060                     ?___ftsub:
   695                           	opt stack 0
   696  000060                     ?_map:
   697                           	opt stack 0
   698  000060                     ___ftmul@f1:
   699                           	opt stack 0
   700  000060                     ___ftsub@f1:
   701                           	opt stack 0
   702  000060                     map@x:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x0
   706  000060                     	ds	3
   707  000063                     ___ftmul@f2:
   708                           	opt stack 0
   709  000063                     ___ftsub@f2:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x3
   713  000063                     	ds	1
   714  000064                     map@in_min:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x4
   718  000064                     	ds	2
   719  000066                     ___ftmul@exp:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x6
   723  000066                     	ds	1
   724  000067                     ___ftmul@f3_as_product:
   725                           	opt stack 0
   726                           
   727                           ; 3 bytes @ 0x7
   728  000067                     	ds	1
   729  000068                     map@in_max:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x8
   733  000068                     	ds	2
   734  00006A                     ___ftmul@cntr:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0xA
   738  00006A                     	ds	1
   739  00006B                     ___ftmul@sign:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0xB
   743  00006B                     	ds	1
   744  00006C                     ?_eval_poly:
   745                           	opt stack 0
   746  00006C                     eval_poly@x:
   747                           	opt stack 0
   748  00006C                     ___ftge@ff1:
   749                           	opt stack 0
   750  00006C                     map@out_min:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0xC
   754  00006C                     	ds	3
   755  00006F                     eval_poly@d:
   756                           	opt stack 0
   757  00006F                     ___ftge@ff2:
   758                           	opt stack 0
   759                           
   760                           ; 3 bytes @ 0xF
   761  00006F                     	ds	1
   762  000070                     map@out_max:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x10
   766  000070                     	ds	1
   767  000071                     eval_poly@n:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x11
   771  000071                     	ds	1
   772  000072                     ??___ftge:
   773                           
   774                           ; 1 bytes @ 0x12
   775  000072                     	ds	1
   776  000073                     ??_eval_poly:
   777                           
   778                           ; 1 bytes @ 0x13
   779  000073                     	ds	1
   780  000074                     ??_map:
   781                           
   782                           ; 1 bytes @ 0x14
   783  000074                     	ds	1
   784  000075                     ?___ftdiv:
   785                           	opt stack 0
   786  000075                     ?_floor:
   787                           	opt stack 0
   788  000075                     _PIDupdate$403:
   789                           	opt stack 0
   790  000075                     eval_poly@res:
   791                           	opt stack 0
   792  000075                     ___ftdiv@f1:
   793                           	opt stack 0
   794  000075                     floor@x:
   795                           	opt stack 0
   796                           
   797                           ; 3 bytes @ 0x15
   798  000075                     	ds	3
   799  000078                     ?_log:
   800                           	opt stack 0
   801  000078                     ?_ldexp:
   802                           	opt stack 0
   803  000078                     _PIDupdate$404:
   804                           	opt stack 0
   805  000078                     ___ftdiv@f2:
   806                           	opt stack 0
   807  000078                     floor@i:
   808                           	opt stack 0
   809  000078                     ldexp@value:
   810                           	opt stack 0
   811  000078                     log@x:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0x18
   815  000078                     	ds	3
   816  00007B                     ??___ftdiv:
   817  00007B                     floor@expon:
   818                           	opt stack 0
   819  00007B                     ldexp@newexp:
   820                           	opt stack 0
   821  00007B                     log@exponent:
   822                           	opt stack 0
   823  00007B                     _PIDupdate$405:
   824                           	opt stack 0
   825                           
   826                           ; 3 bytes @ 0x1B
   827  00007B                     	ds	2
   828  00007D                     ??_ldexp:
   829                           
   830                           ; 1 bytes @ 0x1D
   831  00007D                     	ds	1
   832  00007E                     ___ftdiv@cntr:
   833                           	opt stack 0
   834  00007E                     _PIDupdate$406:
   835                           	opt stack 0
   836                           
   837                           ; 3 bytes @ 0x1E
   838  00007E                     	ds	1
   839  00007F                     ___ftdiv@f3:
   840                           	opt stack 0
   841                           
   842                           ; 3 bytes @ 0x1F
   843  00007F                     	ds	1
   844  000080                     motorsUpdate@torque:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x20
   848  000080                     	ds	1
   849  000081                     PIDupdate@Pterm:
   850                           	opt stack 0
   851                           
   852                           ; 3 bytes @ 0x21
   853  000081                     	ds	1
   854  000082                     ___ftdiv@exp:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x22
   858  000082                     	ds	1
   859  000083                     ___ftdiv@sign:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x23
   863  000083                     	ds	1
   864  000084                     ?_exp:
   865                           	opt stack 0
   866  000084                     PIDupdate@Iterm:
   867                           	opt stack 0
   868  000084                     exp@x:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0x24
   872  000084                     	ds	3
   873  000087                     PIDupdate@Dterm:
   874                           	opt stack 0
   875  000087                     _exp$1205:
   876                           	opt stack 0
   877                           
   878                           ; 3 bytes @ 0x27
   879  000087                     	ds	3
   880  00008A                     exp@exponent:
   881                           	opt stack 0
   882  00008A                     _PIDupdate$1197:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x2A
   886  00008A                     	ds	2
   887  00008C                     exp@sign:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x2C
   891  00008C                     	ds	1
   892  00008D                     ?_pow:
   893                           	opt stack 0
   894  00008D                     pow@x:
   895                           	opt stack 0
   896                           
   897                           ; 3 bytes @ 0x2D
   898  00008D                     	ds	3
   899  000090                     pow@y:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x30
   903  000090                     	ds	3
   904  000093                     _pow$1203:
   905                           	opt stack 0
   906                           
   907                           ; 3 bytes @ 0x33
   908  000093                     	ds	3
   909  000096                     _pow$1204:
   910                           	opt stack 0
   911                           
   912                           ; 3 bytes @ 0x36
   913  000096                     	ds	3
   914  000099                     pow@sign:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x39
   918  000099                     	ds	1
   919  00009A                     pow@yi:
   920                           	opt stack 0
   921                           
   922                           ; 4 bytes @ 0x3A
   923  00009A                     	ds	4
   924  00009E                     ?_sqrt:
   925                           	opt stack 0
   926  00009E                     sqrt@a:
   927                           	opt stack 0
   928                           
   929                           ; 3 bytes @ 0x3E
   930  00009E                     	ds	3
   931  0000A1                     ??_sqrt:
   932                           
   933                           ; 1 bytes @ 0x41
   934  0000A1                     	ds	3
   935  0000A4                     sqrt@og:
   936                           	opt stack 0
   937                           
   938                           ; 3 bytes @ 0x44
   939  0000A4                     	ds	3
   940  0000A7                     sqrt@z:
   941                           	opt stack 0
   942                           
   943                           ; 3 bytes @ 0x47
   944  0000A7                     	ds	3
   945  0000AA                     sqrt@i:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x4A
   949  0000AA                     	ds	1
   950  0000AB                     sqrt@q:
   951                           	opt stack 0
   952                           
   953                           ; 3 bytes @ 0x4B
   954  0000AB                     	ds	3
   955  0000AE                     sqrt@x:
   956                           	opt stack 0
   957                           
   958                           ; 3 bytes @ 0x4E
   959  0000AE                     	ds	3
   960  0000B1                     ?_atan:
   961                           	opt stack 0
   962  0000B1                     atan@f:
   963                           	opt stack 0
   964                           
   965                           ; 3 bytes @ 0x51
   966  0000B1                     	ds	3
   967  0000B4                     atan@y:
   968                           	opt stack 0
   969                           
   970                           ; 3 bytes @ 0x54
   971  0000B4                     	ds	3
   972  0000B7                     atan@x:
   973                           	opt stack 0
   974                           
   975                           ; 3 bytes @ 0x57
   976  0000B7                     	ds	3
   977  0000BA                     atan@recip:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x5A
   981  0000BA                     	ds	1
   982  0000BB                     atan@val_squared:
   983                           	opt stack 0
   984                           
   985                           ; 3 bytes @ 0x5B
   986  0000BB                     	ds	3
   987  0000BE                     atan@val:
   988                           	opt stack 0
   989                           
   990                           ; 3 bytes @ 0x5E
   991  0000BE                     	ds	3
   992  0000C1                     ??_computeAngle:
   993                           
   994                           ; 1 bytes @ 0x61
   995  0000C1                     	ds	4
   996  0000C5                     ??_main:
   997                           
   998                           ; 1 bytes @ 0x65
   999  0000C5                     	ds	8
  1000  0000CD                     _main$1198:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0x6D
  1004  0000CD                     	ds	3
  1005  0000D0                     _main$419:
  1006                           	opt stack 0
  1007                           
  1008                           ; 3 bytes @ 0x70
  1009  0000D0                     	ds	3
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           postdec1	equ	0xFE5
  1017                           fsr1l	equ	0xFE1
  1018                           
  1019                           	psect	cstackCOMRAM
  1020  000001                     __pcstackCOMRAM:
  1021                           	opt stack 0
  1022  000001                     ?___llmod:
  1023                           	opt stack 0
  1024  000001                     ___llmod@dividend:
  1025                           	opt stack 0
  1026                           
  1027                           ; 4 bytes @ 0x0
  1028  000001                     	ds	4
  1029  000005                     ___llmod@divisor:
  1030                           	opt stack 0
  1031                           
  1032                           ; 4 bytes @ 0x4
  1033  000005                     	ds	4
  1034  000009                     ___llmod@counter:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x8
  1038  000009                     	ds	1
  1039  00000A                     ??_my_ISR:
  1040                           
  1041                           ; 1 bytes @ 0x9
  1042  00000A                     	ds	14
  1043  000018                     ??_IdleI2C:
  1044  000018                     ?___wmul:
  1045                           	opt stack 0
  1046  000018                     ?___ftpack:
  1047                           	opt stack 0
  1048  000018                     ?_frexp:
  1049                           	opt stack 0
  1050  000018                     ?___lmul:
  1051                           	opt stack 0
  1052  000018                     ?___fttol:
  1053                           	opt stack 0
  1054  000018                     DelayMs@cnt:
  1055                           	opt stack 0
  1056  000018                     ___wmul@multiplier:
  1057                           	opt stack 0
  1058  000018                     ___ftpack@arg:
  1059                           	opt stack 0
  1060  000018                     ___fttol@f1:
  1061                           	opt stack 0
  1062  000018                     frexp@value:
  1063                           	opt stack 0
  1064  000018                     ___lmul@multiplier:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x17
  1068  000018                     	ds	1
  1069  000019                     DelayMs@i:
  1070                           	opt stack 0
  1071  000019                     WriteI2C@data_out:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x18
  1075  000019                     	ds	1
  1076  00001A                     ?_getGyroY:
  1077                           	opt stack 0
  1078  00001A                     ?_getAccelX:
  1079                           	opt stack 0
  1080  00001A                     ?_getAccelY:
  1081                           	opt stack 0
  1082  00001A                     ?_getAccelZ:
  1083                           	opt stack 0
  1084  00001A                     DelayMs@_dcnt:
  1085                           	opt stack 0
  1086  00001A                     ___wmul@multiplicand:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x19
  1090  00001A                     	ds	1
  1091  00001B                     ___ftpack@exp:
  1092                           	opt stack 0
  1093  00001B                     frexp@eptr:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x1A
  1097  00001B                     	ds	1
  1098  00001C                     ??_getGyroY:
  1099  00001C                     ??_getAccelX:
  1100  00001C                     ??_getAccelY:
  1101  00001C                     ??_getAccelZ:
  1102  00001C                     ??___fttol:
  1103  00001C                     ___ftpack@sign:
  1104                           	opt stack 0
  1105  00001C                     ___wmul@product:
  1106                           	opt stack 0
  1107  00001C                     ___lmul@multiplicand:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x1B
  1111  00001C                     	ds	1
  1112  00001D                     ??___ftpack:
  1113  00001D                     ??_frexp:
  1114                           
  1115                           ; 1 bytes @ 0x1C
  1116  00001D                     	ds	1
  1117  00001E                     getGyroY@dataH:
  1118                           	opt stack 0
  1119  00001E                     getAccelX@dataH:
  1120                           	opt stack 0
  1121  00001E                     getAccelY@dataH:
  1122                           	opt stack 0
  1123  00001E                     getAccelZ@dataH:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x1D
  1127  00001E                     	ds	2
  1128  000020                     ?___awtoft:
  1129                           	opt stack 0
  1130  000020                     ?___ftneg:
  1131                           	opt stack 0
  1132  000020                     ?___lltoft:
  1133                           	opt stack 0
  1134  000020                     getGyroY@dataL:
  1135                           	opt stack 0
  1136  000020                     getAccelX@dataL:
  1137                           	opt stack 0
  1138  000020                     getAccelY@dataL:
  1139                           	opt stack 0
  1140  000020                     getAccelZ@dataL:
  1141                           	opt stack 0
  1142  000020                     ___awtoft@c:
  1143                           	opt stack 0
  1144  000020                     ___ftneg@f1:
  1145                           	opt stack 0
  1146  000020                     ___lmul@product:
  1147                           	opt stack 0
  1148  000020                     ___lltoft@c:
  1149                           	opt stack 0
  1150                           
  1151                           ; 4 bytes @ 0x1F
  1152  000020                     	ds	1
  1153  000021                     ___fttol@sign1:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x20
  1157  000021                     	ds	1
  1158  000022                     getGyroY@data:
  1159                           	opt stack 0
  1160  000022                     getAccelX@data:
  1161                           	opt stack 0
  1162  000022                     getAccelY@data:
  1163                           	opt stack 0
  1164  000022                     getAccelZ@data:
  1165                           	opt stack 0
  1166  000022                     ___fttol@lval:
  1167                           	opt stack 0
  1168                           
  1169                           ; 4 bytes @ 0x21
  1170  000022                     	ds	1
  1171  000023                     ?_fabs:
  1172                           	opt stack 0
  1173  000023                     ___awtoft@sign:
  1174                           	opt stack 0
  1175  000023                     fabs@d:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x22
  1179  000023                     	ds	1
  1180  000024                     ??___lltoft:
  1181  000024                     ?___ftadd:
  1182                           	opt stack 0
  1183  000024                     ?___aldiv:
  1184                           	opt stack 0
  1185  000024                     ___ftadd@f1:
  1186                           	opt stack 0
  1187  000024                     ___aldiv@dividend:
  1188                           	opt stack 0
  1189                           
  1190                           ; 4 bytes @ 0x23
  1191  000024                     	ds	2
  1192  000026                     ___fttol@exp1:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x25
  1196  000026                     	ds	1
  1197  000027                     ?___altoft:
  1198                           	opt stack 0
  1199  000027                     ___ftadd@f2:
  1200                           	opt stack 0
  1201  000027                     ___altoft@c:
  1202                           	opt stack 0
  1203                           
  1204                           ; 4 bytes @ 0x26
  1205  000027                     	ds	1
  1206  000028                     ___lltoft@exp:
  1207                           	opt stack 0
  1208  000028                     ___aldiv@divisor:
  1209                           	opt stack 0
  1210                           
  1211                           ; 4 bytes @ 0x27
  1212  000028                     	ds	2
  1213  00002A                     ??___ftadd:
  1214                           
  1215                           ; 1 bytes @ 0x29
  1216  00002A                     	ds	1
  1217  00002B                     ??___altoft:
  1218                           
  1219                           ; 1 bytes @ 0x2A
  1220  00002B                     	ds	1
  1221  00002C                     ___aldiv@counter:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x2B
  1225  00002C                     	ds	1
  1226  00002D                     ___aldiv@sign:
  1227                           	opt stack 0
  1228  00002D                     ___ftadd@sign:
  1229                           	opt stack 0
  1230                           
  1231                           ; 1 bytes @ 0x2C
  1232  00002D                     	ds	1
  1233  00002E                     ___ftadd@exp2:
  1234                           	opt stack 0
  1235  00002E                     ___aldiv@quotient:
  1236                           	opt stack 0
  1237                           
  1238                           ; 4 bytes @ 0x2D
  1239  00002E                     	ds	1
  1240  00002F                     ___altoft@exp:
  1241                           	opt stack 0
  1242  00002F                     ___ftadd@exp1:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x2E
  1246  00002F                     	ds	1
  1247  000030                     ??___ftmul:
  1248  000030                     ___altoft@sign:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x2F
  1252  000030                     	ds	2
  1253  000032                     
  1254                           ; 1 bytes @ 0x31
  1255  000032                     	ds	1
  1256  000033                     tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postdec1	equ	0xFE5
  1263                           fsr1l	equ	0xFE1
  1264                           
  1265                           ; 1 bytes @ 0x32
  1266 ;;
  1267 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
  1268 ;;
  1269 ;; *************** function _main *****************
  1270 ;; Defined at:
  1271 ;;		line 34 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\main.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;		None
  1274 ;; Auto vars:     Size  Location     Type
  1275 ;;		None
  1276 ;; Return value:  Size  Location     Type
  1277 ;;                  1    wreg      void 
  1278 ;; Registers used:
  1279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1280 ;; Tracked objects:
  1281 ;;		On entry : 0/0
  1282 ;;		On exit  : 0/0
  1283 ;;		Unchanged: 0/0
  1284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1285 ;;      Params:         0       0       0       0       0       0       0
  1286 ;;      Locals:         0       6       0       0       0       0       0
  1287 ;;      Temps:          0       8       0       0       0       0       0
  1288 ;;      Totals:         0      14       0       0       0       0       0
  1289 ;;Total ram usage:       14 bytes
  1290 ;; Hardware stack levels required when called:    8
  1291 ;; This function calls:
  1292 ;;		_DelayMs
  1293 ;;		_OpenI2C_StSpeed
  1294 ;;		_PICsetup
  1295 ;;		_PIDupdate
  1296 ;;		_PWMSetup
  1297 ;;		___ftadd
  1298 ;;		___ftge
  1299 ;;		___ftneg
  1300 ;;		_computeAngle
  1301 ;;		_motorsUpdate
  1302 ;;		_sensorSetup
  1303 ;; This function is called by:
  1304 ;;		Startup code after reset
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text0
  1309  0012DA                     __ptext0:
  1310                           	opt stack 0
  1311  0012DA                     _main:
  1312                           	opt stack 23
  1313                           
  1314                           ;main.c: 35: PICsetup();
  1315                           
  1316                           ;incstack = 0
  1317  0012DA  EC96  F017         	call	_PICsetup	;wreg free
  1318                           
  1319                           ;main.c: 36: OpenI2C_StSpeed();
  1320  0012DE  ECBF  F017         	call	_OpenI2C_StSpeed	;wreg free
  1321                           
  1322                           ;main.c: 37: PWMSetup();
  1323  0012E2  ECC8  F017         	call	_PWMSetup	;wreg free
  1324                           
  1325                           ;main.c: 39: for(i=0; i<4; i++) DelayMs(250);
  1326  0012E6  0E00               	movlw	0
  1327  0012E8  0100               	movlb	0	; () banked
  1328  0012EA  6FE6               	movwf	_i& (0+255),b
  1329  0012EC                     l5188:
  1330                           
  1331                           ; BSR set to: 0
  1332  0012EC  0E03               	movlw	3
  1333  0012EE  0100               	movlb	0	; () banked
  1334  0012F0  65E6               	cpfsgt	_i& (0+255),b
  1335  0012F2  D001               	goto	l5192
  1336  0012F4  D006               	goto	l5198
  1337  0012F6                     l5192:
  1338                           
  1339                           ; BSR set to: 0
  1340  0012F6  0EFA               	movlw	250
  1341  0012F8  EC5C  F017         	call	_DelayMs
  1342  0012FC  0100               	movlb	0	; () banked
  1343  0012FE  2BE6               	incf	_i& (0+255),f,b
  1344  001300  D7F5               	goto	l5188
  1345  001302                     l5198:
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 40: sensorSetup();
  1349  001302  EC35  F014         	call	_sensorSetup	;wreg free
  1350                           
  1351                           ;main.c: 42: computeAngle(1);
  1352  001306  0E01               	movlw	1
  1353  001308  EC6E  F003         	call	_computeAngle
  1354                           
  1355                           ;main.c: 44: millis =0;
  1356  00130C  0E00               	movlw	0
  1357  00130E  0100               	movlb	0	; () banked
  1358  001310  6FD3               	movwf	_millis& (0+255),b
  1359  001312  0E00               	movlw	0
  1360  001314  6FD4               	movwf	(_millis+1)& (0+255),b
  1361  001316  0E00               	movlw	0
  1362  001318  6FD5               	movwf	(_millis+2)& (0+255),b
  1363  00131A  0E00               	movlw	0
  1364  00131C  6FD6               	movwf	(_millis+3)& (0+255),b
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;main.c: 45: TMR0 =-8000;
  1368  00131E  0EE0               	movlw	224
  1369  001320  6ED7               	movwf	4055,c	;volatile
  1370  001322  0EC0               	movlw	192
  1371  001324  6ED6               	movwf	4054,c	;volatile
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;main.c: 46: GIE =1;
  1375  001326  8EF2               	bsf	intcon,7,c	;volatile
  1376  001328                     l5208:
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 49: computeAngle(0);
  1380  001328  0E00               	movlw	0
  1381  00132A  EC6E  F003         	call	_computeAngle
  1382                           
  1383                           ;main.c: 50: PIDupdate();
  1384  00132E  EC9D  F006         	call	_PIDupdate	;wreg free
  1385                           
  1386                           ;main.c: 51: if (((offsetAngle - currentAngle) > 0 ? (offsetAngle - currentAngle) : -(of
      +                          fsetAngle - currentAngle)) < 20) motorsUpdate(PID);
  1387  001332  0E00               	movlw	0
  1388  001334  0100               	movlb	0	; () banked
  1389  001336  6F6C               	movwf	___ftge@ff1& (0+255),b
  1390  001338  0E00               	movlw	0
  1391  00133A  0100               	movlb	0	; () banked
  1392  00133C  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
  1393  00133E  0E00               	movlw	0
  1394  001340  0100               	movlb	0	; () banked
  1395  001342  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
  1396  001344  C0E3  F027         	movff	_offsetAngle,___ftadd@f2
  1397  001348  C0E4  F028         	movff	_offsetAngle+1,___ftadd@f2+1
  1398  00134C  C0E5  F029         	movff	_offsetAngle+2,___ftadd@f2+2
  1399  001350  C0DD  F020         	movff	_currentAngle,___ftneg@f1
  1400  001354  C0DE  F021         	movff	_currentAngle+1,___ftneg@f1+1
  1401  001358  C0DF  F022         	movff	_currentAngle+2,___ftneg@f1+2
  1402  00135C  EC84  F017         	call	___ftneg	;wreg free
  1403  001360  C020  F024         	movff	?___ftneg,___ftadd@f1
  1404  001364  C021  F025         	movff	?___ftneg+1,___ftadd@f1+1
  1405  001368  C022  F026         	movff	?___ftneg+2,___ftadd@f1+2
  1406  00136C  EC38  F00C         	call	___ftadd	;wreg free
  1407  001370  C024  F06F         	movff	?___ftadd,___ftge@ff2
  1408  001374  C025  F070         	movff	?___ftadd+1,___ftge@ff2+1
  1409  001378  C026  F071         	movff	?___ftadd+2,___ftge@ff2+2
  1410  00137C  ECBA  F012         	call	___ftge	;wreg free
  1411  001380  0100               	movlb	0	; () banked
  1412  001382  A0D8               	btfss	status,0,c
  1413  001384  D02B               	goto	l5212
  1414                           
  1415                           ; BSR set to: 0
  1416  001386  C0E3  F027         	movff	_offsetAngle,___ftadd@f2
  1417  00138A  C0E4  F028         	movff	_offsetAngle+1,___ftadd@f2+1
  1418  00138E  C0E5  F029         	movff	_offsetAngle+2,___ftadd@f2+2
  1419  001392  C0DD  F020         	movff	_currentAngle,___ftneg@f1
  1420  001396  C0DE  F021         	movff	_currentAngle+1,___ftneg@f1+1
  1421  00139A  C0DF  F022         	movff	_currentAngle+2,___ftneg@f1+2
  1422  00139E  EC84  F017         	call	___ftneg	;wreg free
  1423  0013A2  C020  F024         	movff	?___ftneg,___ftadd@f1
  1424  0013A6  C021  F025         	movff	?___ftneg+1,___ftadd@f1+1
  1425  0013AA  C022  F026         	movff	?___ftneg+2,___ftadd@f1+2
  1426  0013AE  EC38  F00C         	call	___ftadd	;wreg free
  1427  0013B2  C024  F0CD         	movff	?___ftadd,_main$1198
  1428  0013B6  C025  F0CE         	movff	?___ftadd+1,_main$1198+1
  1429  0013BA  C026  F0CF         	movff	?___ftadd+2,_main$1198+2
  1430  0013BE  C0CD  F020         	movff	_main$1198,___ftneg@f1
  1431  0013C2  C0CE  F021         	movff	_main$1198+1,___ftneg@f1+1
  1432  0013C6  C0CF  F022         	movff	_main$1198+2,___ftneg@f1+2
  1433  0013CA  EC84  F017         	call	___ftneg	;wreg free
  1434  0013CE  C020  F0D0         	movff	?___ftneg,_main$419
  1435  0013D2  C021  F0D1         	movff	?___ftneg+1,_main$419+1
  1436  0013D6  C022  F0D2         	movff	?___ftneg+2,_main$419+2
  1437  0013DA  D01C               	goto	l399
  1438  0013DC                     l5212:
  1439  0013DC  C0DD  F020         	movff	_currentAngle,___ftneg@f1
  1440  0013E0  C0DE  F021         	movff	_currentAngle+1,___ftneg@f1+1
  1441  0013E4  C0DF  F022         	movff	_currentAngle+2,___ftneg@f1+2
  1442  0013E8  EC84  F017         	call	___ftneg	;wreg free
  1443  0013EC  C020  F024         	movff	?___ftneg,___ftadd@f1
  1444  0013F0  C021  F025         	movff	?___ftneg+1,___ftadd@f1+1
  1445  0013F4  C022  F026         	movff	?___ftneg+2,___ftadd@f1+2
  1446  0013F8  C0E3  F027         	movff	_offsetAngle,___ftadd@f2
  1447  0013FC  C0E4  F028         	movff	_offsetAngle+1,___ftadd@f2+1
  1448  001400  C0E5  F029         	movff	_offsetAngle+2,___ftadd@f2+2
  1449  001404  EC38  F00C         	call	___ftadd	;wreg free
  1450  001408  C024  F0D0         	movff	?___ftadd,_main$419
  1451  00140C  C025  F0D1         	movff	?___ftadd+1,_main$419+1
  1452  001410  C026  F0D2         	movff	?___ftadd+2,_main$419+2
  1453  001414                     l399:
  1454  001414  C0D0  F06C         	movff	_main$419,___ftge@ff1
  1455  001418  C0D1  F06D         	movff	_main$419+1,___ftge@ff1+1
  1456  00141C  C0D2  F06E         	movff	_main$419+2,___ftge@ff1+2
  1457  001420  0E00               	movlw	0
  1458  001422  0100               	movlb	0	; () banked
  1459  001424  6F6F               	movwf	___ftge@ff2& (0+255),b
  1460  001426  0EA0               	movlw	160
  1461  001428  0100               	movlb	0	; () banked
  1462  00142A  6F70               	movwf	(___ftge@ff2+1)& (0+255),b
  1463  00142C  0E41               	movlw	65
  1464  00142E  0100               	movlb	0	; () banked
  1465  001430  6F71               	movwf	(___ftge@ff2+2)& (0+255),b
  1466  001432  ECBA  F012         	call	___ftge	;wreg free
  1467  001436  0100               	movlb	0	; () banked
  1468  001438  B0D8               	btfsc	status,0,c
  1469  00143A  D007               	goto	l5216
  1470                           
  1471                           ; BSR set to: 0
  1472  00143C  C039  F080         	movff	_PID,motorsUpdate@torque
  1473  001440  C03A  F081         	movff	_PID+1,motorsUpdate@torque+1
  1474  001444  EC81  F013         	call	_motorsUpdate	;wreg free
  1475  001448  D007               	goto	l5218
  1476  00144A                     l5216:
  1477                           
  1478                           ;main.c: 52: else motorsUpdate(0);
  1479  00144A  0E00               	movlw	0
  1480  00144C  0100               	movlb	0	; () banked
  1481  00144E  6F81               	movwf	(motorsUpdate@torque+1)& (0+255),b
  1482  001450  0E00               	movlw	0
  1483  001452  6F80               	movwf	motorsUpdate@torque& (0+255),b
  1484  001454  EC81  F013         	call	_motorsUpdate	;wreg free
  1485  001458                     l5218:
  1486  001458  C13B  F0C5         	movff	_loopMillis,??_main
  1487  00145C  C13C  F0C6         	movff	_loopMillis+1,??_main+1
  1488  001460  C13D  F0C7         	movff	_loopMillis+2,??_main+2
  1489  001464  C13E  F0C8         	movff	_loopMillis+3,??_main+3
  1490  001468  0100               	movlb	0	; () banked
  1491  00146A  1FC5               	comf	??_main& (0+255),f,b
  1492  00146C  1FC6               	comf	(??_main+1)& (0+255),f,b
  1493  00146E  1FC7               	comf	(??_main+2)& (0+255),f,b
  1494  001470  1FC8               	comf	(??_main+3)& (0+255),f,b
  1495  001472  2BC5               	incf	??_main& (0+255),f,b
  1496  001474  0E00               	movlw	0
  1497  001476  23C6               	addwfc	(??_main+1)& (0+255),f,b
  1498  001478  23C7               	addwfc	(??_main+2)& (0+255),f,b
  1499  00147A  23C8               	addwfc	(??_main+3)& (0+255),f,b
  1500  00147C  0100               	movlb	0	; () banked
  1501  00147E  51D3               	movf	_millis& (0+255),w,b
  1502  001480  0100               	movlb	0	; () banked
  1503  001482  25C5               	addwf	??_main& (0+255),w,b
  1504  001484  0100               	movlb	0	; () banked
  1505  001486  6FC9               	movwf	(??_main+4)& (0+255),b
  1506  001488  0100               	movlb	0	; () banked
  1507  00148A  51D4               	movf	(_millis+1)& (0+255),w,b
  1508  00148C  0100               	movlb	0	; () banked
  1509  00148E  21C6               	addwfc	(??_main+1)& (0+255),w,b
  1510  001490  0100               	movlb	0	; () banked
  1511  001492  6FCA               	movwf	(??_main+5)& (0+255),b
  1512  001494  0100               	movlb	0	; () banked
  1513  001496  51D5               	movf	(_millis+2)& (0+255),w,b
  1514  001498  0100               	movlb	0	; () banked
  1515  00149A  21C7               	addwfc	(??_main+2)& (0+255),w,b
  1516  00149C  0100               	movlb	0	; () banked
  1517  00149E  6FCB               	movwf	(??_main+6)& (0+255),b
  1518  0014A0  0100               	movlb	0	; () banked
  1519  0014A2  51D6               	movf	(_millis+3)& (0+255),w,b
  1520  0014A4  0100               	movlb	0	; () banked
  1521  0014A6  21C8               	addwfc	(??_main+3)& (0+255),w,b
  1522  0014A8  0100               	movlb	0	; () banked
  1523  0014AA  6FCC               	movwf	(??_main+7)& (0+255),b
  1524  0014AC  0100               	movlb	0	; () banked
  1525  0014AE  51CC               	movf	(??_main+7)& (0+255),w,b
  1526  0014B0  0100               	movlb	0	; () banked
  1527  0014B2  11CB               	iorwf	(??_main+6)& (0+255),w,b
  1528  0014B4  0100               	movlb	0	; () banked
  1529  0014B6  11CA               	iorwf	(??_main+5)& (0+255),w,b
  1530  0014B8  E106               	bnz	u6690
  1531  0014BA  0E14               	movlw	20
  1532  0014BC  0100               	movlb	0	; () banked
  1533  0014BE  5DC9               	subwf	(??_main+4)& (0+255),w,b
  1534  0014C0  B0D8               	btfsc	status,0,c
  1535  0014C2  D732               	goto	l5208
  1536  0014C4  D7C9               	goto	l5218
  1537  0014C6                     u6690:
  1538                           
  1539                           ; BSR set to: 0
  1540                           
  1541                           ; BSR set to: 0
  1542  0014C6  D730               	goto	l5208
  1543  0014C8                     __end_of_main:
  1544                           	opt stack 0
  1545                           tblptru	equ	0xFF8
  1546                           tblptrh	equ	0xFF7
  1547                           tblptrl	equ	0xFF6
  1548                           tablat	equ	0xFF5
  1549                           intcon	equ	0xFF2
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           fsr1l	equ	0xFE1
  1554                           status	equ	0xFD8
  1555                           
  1556 ;; *************** function _sensorSetup *****************
  1557 ;; Defined at:
  1558 ;;		line 38 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\MPU-6050.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;		None
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;		None
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  1    wreg      void 
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1572 ;;      Params:         0       0       0       0       0       0       0
  1573 ;;      Locals:         0       0       0       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0       0       0
  1575 ;;      Totals:         0       0       0       0       0       0       0
  1576 ;;Total ram usage:        0 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    4
  1579 ;; This function calls:
  1580 ;;		_IdleI2C
  1581 ;;		_WriteI2C
  1582 ;; This function is called by:
  1583 ;;		_main
  1584 ;; This function uses a non-reentrant model
  1585 ;;
  1586                           
  1587                           	psect	text1
  1588  00286A                     __ptext1:
  1589                           	opt stack 0
  1590  00286A                     _sensorSetup:
  1591                           	opt stack 26
  1592                           
  1593                           ;MPU-6050.c: 39: IdleI2C();
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;incstack = 0
  1597  00286A  ECB6  F017         	call	_IdleI2C	;wreg free
  1598                           
  1599                           ;MPU-6050.c: 40: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1600  00286E  80C5               	bsf	4037,0,c	;volatile
  1601  002870                     l180:
  1602  002870  B0C5               	btfsc	4037,0,c	;volatile
  1603  002872  D7FE               	goto	l180
  1604                           
  1605                           ;MPU-6050.c: 41: WriteI2C(0xD0);
  1606  002874  0ED0               	movlw	208
  1607  002876  EC47  F017         	call	_WriteI2C
  1608                           
  1609                           ;MPU-6050.c: 42: WriteI2C(0x6B);
  1610  00287A  0E6B               	movlw	107
  1611  00287C  EC47  F017         	call	_WriteI2C
  1612                           
  1613                           ;MPU-6050.c: 43: WriteI2C(0b00001011);
  1614  002880  0E0B               	movlw	11
  1615  002882  EC47  F017         	call	_WriteI2C
  1616                           
  1617                           ;MPU-6050.c: 44: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1618  002886  84C5               	bsf	4037,2,c	;volatile
  1619  002888                     l183:
  1620  002888  B4C5               	btfsc	4037,2,c	;volatile
  1621  00288A  D7FE               	goto	l183
  1622                           
  1623                           ;MPU-6050.c: 46: IdleI2C();
  1624  00288C  ECB6  F017         	call	_IdleI2C	;wreg free
  1625                           
  1626                           ;MPU-6050.c: 47: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1627  002890  80C5               	bsf	4037,0,c	;volatile
  1628  002892                     l186:
  1629  002892  B0C5               	btfsc	4037,0,c	;volatile
  1630  002894  D7FE               	goto	l186
  1631                           
  1632                           ;MPU-6050.c: 48: WriteI2C(0xD0);
  1633  002896  0ED0               	movlw	208
  1634  002898  EC47  F017         	call	_WriteI2C
  1635                           
  1636                           ;MPU-6050.c: 49: WriteI2C(0x1A);
  1637  00289C  0E1A               	movlw	26
  1638  00289E  EC47  F017         	call	_WriteI2C
  1639                           
  1640                           ;MPU-6050.c: 50: WriteI2C(0b00000101);
  1641  0028A2  0E05               	movlw	5
  1642  0028A4  EC47  F017         	call	_WriteI2C
  1643                           
  1644                           ;MPU-6050.c: 51: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1645  0028A8  84C5               	bsf	4037,2,c	;volatile
  1646  0028AA                     l189:
  1647  0028AA  B4C5               	btfsc	4037,2,c	;volatile
  1648  0028AC  D7FE               	goto	l189
  1649                           
  1650                           ;MPU-6050.c: 53: IdleI2C();
  1651  0028AE  ECB6  F017         	call	_IdleI2C	;wreg free
  1652                           
  1653                           ;MPU-6050.c: 54: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1654  0028B2  80C5               	bsf	4037,0,c	;volatile
  1655  0028B4                     l192:
  1656  0028B4  B0C5               	btfsc	4037,0,c	;volatile
  1657  0028B6  D7FE               	goto	l192
  1658                           
  1659                           ;MPU-6050.c: 55: WriteI2C(0xD0);
  1660  0028B8  0ED0               	movlw	208
  1661  0028BA  EC47  F017         	call	_WriteI2C
  1662                           
  1663                           ;MPU-6050.c: 56: WriteI2C(0x19);
  1664  0028BE  0E19               	movlw	25
  1665  0028C0  EC47  F017         	call	_WriteI2C
  1666                           
  1667                           ;MPU-6050.c: 57: WriteI2C(19);
  1668  0028C4  0E13               	movlw	19
  1669  0028C6  EC47  F017         	call	_WriteI2C
  1670                           
  1671                           ;MPU-6050.c: 58: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1672  0028CA  84C5               	bsf	4037,2,c	;volatile
  1673  0028CC                     l195:
  1674  0028CC  B4C5               	btfsc	4037,2,c	;volatile
  1675  0028CE  D7FE               	goto	l195
  1676                           
  1677                           ;MPU-6050.c: 60: IdleI2C();
  1678  0028D0  ECB6  F017         	call	_IdleI2C	;wreg free
  1679                           
  1680                           ;MPU-6050.c: 61: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1681  0028D4  80C5               	bsf	4037,0,c	;volatile
  1682  0028D6                     l198:
  1683  0028D6  B0C5               	btfsc	4037,0,c	;volatile
  1684  0028D8  D7FE               	goto	l198
  1685                           
  1686                           ;MPU-6050.c: 62: WriteI2C(0xD0);
  1687  0028DA  0ED0               	movlw	208
  1688  0028DC  EC47  F017         	call	_WriteI2C
  1689                           
  1690                           ;MPU-6050.c: 63: WriteI2C(0x1B);
  1691  0028E0  0E1B               	movlw	27
  1692  0028E2  EC47  F017         	call	_WriteI2C
  1693                           
  1694                           ;MPU-6050.c: 64: WriteI2C(0x00);
  1695  0028E6  0E00               	movlw	0
  1696  0028E8  EC47  F017         	call	_WriteI2C
  1697                           
  1698                           ;MPU-6050.c: 65: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1699  0028EC  84C5               	bsf	4037,2,c	;volatile
  1700  0028EE                     l201:
  1701  0028EE  B4C5               	btfsc	4037,2,c	;volatile
  1702  0028F0  D7FE               	goto	l201
  1703                           
  1704                           ;MPU-6050.c: 67: IdleI2C();
  1705  0028F2  ECB6  F017         	call	_IdleI2C	;wreg free
  1706                           
  1707                           ;MPU-6050.c: 68: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1708  0028F6  80C5               	bsf	4037,0,c	;volatile
  1709  0028F8                     l204:
  1710  0028F8  B0C5               	btfsc	4037,0,c	;volatile
  1711  0028FA  D7FE               	goto	l204
  1712                           
  1713                           ;MPU-6050.c: 69: WriteI2C(0xD0);
  1714  0028FC  0ED0               	movlw	208
  1715  0028FE  EC47  F017         	call	_WriteI2C
  1716                           
  1717                           ;MPU-6050.c: 70: WriteI2C(0x1C);
  1718  002902  0E1C               	movlw	28
  1719  002904  EC47  F017         	call	_WriteI2C
  1720                           
  1721                           ;MPU-6050.c: 71: WriteI2C(0x00);
  1722  002908  0E00               	movlw	0
  1723  00290A  EC47  F017         	call	_WriteI2C
  1724                           
  1725                           ;MPU-6050.c: 72: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1726  00290E  84C5               	bsf	4037,2,c	;volatile
  1727  002910                     l207:
  1728  002910  A4C5               	btfss	4037,2,c	;volatile
  1729  002912  0012               	return	
  1730  002914  D7FD               	goto	l207
  1731  002916                     __end_of_sensorSetup:
  1732                           	opt stack 0
  1733                           tblptru	equ	0xFF8
  1734                           tblptrh	equ	0xFF7
  1735                           tblptrl	equ	0xFF6
  1736                           tablat	equ	0xFF5
  1737                           intcon	equ	0xFF2
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           postdec1	equ	0xFE5
  1741                           fsr1l	equ	0xFE1
  1742                           status	equ	0xFD8
  1743                           
  1744 ;; *************** function _motorsUpdate *****************
  1745 ;; Defined at:
  1746 ;;		line 29 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\PID&Motors.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  torque          2   32[BANK0 ] int 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  1    wreg      void 
  1753 ;; Registers used:
  1754 ;;		wreg, status,2, status,0, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1760 ;;      Params:         0       2       0       0       0       0       0
  1761 ;;      Locals:         0       0       0       0       0       0       0
  1762 ;;      Temps:          0       0       0       0       0       0       0
  1763 ;;      Totals:         0       2       0       0       0       0       0
  1764 ;;Total ram usage:        2 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    4
  1767 ;; This function calls:
  1768 ;;		_map
  1769 ;; This function is called by:
  1770 ;;		_main
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text2
  1775  002702                     __ptext2:
  1776                           	opt stack 0
  1777  002702                     _motorsUpdate:
  1778                           	opt stack 26
  1779                           
  1780                           ;PID&Motors.c: 30: if (torque > 0){
  1781                           
  1782                           ;incstack = 0
  1783  002702  0100               	movlb	0	; () banked
  1784  002704  BF81               	btfsc	(motorsUpdate@torque+1)& (0+255),7,b
  1785  002706  D00B               	goto	l4838
  1786  002708  0100               	movlb	0	; () banked
  1787  00270A  5181               	movf	(motorsUpdate@torque+1)& (0+255),w,b
  1788  00270C  E104               	bnz	u6080
  1789  00270E  0100               	movlb	0	; () banked
  1790  002710  0580               	decf	motorsUpdate@torque& (0+255),w,b
  1791  002712  A0D8               	btfss	status,0,c
  1792  002714  D004               	goto	l4838
  1793  002716                     u6080:
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;PID&Motors.c: 31: RB2 = 0;
  1797  002716  9481               	bcf	3969,2,c	;volatile
  1798                           
  1799                           ;PID&Motors.c: 32: RB3 = 1;
  1800  002718  8681               	bsf	3969,3,c	;volatile
  1801                           
  1802                           ;PID&Motors.c: 33: RB4 = 0;
  1803  00271A  9881               	bcf	3969,4,c	;volatile
  1804  00271C  D01A               	goto	L1
  1805  00271E                     l4838:
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;PID&Motors.c: 36: else if (torque < 0){
  1809  00271E  0100               	movlb	0	; () banked
  1810  002720  AF81               	btfss	(motorsUpdate@torque+1)& (0+255),7,b
  1811  002722  D014               	goto	l378
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;PID&Motors.c: 37: RB2 = 1;
  1815  002724  8481               	bsf	3969,2,c	;volatile
  1816                           
  1817                           ;PID&Motors.c: 38: RB3 = 0;
  1818  002726  9681               	bcf	3969,3,c	;volatile
  1819                           
  1820                           ;PID&Motors.c: 39: RB4 = 1;
  1821  002728  8881               	bsf	3969,4,c	;volatile
  1822                           
  1823                           ;PID&Motors.c: 40: RB5 = 0;
  1824  00272A  9A81               	bcf	3969,5,c	;volatile
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;PID&Motors.c: 41: torque = ((torque) > 0 ? (torque) : -(torque));
  1828  00272C  0100               	movlb	0	; () banked
  1829  00272E  BF81               	btfsc	(motorsUpdate@torque+1)& (0+255),7,b
  1830  002730  D007               	goto	l4844
  1831  002732  0100               	movlb	0	; () banked
  1832  002734  5181               	movf	(motorsUpdate@torque+1)& (0+255),w,b
  1833  002736  E10E               	bnz	l4846
  1834  002738  0100               	movlb	0	; () banked
  1835  00273A  0580               	decf	motorsUpdate@torque& (0+255),w,b
  1836  00273C  B0D8               	btfsc	status,0,c
  1837  00273E  D00A               	goto	l4846
  1838  002740                     l4844:
  1839                           
  1840                           ; BSR set to: 0
  1841  002740  0100               	movlb	0	; () banked
  1842  002742  6D80               	negf	motorsUpdate@torque& (0+255),b
  1843  002744  1F81               	comf	(motorsUpdate@torque+1)& (0+255),f,b
  1844  002746  B0D8               	btfsc	status,0,c
  1845  002748  2B81               	incf	(motorsUpdate@torque+1)& (0+255),f,b
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;PID&Motors.c: 42: }
  1849                           
  1850                           ; BSR set to: 0
  1851  00274A  D004               	goto	l4846
  1852  00274C                     l378:
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;PID&Motors.c: 43: else{
  1856                           ;PID&Motors.c: 44: RB2 = 1;
  1857  00274C  8481               	bsf	3969,2,c	;volatile
  1858                           
  1859                           ;PID&Motors.c: 45: RB3 = 1;
  1860  00274E  8681               	bsf	3969,3,c	;volatile
  1861                           
  1862                           ;PID&Motors.c: 46: RB4 = 1;
  1863  002750  8881               	bsf	3969,4,c	;volatile
  1864  002752                     L1:
  1865                           
  1866                           ;PID&Motors.c: 47: RB5 = 1;
  1867  002752  8A81               	bsf	3969,5,c	;volatile
  1868  002754                     l4846:
  1869                           
  1870                           ; BSR set to: 0
  1871                           ;PID&Motors.c: 48: }
  1872                           ;PID&Motors.c: 49: CCPR1L = (unsigned char) map(torque,0,255,30,255);
  1873  002754  C080  F060         	movff	motorsUpdate@torque,map@x
  1874  002758  C081  F061         	movff	motorsUpdate@torque+1,map@x+1
  1875  00275C  0100               	movlb	0	; () banked
  1876  00275E  0E00               	movlw	0
  1877  002760  BF61               	btfsc	(map@x+1)& (0+255),7,b
  1878  002762  0EFF               	movlw	-1
  1879  002764  6F62               	movwf	(map@x+2)& (0+255),b
  1880  002766  6F63               	movwf	(map@x+3)& (0+255),b
  1881  002768  0E00               	movlw	0
  1882  00276A  0100               	movlb	0	; () banked
  1883  00276C  6F64               	movwf	map@in_min& (0+255),b
  1884  00276E  0E00               	movlw	0
  1885  002770  6F65               	movwf	(map@in_min+1)& (0+255),b
  1886  002772  0E00               	movlw	0
  1887  002774  6F66               	movwf	(map@in_min+2)& (0+255),b
  1888  002776  0E00               	movlw	0
  1889  002778  6F67               	movwf	(map@in_min+3)& (0+255),b
  1890  00277A  0EFF               	movlw	255
  1891  00277C  0100               	movlb	0	; () banked
  1892  00277E  6F68               	movwf	map@in_max& (0+255),b
  1893  002780  0E00               	movlw	0
  1894  002782  6F69               	movwf	(map@in_max+1)& (0+255),b
  1895  002784  0E00               	movlw	0
  1896  002786  6F6A               	movwf	(map@in_max+2)& (0+255),b
  1897  002788  0E00               	movlw	0
  1898  00278A  6F6B               	movwf	(map@in_max+3)& (0+255),b
  1899  00278C  0E1E               	movlw	30
  1900  00278E  0100               	movlb	0	; () banked
  1901  002790  6F6C               	movwf	map@out_min& (0+255),b
  1902  002792  0E00               	movlw	0
  1903  002794  6F6D               	movwf	(map@out_min+1)& (0+255),b
  1904  002796  0E00               	movlw	0
  1905  002798  6F6E               	movwf	(map@out_min+2)& (0+255),b
  1906  00279A  0E00               	movlw	0
  1907  00279C  6F6F               	movwf	(map@out_min+3)& (0+255),b
  1908  00279E  0EFF               	movlw	255
  1909  0027A0  0100               	movlb	0	; () banked
  1910  0027A2  6F70               	movwf	map@out_max& (0+255),b
  1911  0027A4  0E00               	movlw	0
  1912  0027A6  6F71               	movwf	(map@out_max+1)& (0+255),b
  1913  0027A8  0E00               	movlw	0
  1914  0027AA  6F72               	movwf	(map@out_max+2)& (0+255),b
  1915  0027AC  0E00               	movlw	0
  1916  0027AE  6F73               	movwf	(map@out_max+3)& (0+255),b
  1917  0027B0  ECD3  F00F         	call	_map	;wreg free
  1918  0027B4  0100               	movlb	0	; () banked
  1919  0027B6  5160               	movf	?_map& (0+255),w,b
  1920  0027B8  6EBE               	movwf	4030,c	;volatile
  1921                           
  1922                           ; BSR set to: 0
  1923  0027BA  0012               	return		;funcret
  1924  0027BC                     __end_of_motorsUpdate:
  1925                           	opt stack 0
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           intcon	equ	0xFF2
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           postdec1	equ	0xFE5
  1934                           fsr1l	equ	0xFE1
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _map *****************
  1938 ;; Defined at:
  1939 ;;		line 4 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\main.h"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  x               4    0[BANK0 ] long 
  1942 ;;  in_min          4    4[BANK0 ] long 
  1943 ;;  in_max          4    8[BANK0 ] long 
  1944 ;;  out_min         4   12[BANK0 ] long 
  1945 ;;  out_max         4   16[BANK0 ] long 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;		None
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  4    0[BANK0 ] long 
  1950 ;; Registers used:
  1951 ;;		wreg, status,2, status,0, cstack
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1957 ;;      Params:         0      20       0       0       0       0       0
  1958 ;;      Locals:         0       0       0       0       0       0       0
  1959 ;;      Temps:          0      12       0       0       0       0       0
  1960 ;;      Totals:         0      32       0       0       0       0       0
  1961 ;;Total ram usage:       32 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    3
  1964 ;; This function calls:
  1965 ;;		___aldiv
  1966 ;;		___lmul
  1967 ;; This function is called by:
  1968 ;;		_motorsUpdate
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text3
  1973  001FA6                     __ptext3:
  1974                           	opt stack 0
  1975  001FA6                     _map:
  1976                           	opt stack 26
  1977                           
  1978                           ;main.h: 5: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;incstack = 0
  1982  001FA6  C064  F074         	movff	map@in_min,??_map
  1983  001FAA  C065  F075         	movff	map@in_min+1,??_map+1
  1984  001FAE  C066  F076         	movff	map@in_min+2,??_map+2
  1985  001FB2  C067  F077         	movff	map@in_min+3,??_map+3
  1986  001FB6  0100               	movlb	0	; () banked
  1987  001FB8  1F74               	comf	??_map& (0+255),f,b
  1988  001FBA  1F75               	comf	(??_map+1)& (0+255),f,b
  1989  001FBC  1F76               	comf	(??_map+2)& (0+255),f,b
  1990  001FBE  1F77               	comf	(??_map+3)& (0+255),f,b
  1991  001FC0  2B74               	incf	??_map& (0+255),f,b
  1992  001FC2  0E00               	movlw	0
  1993  001FC4  2375               	addwfc	(??_map+1)& (0+255),f,b
  1994  001FC6  2376               	addwfc	(??_map+2)& (0+255),f,b
  1995  001FC8  2377               	addwfc	(??_map+3)& (0+255),f,b
  1996  001FCA  0100               	movlb	0	; () banked
  1997  001FCC  5160               	movf	map@x& (0+255),w,b
  1998  001FCE  0100               	movlb	0	; () banked
  1999  001FD0  2574               	addwf	??_map& (0+255),w,b
  2000  001FD2  6E18               	movwf	___lmul@multiplier,c
  2001  001FD4  0100               	movlb	0	; () banked
  2002  001FD6  5161               	movf	(map@x+1)& (0+255),w,b
  2003  001FD8  0100               	movlb	0	; () banked
  2004  001FDA  2175               	addwfc	(??_map+1)& (0+255),w,b
  2005  001FDC  6E19               	movwf	___lmul@multiplier+1,c
  2006  001FDE  0100               	movlb	0	; () banked
  2007  001FE0  5162               	movf	(map@x+2)& (0+255),w,b
  2008  001FE2  0100               	movlb	0	; () banked
  2009  001FE4  2176               	addwfc	(??_map+2)& (0+255),w,b
  2010  001FE6  6E1A               	movwf	___lmul@multiplier+2,c
  2011  001FE8  0100               	movlb	0	; () banked
  2012  001FEA  5163               	movf	(map@x+3)& (0+255),w,b
  2013  001FEC  0100               	movlb	0	; () banked
  2014  001FEE  2177               	addwfc	(??_map+3)& (0+255),w,b
  2015  001FF0  6E1B               	movwf	___lmul@multiplier+3,c
  2016  001FF2  C06C  F078         	movff	map@out_min,??_map+4
  2017  001FF6  C06D  F079         	movff	map@out_min+1,??_map+5
  2018  001FFA  C06E  F07A         	movff	map@out_min+2,??_map+6
  2019  001FFE  C06F  F07B         	movff	map@out_min+3,??_map+7
  2020  002002  0100               	movlb	0	; () banked
  2021  002004  1F78               	comf	(??_map+4)& (0+255),f,b
  2022  002006  1F79               	comf	(??_map+5)& (0+255),f,b
  2023  002008  1F7A               	comf	(??_map+6)& (0+255),f,b
  2024  00200A  1F7B               	comf	(??_map+7)& (0+255),f,b
  2025  00200C  2B78               	incf	(??_map+4)& (0+255),f,b
  2026  00200E  0E00               	movlw	0
  2027  002010  2379               	addwfc	(??_map+5)& (0+255),f,b
  2028  002012  237A               	addwfc	(??_map+6)& (0+255),f,b
  2029  002014  237B               	addwfc	(??_map+7)& (0+255),f,b
  2030  002016  0100               	movlb	0	; () banked
  2031  002018  5170               	movf	map@out_max& (0+255),w,b
  2032  00201A  0100               	movlb	0	; () banked
  2033  00201C  2578               	addwf	(??_map+4)& (0+255),w,b
  2034  00201E  6E1C               	movwf	___lmul@multiplicand,c
  2035  002020  0100               	movlb	0	; () banked
  2036  002022  5171               	movf	(map@out_max+1)& (0+255),w,b
  2037  002024  0100               	movlb	0	; () banked
  2038  002026  2179               	addwfc	(??_map+5)& (0+255),w,b
  2039  002028  6E1D               	movwf	___lmul@multiplicand+1,c
  2040  00202A  0100               	movlb	0	; () banked
  2041  00202C  5172               	movf	(map@out_max+2)& (0+255),w,b
  2042  00202E  0100               	movlb	0	; () banked
  2043  002030  217A               	addwfc	(??_map+6)& (0+255),w,b
  2044  002032  6E1E               	movwf	___lmul@multiplicand+2,c
  2045  002034  0100               	movlb	0	; () banked
  2046  002036  5173               	movf	(map@out_max+3)& (0+255),w,b
  2047  002038  0100               	movlb	0	; () banked
  2048  00203A  217B               	addwfc	(??_map+7)& (0+255),w,b
  2049  00203C  6E1F               	movwf	___lmul@multiplicand+3,c
  2050  00203E  ECC2  F016         	call	___lmul	;wreg free
  2051  002042  C018  F024         	movff	?___lmul,___aldiv@dividend
  2052  002046  C019  F025         	movff	?___lmul+1,___aldiv@dividend+1
  2053  00204A  C01A  F026         	movff	?___lmul+2,___aldiv@dividend+2
  2054  00204E  C01B  F027         	movff	?___lmul+3,___aldiv@dividend+3
  2055  002052  C064  F07C         	movff	map@in_min,??_map+8
  2056  002056  C065  F07D         	movff	map@in_min+1,??_map+9
  2057  00205A  C066  F07E         	movff	map@in_min+2,??_map+10
  2058  00205E  C067  F07F         	movff	map@in_min+3,??_map+11
  2059  002062  0100               	movlb	0	; () banked
  2060  002064  1F7C               	comf	(??_map+8)& (0+255),f,b
  2061  002066  1F7D               	comf	(??_map+9)& (0+255),f,b
  2062  002068  1F7E               	comf	(??_map+10)& (0+255),f,b
  2063  00206A  1F7F               	comf	(??_map+11)& (0+255),f,b
  2064  00206C  2B7C               	incf	(??_map+8)& (0+255),f,b
  2065  00206E  0E00               	movlw	0
  2066  002070  237D               	addwfc	(??_map+9)& (0+255),f,b
  2067  002072  237E               	addwfc	(??_map+10)& (0+255),f,b
  2068  002074  237F               	addwfc	(??_map+11)& (0+255),f,b
  2069  002076  0100               	movlb	0	; () banked
  2070  002078  5168               	movf	map@in_max& (0+255),w,b
  2071  00207A  0100               	movlb	0	; () banked
  2072  00207C  257C               	addwf	(??_map+8)& (0+255),w,b
  2073  00207E  6E28               	movwf	___aldiv@divisor,c
  2074  002080  0100               	movlb	0	; () banked
  2075  002082  5169               	movf	(map@in_max+1)& (0+255),w,b
  2076  002084  0100               	movlb	0	; () banked
  2077  002086  217D               	addwfc	(??_map+9)& (0+255),w,b
  2078  002088  6E29               	movwf	___aldiv@divisor+1,c
  2079  00208A  0100               	movlb	0	; () banked
  2080  00208C  516A               	movf	(map@in_max+2)& (0+255),w,b
  2081  00208E  0100               	movlb	0	; () banked
  2082  002090  217E               	addwfc	(??_map+10)& (0+255),w,b
  2083  002092  6E2A               	movwf	___aldiv@divisor+2,c
  2084  002094  0100               	movlb	0	; () banked
  2085  002096  516B               	movf	(map@in_max+3)& (0+255),w,b
  2086  002098  0100               	movlb	0	; () banked
  2087  00209A  217F               	addwfc	(??_map+11)& (0+255),w,b
  2088  00209C  6E2B               	movwf	___aldiv@divisor+3,c
  2089  00209E  EC54  F012         	call	___aldiv	;wreg free
  2090  0020A2  0100               	movlb	0	; () banked
  2091  0020A4  516C               	movf	map@out_min& (0+255),w,b
  2092  0020A6  2424               	addwf	?___aldiv,w,c
  2093  0020A8  0100               	movlb	0	; () banked
  2094  0020AA  6F60               	movwf	?_map& (0+255),b
  2095  0020AC  0100               	movlb	0	; () banked
  2096  0020AE  516D               	movf	(map@out_min+1)& (0+255),w,b
  2097  0020B0  2025               	addwfc	?___aldiv+1,w,c
  2098  0020B2  0100               	movlb	0	; () banked
  2099  0020B4  6F61               	movwf	(?_map+1)& (0+255),b
  2100  0020B6  0100               	movlb	0	; () banked
  2101  0020B8  516E               	movf	(map@out_min+2)& (0+255),w,b
  2102  0020BA  2026               	addwfc	?___aldiv+2,w,c
  2103  0020BC  0100               	movlb	0	; () banked
  2104  0020BE  6F62               	movwf	(?_map+2)& (0+255),b
  2105  0020C0  0100               	movlb	0	; () banked
  2106  0020C2  516F               	movf	(map@out_min+3)& (0+255),w,b
  2107  0020C4  2027               	addwfc	?___aldiv+3,w,c
  2108  0020C6  0100               	movlb	0	; () banked
  2109  0020C8  6F63               	movwf	(?_map+3)& (0+255),b
  2110  0020CA  0012               	return	
  2111  0020CC                     __end_of_map:
  2112                           	opt stack 0
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           intcon	equ	0xFF2
  2118                           postinc0	equ	0xFEE
  2119                           wreg	equ	0xFE8
  2120                           postdec1	equ	0xFE5
  2121                           fsr1l	equ	0xFE1
  2122                           status	equ	0xFD8
  2123                           
  2124 ;; *************** function ___lmul *****************
  2125 ;; Defined at:
  2126 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  multiplier      4   23[COMRAM] unsigned long 
  2129 ;;  multiplicand    4   27[COMRAM] unsigned long 
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;  product         4   31[COMRAM] unsigned long 
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  4   23[COMRAM] unsigned long 
  2134 ;; Registers used:
  2135 ;;		wreg, status,2, status,0
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2141 ;;      Params:         8       0       0       0       0       0       0
  2142 ;;      Locals:         4       0       0       0       0       0       0
  2143 ;;      Temps:          0       0       0       0       0       0       0
  2144 ;;      Totals:        12       0       0       0       0       0       0
  2145 ;;Total ram usage:       12 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    2
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		_map
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	text4
  2156  002D84                     __ptext4:
  2157                           	opt stack 0
  2158  002D84                     ___lmul:
  2159                           	opt stack 26
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;incstack = 0
  2163  002D84  0E00               	movlw	0
  2164  002D86  6E20               	movwf	___lmul@product,c
  2165  002D88  0E00               	movlw	0
  2166  002D8A  6E21               	movwf	___lmul@product+1,c
  2167  002D8C  0E00               	movlw	0
  2168  002D8E  6E22               	movwf	___lmul@product+2,c
  2169  002D90  0E00               	movlw	0
  2170  002D92  6E23               	movwf	___lmul@product+3,c
  2171  002D94                     l2798:
  2172  002D94  A018               	btfss	___lmul@multiplier,0,c
  2173  002D96  D008               	goto	l2802
  2174  002D98  501C               	movf	___lmul@multiplicand,w,c
  2175  002D9A  2620               	addwf	___lmul@product,f,c
  2176  002D9C  501D               	movf	___lmul@multiplicand+1,w,c
  2177  002D9E  2221               	addwfc	___lmul@product+1,f,c
  2178  002DA0  501E               	movf	___lmul@multiplicand+2,w,c
  2179  002DA2  2222               	addwfc	___lmul@product+2,f,c
  2180  002DA4  501F               	movf	___lmul@multiplicand+3,w,c
  2181  002DA6  2223               	addwfc	___lmul@product+3,f,c
  2182  002DA8                     l2802:
  2183  002DA8  90D8               	bcf	status,0,c
  2184  002DAA  361C               	rlcf	___lmul@multiplicand,f,c
  2185  002DAC  361D               	rlcf	___lmul@multiplicand+1,f,c
  2186  002DAE  361E               	rlcf	___lmul@multiplicand+2,f,c
  2187  002DB0  361F               	rlcf	___lmul@multiplicand+3,f,c
  2188  002DB2  90D8               	bcf	status,0,c
  2189  002DB4  321B               	rrcf	___lmul@multiplier+3,f,c
  2190  002DB6  321A               	rrcf	___lmul@multiplier+2,f,c
  2191  002DB8  3219               	rrcf	___lmul@multiplier+1,f,c
  2192  002DBA  3218               	rrcf	___lmul@multiplier,f,c
  2193  002DBC  5018               	movf	___lmul@multiplier,w,c
  2194  002DBE  1019               	iorwf	___lmul@multiplier+1,w,c
  2195  002DC0  101A               	iorwf	___lmul@multiplier+2,w,c
  2196  002DC2  101B               	iorwf	___lmul@multiplier+3,w,c
  2197  002DC4  A4D8               	btfss	status,2,c
  2198  002DC6  D7E6               	goto	l2798
  2199  002DC8  C020  F018         	movff	___lmul@product,?___lmul
  2200  002DCC  C021  F019         	movff	___lmul@product+1,?___lmul+1
  2201  002DD0  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  2202  002DD4  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  2203  002DD8  0012               	return		;funcret
  2204  002DDA                     __end_of___lmul:
  2205                           	opt stack 0
  2206                           tblptru	equ	0xFF8
  2207                           tblptrh	equ	0xFF7
  2208                           tblptrl	equ	0xFF6
  2209                           tablat	equ	0xFF5
  2210                           intcon	equ	0xFF2
  2211                           postinc0	equ	0xFEE
  2212                           wreg	equ	0xFE8
  2213                           postdec1	equ	0xFE5
  2214                           fsr1l	equ	0xFE1
  2215                           status	equ	0xFD8
  2216                           
  2217 ;; *************** function ___aldiv *****************
  2218 ;; Defined at:
  2219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;  dividend        4   35[COMRAM] long 
  2222 ;;  divisor         4   39[COMRAM] long 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  quotient        4   45[COMRAM] long 
  2225 ;;  sign            1   44[COMRAM] unsigned char 
  2226 ;;  counter         1   43[COMRAM] unsigned char 
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  4   35[COMRAM] long 
  2229 ;; Registers used:
  2230 ;;		wreg, status,2, status,0
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2236 ;;      Params:         8       0       0       0       0       0       0
  2237 ;;      Locals:         6       0       0       0       0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0       0
  2239 ;;      Totals:        14       0       0       0       0       0       0
  2240 ;;Total ram usage:       14 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    2
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_map
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           	psect	text5
  2251  0024A8                     __ptext5:
  2252                           	opt stack 0
  2253  0024A8                     ___aldiv:
  2254                           	opt stack 26
  2255                           
  2256                           ;incstack = 0
  2257  0024A8  0E00               	movlw	0
  2258  0024AA  6E2D               	movwf	___aldiv@sign,c
  2259  0024AC  AE2B               	btfss	___aldiv@divisor+3,7,c
  2260  0024AE  D00A               	goto	l2814
  2261  0024B0  1E2B               	comf	___aldiv@divisor+3,f,c
  2262  0024B2  1E2A               	comf	___aldiv@divisor+2,f,c
  2263  0024B4  1E29               	comf	___aldiv@divisor+1,f,c
  2264  0024B6  6C28               	negf	___aldiv@divisor,c
  2265  0024B8  0E00               	movlw	0
  2266  0024BA  2229               	addwfc	___aldiv@divisor+1,f,c
  2267  0024BC  222A               	addwfc	___aldiv@divisor+2,f,c
  2268  0024BE  222B               	addwfc	___aldiv@divisor+3,f,c
  2269  0024C0  0E01               	movlw	1
  2270  0024C2  6E2D               	movwf	___aldiv@sign,c
  2271  0024C4                     l2814:
  2272  0024C4  AE27               	btfss	___aldiv@dividend+3,7,c
  2273  0024C6  D00A               	goto	l2820
  2274  0024C8  1E27               	comf	___aldiv@dividend+3,f,c
  2275  0024CA  1E26               	comf	___aldiv@dividend+2,f,c
  2276  0024CC  1E25               	comf	___aldiv@dividend+1,f,c
  2277  0024CE  6C24               	negf	___aldiv@dividend,c
  2278  0024D0  0E00               	movlw	0
  2279  0024D2  2225               	addwfc	___aldiv@dividend+1,f,c
  2280  0024D4  2226               	addwfc	___aldiv@dividend+2,f,c
  2281  0024D6  2227               	addwfc	___aldiv@dividend+3,f,c
  2282  0024D8  0E01               	movlw	1
  2283  0024DA  1A2D               	xorwf	___aldiv@sign,f,c
  2284  0024DC                     l2820:
  2285  0024DC  0E00               	movlw	0
  2286  0024DE  6E2E               	movwf	___aldiv@quotient,c
  2287  0024E0  0E00               	movlw	0
  2288  0024E2  6E2F               	movwf	___aldiv@quotient+1,c
  2289  0024E4  0E00               	movlw	0
  2290  0024E6  6E30               	movwf	___aldiv@quotient+2,c
  2291  0024E8  0E00               	movlw	0
  2292  0024EA  6E31               	movwf	___aldiv@quotient+3,c
  2293  0024EC  5028               	movf	___aldiv@divisor,w,c
  2294  0024EE  1029               	iorwf	___aldiv@divisor+1,w,c
  2295  0024F0  102A               	iorwf	___aldiv@divisor+2,w,c
  2296  0024F2  102B               	iorwf	___aldiv@divisor+3,w,c
  2297  0024F4  B4D8               	btfsc	status,2,c
  2298  0024F6  D02A               	goto	l2842
  2299  0024F8  0E01               	movlw	1
  2300  0024FA  6E2C               	movwf	___aldiv@counter,c
  2301  0024FC  D006               	goto	l2828
  2302  0024FE                     l2826:
  2303  0024FE  90D8               	bcf	status,0,c
  2304  002500  3628               	rlcf	___aldiv@divisor,f,c
  2305  002502  3629               	rlcf	___aldiv@divisor+1,f,c
  2306  002504  362A               	rlcf	___aldiv@divisor+2,f,c
  2307  002506  362B               	rlcf	___aldiv@divisor+3,f,c
  2308  002508  2A2C               	incf	___aldiv@counter,f,c
  2309  00250A                     l2828:
  2310  00250A  AE2B               	btfss	___aldiv@divisor+3,7,c
  2311  00250C  D7F8               	goto	l2826
  2312  00250E                     l2830:
  2313  00250E  90D8               	bcf	status,0,c
  2314  002510  362E               	rlcf	___aldiv@quotient,f,c
  2315  002512  362F               	rlcf	___aldiv@quotient+1,f,c
  2316  002514  3630               	rlcf	___aldiv@quotient+2,f,c
  2317  002516  3631               	rlcf	___aldiv@quotient+3,f,c
  2318  002518  5028               	movf	___aldiv@divisor,w,c
  2319  00251A  5C24               	subwf	___aldiv@dividend,w,c
  2320  00251C  5029               	movf	___aldiv@divisor+1,w,c
  2321  00251E  5825               	subwfb	___aldiv@dividend+1,w,c
  2322  002520  502A               	movf	___aldiv@divisor+2,w,c
  2323  002522  5826               	subwfb	___aldiv@dividend+2,w,c
  2324  002524  502B               	movf	___aldiv@divisor+3,w,c
  2325  002526  5827               	subwfb	___aldiv@dividend+3,w,c
  2326  002528  A0D8               	btfss	status,0,c
  2327  00252A  D009               	goto	l2838
  2328  00252C  5028               	movf	___aldiv@divisor,w,c
  2329  00252E  5E24               	subwf	___aldiv@dividend,f,c
  2330  002530  5029               	movf	___aldiv@divisor+1,w,c
  2331  002532  5A25               	subwfb	___aldiv@dividend+1,f,c
  2332  002534  502A               	movf	___aldiv@divisor+2,w,c
  2333  002536  5A26               	subwfb	___aldiv@dividend+2,f,c
  2334  002538  502B               	movf	___aldiv@divisor+3,w,c
  2335  00253A  5A27               	subwfb	___aldiv@dividend+3,f,c
  2336  00253C  802E               	bsf	___aldiv@quotient,0,c
  2337  00253E                     l2838:
  2338  00253E  90D8               	bcf	status,0,c
  2339  002540  322B               	rrcf	___aldiv@divisor+3,f,c
  2340  002542  322A               	rrcf	___aldiv@divisor+2,f,c
  2341  002544  3229               	rrcf	___aldiv@divisor+1,f,c
  2342  002546  3228               	rrcf	___aldiv@divisor,f,c
  2343  002548  2E2C               	decfsz	___aldiv@counter,f,c
  2344  00254A  D7E1               	goto	l2830
  2345  00254C                     l2842:
  2346  00254C  502D               	movf	___aldiv@sign,w,c
  2347  00254E  B4D8               	btfsc	status,2,c
  2348  002550  D008               	goto	l2846
  2349  002552  1E31               	comf	___aldiv@quotient+3,f,c
  2350  002554  1E30               	comf	___aldiv@quotient+2,f,c
  2351  002556  1E2F               	comf	___aldiv@quotient+1,f,c
  2352  002558  6C2E               	negf	___aldiv@quotient,c
  2353  00255A  0E00               	movlw	0
  2354  00255C  222F               	addwfc	___aldiv@quotient+1,f,c
  2355  00255E  2230               	addwfc	___aldiv@quotient+2,f,c
  2356  002560  2231               	addwfc	___aldiv@quotient+3,f,c
  2357  002562                     l2846:
  2358  002562  C02E  F024         	movff	___aldiv@quotient,?___aldiv
  2359  002566  C02F  F025         	movff	___aldiv@quotient+1,?___aldiv+1
  2360  00256A  C030  F026         	movff	___aldiv@quotient+2,?___aldiv+2
  2361  00256E  C031  F027         	movff	___aldiv@quotient+3,?___aldiv+3
  2362  002572  0012               	return	
  2363  002574                     __end_of___aldiv:
  2364                           	opt stack 0
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           intcon	equ	0xFF2
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           postdec1	equ	0xFE5
  2373                           fsr1l	equ	0xFE1
  2374                           status	equ	0xFD8
  2375                           
  2376 ;; *************** function _computeAngle *****************
  2377 ;; Defined at:
  2378 ;;		line 172 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\MPU-6050.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  mode            1    wreg     unsigned char 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  mode            1    3[BANK1 ] unsigned char 
  2383 ;;  angleSum        3    4[BANK1 ] float 
  2384 ;;  dt              3    0[BANK1 ] float 
  2385 ;;  rawGyroY        2   37[BANK1 ] int 
  2386 ;;  rawAccZ         2   35[BANK1 ] int 
  2387 ;;  rawAccY         2   33[BANK1 ] int 
  2388 ;;  rawAccX         2   31[BANK1 ] int 
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2398 ;;      Params:         0       0       0       0       0       0       0
  2399 ;;      Locals:         0       0      39       0       0       0       0
  2400 ;;      Temps:          0       4       0       0       0       0       0
  2401 ;;      Totals:         0       4      39       0       0       0       0
  2402 ;;Total ram usage:       43 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    7
  2405 ;; This function calls:
  2406 ;;		_DelayMs
  2407 ;;		___awtoft
  2408 ;;		___ftadd
  2409 ;;		___ftdiv
  2410 ;;		___ftmul
  2411 ;;		___ftneg
  2412 ;;		___lltoft
  2413 ;;		_atan
  2414 ;;		_getAccelX
  2415 ;;		_getAccelY
  2416 ;;		_getAccelZ
  2417 ;;		_getGyroY
  2418 ;;		_pow
  2419 ;;		_sqrt
  2420 ;; This function is called by:
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text6
  2426  0006DC                     __ptext6:
  2427                           	opt stack 0
  2428  0006DC                     _computeAngle:
  2429                           	opt stack 23
  2430                           
  2431                           ;incstack = 0
  2432                           ;computeAngle@mode stored from wreg
  2433  0006DC  0101               	movlb	1	; () banked
  2434  0006DE  6F03               	movwf	computeAngle@mode& (0+255),b
  2435                           
  2436                           ;MPU-6050.c: 173: signed int rawAccX, rawAccY, rawAccZ, rawGyroY;
  2437                           ;MPU-6050.c: 174: float angleSum;
  2438                           ;MPU-6050.c: 175: float dt;
  2439                           ;MPU-6050.c: 177: if (mode == 1){
  2440  0006E0  0101               	movlb	1	; () banked
  2441  0006E2  0503               	decf	computeAngle@mode& (0+255),w,b
  2442  0006E4  A4D8               	btfss	status,2,c
  2443  0006E6  D19F               	goto	l4784
  2444                           
  2445                           ; BSR set to: 1
  2446                           ;MPU-6050.c: 178: offsetAngle = 0;
  2447  0006E8  0E00               	movlw	0
  2448  0006EA  0100               	movlb	0	; () banked
  2449  0006EC  6FE3               	movwf	_offsetAngle& (0+255),b
  2450  0006EE  0E00               	movlw	0
  2451  0006F0  0100               	movlb	0	; () banked
  2452  0006F2  6FE4               	movwf	(_offsetAngle+1)& (0+255),b
  2453  0006F4  0E00               	movlw	0
  2454  0006F6  0100               	movlb	0	; () banked
  2455  0006F8  6FE5               	movwf	(_offsetAngle+2)& (0+255),b
  2456                           
  2457                           ;MPU-6050.c: 179: for(i=0; i<100; i++){
  2458  0006FA  0E00               	movlw	0
  2459  0006FC  0100               	movlb	0	; () banked
  2460  0006FE  6FE6               	movwf	_i& (0+255),b
  2461  000700                     l4756:
  2462                           
  2463                           ; BSR set to: 0
  2464  000700  0E63               	movlw	99
  2465  000702  0100               	movlb	0	; () banked
  2466  000704  65E6               	cpfsgt	_i& (0+255),b
  2467  000706  D001               	goto	l4760
  2468  000708  D176               	goto	l4780
  2469  00070A                     l4760:
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;MPU-6050.c: 180: rawAccX = getAccelX();
  2473  00070A  ECA5  F015         	call	_getAccelX	;wreg free
  2474  00070E  C01A  F11F         	movff	?_getAccelX,computeAngle@rawAccX
  2475  000712  C01B  F120         	movff	?_getAccelX+1,computeAngle@rawAccX+1
  2476                           
  2477                           ;MPU-6050.c: 181: rawAccY = getAccelY();
  2478  000716  EC5F  F015         	call	_getAccelY	;wreg free
  2479  00071A  C01A  F121         	movff	?_getAccelY,computeAngle@rawAccY
  2480  00071E  C01B  F122         	movff	?_getAccelY+1,computeAngle@rawAccY+1
  2481                           
  2482                           ;MPU-6050.c: 182: rawAccZ = getAccelZ();
  2483  000722  EC19  F015         	call	_getAccelZ	;wreg free
  2484  000726  C01A  F123         	movff	?_getAccelZ,computeAngle@rawAccZ
  2485  00072A  C01B  F124         	movff	?_getAccelZ+1,computeAngle@rawAccZ+1
  2486                           
  2487                           ;MPU-6050.c: 183: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2488  00072E  C123  F020         	movff	computeAngle@rawAccZ,___awtoft@c
  2489  000732  C124  F021         	movff	computeAngle@rawAccZ+1,___awtoft@c+1
  2490  000736  EC13  F017         	call	___awtoft	;wreg free
  2491  00073A  C020  F107         	movff	?___awtoft,_computeAngle$1189
  2492  00073E  C021  F108         	movff	?___awtoft+1,_computeAngle$1189+1
  2493  000742  C022  F109         	movff	?___awtoft+2,_computeAngle$1189+2
  2494                           
  2495                           ;MPU-6050.c: 183: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2496  000746  C121  F020         	movff	computeAngle@rawAccY,___awtoft@c
  2497  00074A  C122  F021         	movff	computeAngle@rawAccY+1,___awtoft@c+1
  2498  00074E  EC13  F017         	call	___awtoft	;wreg free
  2499  000752  C020  F10A         	movff	?___awtoft,_computeAngle$1190
  2500  000756  C021  F10B         	movff	?___awtoft+1,_computeAngle$1190+1
  2501  00075A  C022  F10C         	movff	?___awtoft+2,_computeAngle$1190+2
  2502                           
  2503                           ;MPU-6050.c: 183: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2504  00075E  0E00               	movlw	0
  2505  000760  0100               	movlb	0	; () banked
  2506  000762  6F90               	movwf	pow@y& (0+255),b
  2507  000764  0E00               	movlw	0
  2508  000766  0100               	movlb	0	; () banked
  2509  000768  6F91               	movwf	(pow@y+1)& (0+255),b
  2510  00076A  0E40               	movlw	64
  2511  00076C  0100               	movlb	0	; () banked
  2512  00076E  6F92               	movwf	(pow@y+2)& (0+255),b
  2513  000770  C107  F08D         	movff	_computeAngle$1189,pow@x
  2514  000774  C108  F08E         	movff	_computeAngle$1189+1,pow@x+1
  2515  000778  C109  F08F         	movff	_computeAngle$1189+2,pow@x+2
  2516  00077C  EC0E  F00D         	call	_pow	;wreg free
  2517  000780  C08D  F10D         	movff	?_pow,_computeAngle$1191
  2518  000784  C08E  F10E         	movff	?_pow+1,_computeAngle$1191+1
  2519  000788  C08F  F10F         	movff	?_pow+2,_computeAngle$1191+2
  2520                           
  2521                           ;MPU-6050.c: 183: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2522  00078C  0E00               	movlw	0
  2523  00078E  0100               	movlb	0	; () banked
  2524  000790  6F90               	movwf	pow@y& (0+255),b
  2525  000792  0E00               	movlw	0
  2526  000794  0100               	movlb	0	; () banked
  2527  000796  6F91               	movwf	(pow@y+1)& (0+255),b
  2528  000798  0E40               	movlw	64
  2529  00079A  0100               	movlb	0	; () banked
  2530  00079C  6F92               	movwf	(pow@y+2)& (0+255),b
  2531  00079E  C10A  F08D         	movff	_computeAngle$1190,pow@x
  2532  0007A2  C10B  F08E         	movff	_computeAngle$1190+1,pow@x+1
  2533  0007A6  C10C  F08F         	movff	_computeAngle$1190+2,pow@x+2
  2534  0007AA  EC0E  F00D         	call	_pow	;wreg free
  2535  0007AE  C08D  F110         	movff	?_pow,_computeAngle$1192
  2536  0007B2  C08E  F111         	movff	?_pow+1,_computeAngle$1192+1
  2537  0007B6  C08F  F112         	movff	?_pow+2,_computeAngle$1192+2
  2538                           
  2539                           ;MPU-6050.c: 183: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2540  0007BA  C10D  F027         	movff	_computeAngle$1191,___ftadd@f2
  2541  0007BE  C10E  F028         	movff	_computeAngle$1191+1,___ftadd@f2+1
  2542  0007C2  C10F  F029         	movff	_computeAngle$1191+2,___ftadd@f2+2
  2543  0007C6  C110  F024         	movff	_computeAngle$1192,___ftadd@f1
  2544  0007CA  C111  F025         	movff	_computeAngle$1192+1,___ftadd@f1+1
  2545  0007CE  C112  F026         	movff	_computeAngle$1192+2,___ftadd@f1+2
  2546  0007D2  EC38  F00C         	call	___ftadd	;wreg free
  2547  0007D6  C024  F113         	movff	?___ftadd,_computeAngle$1193
  2548  0007DA  C025  F114         	movff	?___ftadd+1,_computeAngle$1193+1
  2549  0007DE  C026  F115         	movff	?___ftadd+2,_computeAngle$1193+2
  2550                           
  2551                           ;MPU-6050.c: 183: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2552  0007E2  C113  F09E         	movff	_computeAngle$1193,sqrt@a
  2553  0007E6  C114  F09F         	movff	_computeAngle$1193+1,sqrt@a+1
  2554  0007EA  C115  F0A0         	movff	_computeAngle$1193+2,sqrt@a+2
  2555  0007EE  EC5A  F00B         	call	_sqrt	;wreg free
  2556  0007F2  C09E  F078         	movff	?_sqrt,___ftdiv@f2
  2557  0007F6  C09F  F079         	movff	?_sqrt+1,___ftdiv@f2+1
  2558  0007FA  C0A0  F07A         	movff	?_sqrt+2,___ftdiv@f2+2
  2559  0007FE  C11F  F020         	movff	computeAngle@rawAccX,___awtoft@c
  2560  000802  C120  F021         	movff	computeAngle@rawAccX+1,___awtoft@c+1
  2561  000806  EC13  F017         	call	___awtoft	;wreg free
  2562  00080A  C020  F075         	movff	?___awtoft,___ftdiv@f1
  2563  00080E  C021  F076         	movff	?___awtoft+1,___ftdiv@f1+1
  2564  000812  C022  F077         	movff	?___awtoft+2,___ftdiv@f1+2
  2565  000816  EC8C  F00E         	call	___ftdiv	;wreg free
  2566  00081A  C075  F116         	movff	?___ftdiv,_computeAngle$1194
  2567  00081E  C076  F117         	movff	?___ftdiv+1,_computeAngle$1194+1
  2568  000822  C077  F118         	movff	?___ftdiv+2,_computeAngle$1194+2
  2569                           
  2570                           ;MPU-6050.c: 183: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2571  000826  C116  F0B1         	movff	_computeAngle$1194,atan@f
  2572  00082A  C117  F0B2         	movff	_computeAngle$1194+1,atan@f+1
  2573  00082E  C118  F0B3         	movff	_computeAngle$1194+2,atan@f+2
  2574  000832  EC64  F00A         	call	_atan	;wreg free
  2575  000836  C0B1  F119         	movff	?_atan,_computeAngle$1195
  2576  00083A  C0B2  F11A         	movff	?_atan+1,_computeAngle$1195+1
  2577  00083E  C0B3  F11B         	movff	?_atan+2,_computeAngle$1195+2
  2578                           
  2579                           ;MPU-6050.c: 183: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2580  000842  C119  F060         	movff	_computeAngle$1195,___ftmul@f1
  2581  000846  C11A  F061         	movff	_computeAngle$1195+1,___ftmul@f1+1
  2582  00084A  C11B  F062         	movff	_computeAngle$1195+2,___ftmul@f1+2
  2583  00084E  0E77               	movlw	low _RADtoDEG
  2584  000850  6EF6               	movwf	tblptrl,c
  2585  000852                     	if	1	;There is more than 1 active tblptr byte
  2586  000852  0E06               	movlw	high _RADtoDEG
  2587  000854  6EF7               	movwf	tblptrh,c
  2588  000856                     	endif
  2589  000856                     	if	0	;There are less than 3 active tblptr bytes
  2590  000856                     	endif
  2591  000856  0009               	tblrd		*+
  2592  000858  CFF5 F063          	movff	tablat,___ftmul@f2
  2593  00085C  0009               	tblrd		*+
  2594  00085E  CFF5 F064          	movff	tablat,___ftmul@f2+1
  2595  000862  000A               	tblrd		*-
  2596  000864  CFF5 F065          	movff	tablat,___ftmul@f2+2
  2597  000868  ECE3  F00D         	call	___ftmul	;wreg free
  2598  00086C  C060  F0DA         	movff	?___ftmul,_accX
  2599  000870  C061  F0DB         	movff	?___ftmul+1,_accX+1
  2600  000874  C062  F0DC         	movff	?___ftmul+2,_accX+2
  2601                           
  2602                           ;MPU-6050.c: 184: if (i==0){
  2603  000878  0100               	movlb	0	; () banked
  2604  00087A  51E6               	movf	_i& (0+255),w,b
  2605  00087C  A4D8               	btfss	status,2,c
  2606  00087E  D013               	goto	l4774
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;MPU-6050.c: 185: gyroY = accX;
  2610  000880  C0DA  F036         	movff	_accX,_gyroY
  2611  000884  C0DB  F037         	movff	_accX+1,_gyroY+1
  2612  000888  C0DC  F038         	movff	_accX+2,_gyroY+2
  2613                           
  2614                           ;MPU-6050.c: 186: offsetAngle = accX;
  2615  00088C  C0DA  F0E3         	movff	_accX,_offsetAngle
  2616  000890  C0DB  F0E4         	movff	_accX+1,_offsetAngle+1
  2617  000894  C0DC  F0E5         	movff	_accX+2,_offsetAngle+2
  2618                           
  2619                           ;MPU-6050.c: 187: angleSum = (float) accX;
  2620  000898  C0DA  F104         	movff	_accX,computeAngle@angleSum
  2621  00089C  C0DB  F105         	movff	_accX+1,computeAngle@angleSum+1
  2622  0008A0  C0DC  F106         	movff	_accX+2,computeAngle@angleSum+2
  2623                           
  2624                           ;MPU-6050.c: 188: }
  2625  0008A4  D0A2               	goto	l325
  2626  0008A6                     l4774:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;MPU-6050.c: 189: else{
  2630                           ;MPU-6050.c: 190: rawGyroY = getGyroY();
  2631  0008A6  ECD3  F014         	call	_getGyroY	;wreg free
  2632  0008AA  C01A  F125         	movff	?_getGyroY,computeAngle@rawGyroY
  2633  0008AE  C01B  F126         	movff	?_getGyroY+1,computeAngle@rawGyroY+1
  2634                           
  2635                           ;MPU-6050.c: 191: gyroY = offsetAngle + (rawGyroY * 0.001 / 131.0);
  2636  0008B2  0E00               	movlw	0
  2637  0008B4  0100               	movlb	0	; () banked
  2638  0008B6  6F78               	movwf	___ftdiv@f2& (0+255),b
  2639  0008B8  0E03               	movlw	3
  2640  0008BA  0100               	movlb	0	; () banked
  2641  0008BC  6F79               	movwf	(___ftdiv@f2+1)& (0+255),b
  2642  0008BE  0E43               	movlw	67
  2643  0008C0  0100               	movlb	0	; () banked
  2644  0008C2  6F7A               	movwf	(___ftdiv@f2+2)& (0+255),b
  2645  0008C4  0E12               	movlw	18
  2646  0008C6  0100               	movlb	0	; () banked
  2647  0008C8  6F63               	movwf	___ftmul@f2& (0+255),b
  2648  0008CA  0E83               	movlw	131
  2649  0008CC  0100               	movlb	0	; () banked
  2650  0008CE  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  2651  0008D0  0E3A               	movlw	58
  2652  0008D2  0100               	movlb	0	; () banked
  2653  0008D4  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  2654  0008D6  C125  F020         	movff	computeAngle@rawGyroY,___awtoft@c
  2655  0008DA  C126  F021         	movff	computeAngle@rawGyroY+1,___awtoft@c+1
  2656  0008DE  EC13  F017         	call	___awtoft	;wreg free
  2657  0008E2  C020  F060         	movff	?___awtoft,___ftmul@f1
  2658  0008E6  C021  F061         	movff	?___awtoft+1,___ftmul@f1+1
  2659  0008EA  C022  F062         	movff	?___awtoft+2,___ftmul@f1+2
  2660  0008EE  ECE3  F00D         	call	___ftmul	;wreg free
  2661  0008F2  C060  F075         	movff	?___ftmul,___ftdiv@f1
  2662  0008F6  C061  F076         	movff	?___ftmul+1,___ftdiv@f1+1
  2663  0008FA  C062  F077         	movff	?___ftmul+2,___ftdiv@f1+2
  2664  0008FE  EC8C  F00E         	call	___ftdiv	;wreg free
  2665  000902  C075  F024         	movff	?___ftdiv,___ftadd@f1
  2666  000906  C076  F025         	movff	?___ftdiv+1,___ftadd@f1+1
  2667  00090A  C077  F026         	movff	?___ftdiv+2,___ftadd@f1+2
  2668  00090E  C0E3  F027         	movff	_offsetAngle,___ftadd@f2
  2669  000912  C0E4  F028         	movff	_offsetAngle+1,___ftadd@f2+1
  2670  000916  C0E5  F029         	movff	_offsetAngle+2,___ftadd@f2+2
  2671  00091A  EC38  F00C         	call	___ftadd	;wreg free
  2672  00091E  C024  F036         	movff	?___ftadd,_gyroY
  2673  000922  C025  F037         	movff	?___ftadd+1,_gyroY+1
  2674  000926  C026  F038         	movff	?___ftadd+2,_gyroY+2
  2675                           
  2676                           ;MPU-6050.c: 192: offsetAngle = (float) alpha * gyroY + (1-alpha) * accX;
  2677  00092A  C0DA  F063         	movff	_accX,___ftmul@f2
  2678  00092E  C0DB  F064         	movff	_accX+1,___ftmul@f2+1
  2679  000932  C0DC  F065         	movff	_accX+2,___ftmul@f2+2
  2680  000936  0E00               	movlw	0
  2681  000938  6E27               	movwf	___ftadd@f2,c
  2682  00093A  0E80               	movlw	128
  2683  00093C  6E28               	movwf	___ftadd@f2+1,c
  2684  00093E  0E3F               	movlw	63
  2685  000940  6E29               	movwf	___ftadd@f2+2,c
  2686  000942  C0EA  F020         	movff	_alpha,___ftneg@f1
  2687  000946  C0EB  F021         	movff	_alpha+1,___ftneg@f1+1
  2688  00094A  C0EC  F022         	movff	_alpha+2,___ftneg@f1+2
  2689  00094E  EC84  F017         	call	___ftneg	;wreg free
  2690  000952  C020  F024         	movff	?___ftneg,___ftadd@f1
  2691  000956  C021  F025         	movff	?___ftneg+1,___ftadd@f1+1
  2692  00095A  C022  F026         	movff	?___ftneg+2,___ftadd@f1+2
  2693  00095E  EC38  F00C         	call	___ftadd	;wreg free
  2694  000962  C024  F060         	movff	?___ftadd,___ftmul@f1
  2695  000966  C025  F061         	movff	?___ftadd+1,___ftmul@f1+1
  2696  00096A  C026  F062         	movff	?___ftadd+2,___ftmul@f1+2
  2697  00096E  ECE3  F00D         	call	___ftmul	;wreg free
  2698  000972  C060  F11C         	movff	?___ftmul,_computeAngle$1196
  2699  000976  C061  F11D         	movff	?___ftmul+1,_computeAngle$1196+1
  2700  00097A  C062  F11E         	movff	?___ftmul+2,_computeAngle$1196+2
  2701                           
  2702                           ;MPU-6050.c: 192: offsetAngle = (float) alpha * gyroY + (1-alpha) * accX;
  2703  00097E  C036  F063         	movff	_gyroY,___ftmul@f2
  2704  000982  C037  F064         	movff	_gyroY+1,___ftmul@f2+1
  2705  000986  C038  F065         	movff	_gyroY+2,___ftmul@f2+2
  2706  00098A  C0EA  F060         	movff	_alpha,___ftmul@f1
  2707  00098E  C0EB  F061         	movff	_alpha+1,___ftmul@f1+1
  2708  000992  C0EC  F062         	movff	_alpha+2,___ftmul@f1+2
  2709  000996  ECE3  F00D         	call	___ftmul	;wreg free
  2710  00099A  C060  F024         	movff	?___ftmul,___ftadd@f1
  2711  00099E  C061  F025         	movff	?___ftmul+1,___ftadd@f1+1
  2712  0009A2  C062  F026         	movff	?___ftmul+2,___ftadd@f1+2
  2713  0009A6  C11C  F027         	movff	_computeAngle$1196,___ftadd@f2
  2714  0009AA  C11D  F028         	movff	_computeAngle$1196+1,___ftadd@f2+1
  2715  0009AE  C11E  F029         	movff	_computeAngle$1196+2,___ftadd@f2+2
  2716  0009B2  EC38  F00C         	call	___ftadd	;wreg free
  2717  0009B6  C024  F0E3         	movff	?___ftadd,_offsetAngle
  2718  0009BA  C025  F0E4         	movff	?___ftadd+1,_offsetAngle+1
  2719  0009BE  C026  F0E5         	movff	?___ftadd+2,_offsetAngle+2
  2720                           
  2721                           ;MPU-6050.c: 193: angleSum += offsetAngle;
  2722  0009C2  C104  F024         	movff	computeAngle@angleSum,___ftadd@f1
  2723  0009C6  C105  F025         	movff	computeAngle@angleSum+1,___ftadd@f1+1
  2724  0009CA  C106  F026         	movff	computeAngle@angleSum+2,___ftadd@f1+2
  2725  0009CE  C0E3  F027         	movff	_offsetAngle,___ftadd@f2
  2726  0009D2  C0E4  F028         	movff	_offsetAngle+1,___ftadd@f2+1
  2727  0009D6  C0E5  F029         	movff	_offsetAngle+2,___ftadd@f2+2
  2728  0009DA  EC38  F00C         	call	___ftadd	;wreg free
  2729  0009DE  C024  F104         	movff	?___ftadd,computeAngle@angleSum
  2730  0009E2  C025  F105         	movff	?___ftadd+1,computeAngle@angleSum+1
  2731  0009E6  C026  F106         	movff	?___ftadd+2,computeAngle@angleSum+2
  2732  0009EA                     l325:
  2733                           
  2734                           ;MPU-6050.c: 194: }
  2735                           ;MPU-6050.c: 195: DelayMs(1);
  2736  0009EA  0E01               	movlw	1
  2737  0009EC  EC5C  F017         	call	_DelayMs
  2738  0009F0  0100               	movlb	0	; () banked
  2739  0009F2  2BE6               	incf	_i& (0+255),f,b
  2740  0009F4  D685               	goto	l4756
  2741  0009F6                     l4780:
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;MPU-6050.c: 196: }
  2745                           ;MPU-6050.c: 197: offsetAngle = angleSum / 100;
  2746  0009F6  C104  F075         	movff	computeAngle@angleSum,___ftdiv@f1
  2747  0009FA  C105  F076         	movff	computeAngle@angleSum+1,___ftdiv@f1+1
  2748  0009FE  C106  F077         	movff	computeAngle@angleSum+2,___ftdiv@f1+2
  2749  000A02  0E00               	movlw	0
  2750  000A04  0100               	movlb	0	; () banked
  2751  000A06  6F78               	movwf	___ftdiv@f2& (0+255),b
  2752  000A08  0EC8               	movlw	200
  2753  000A0A  0100               	movlb	0	; () banked
  2754  000A0C  6F79               	movwf	(___ftdiv@f2+1)& (0+255),b
  2755  000A0E  0E42               	movlw	66
  2756  000A10  0100               	movlb	0	; () banked
  2757  000A12  6F7A               	movwf	(___ftdiv@f2+2)& (0+255),b
  2758  000A14  EC8C  F00E         	call	___ftdiv	;wreg free
  2759  000A18  C075  F0E3         	movff	?___ftdiv,_offsetAngle
  2760  000A1C  C076  F0E4         	movff	?___ftdiv+1,_offsetAngle+1
  2761  000A20  C077  F0E5         	movff	?___ftdiv+2,_offsetAngle+2
  2762                           
  2763                           ;MPU-6050.c: 198: return;
  2764  000A24  0012               	return	
  2765  000A26                     l4784:
  2766                           
  2767                           ;MPU-6050.c: 199: }
  2768                           ;MPU-6050.c: 201: rawGyroY = getGyroY();
  2769  000A26  ECD3  F014         	call	_getGyroY	;wreg free
  2770  000A2A  C01A  F125         	movff	?_getGyroY,computeAngle@rawGyroY
  2771  000A2E  C01B  F126         	movff	?_getGyroY+1,computeAngle@rawGyroY+1
  2772                           
  2773                           ;MPU-6050.c: 203: rawAccX = getAccelX();
  2774  000A32  ECA5  F015         	call	_getAccelX	;wreg free
  2775  000A36  C01A  F11F         	movff	?_getAccelX,computeAngle@rawAccX
  2776  000A3A  C01B  F120         	movff	?_getAccelX+1,computeAngle@rawAccX+1
  2777                           
  2778                           ;MPU-6050.c: 204: rawAccY = getAccelY();
  2779  000A3E  EC5F  F015         	call	_getAccelY	;wreg free
  2780  000A42  C01A  F121         	movff	?_getAccelY,computeAngle@rawAccY
  2781  000A46  C01B  F122         	movff	?_getAccelY+1,computeAngle@rawAccY+1
  2782                           
  2783                           ;MPU-6050.c: 205: rawAccZ = getAccelZ();
  2784  000A4A  EC19  F015         	call	_getAccelZ	;wreg free
  2785  000A4E  C01A  F123         	movff	?_getAccelZ,computeAngle@rawAccZ
  2786  000A52  C01B  F124         	movff	?_getAccelZ+1,computeAngle@rawAccZ+1
  2787                           
  2788                           ;MPU-6050.c: 207: dt = (float) (millis - sensMillis)/1000.0;
  2789  000A56  C143  F0C1         	movff	_sensMillis,??_computeAngle
  2790  000A5A  C144  F0C2         	movff	_sensMillis+1,??_computeAngle+1
  2791  000A5E  C145  F0C3         	movff	_sensMillis+2,??_computeAngle+2
  2792  000A62  C146  F0C4         	movff	_sensMillis+3,??_computeAngle+3
  2793  000A66  0100               	movlb	0	; () banked
  2794  000A68  1FC1               	comf	??_computeAngle& (0+255),f,b
  2795  000A6A  1FC2               	comf	(??_computeAngle+1)& (0+255),f,b
  2796  000A6C  1FC3               	comf	(??_computeAngle+2)& (0+255),f,b
  2797  000A6E  1FC4               	comf	(??_computeAngle+3)& (0+255),f,b
  2798  000A70  2BC1               	incf	??_computeAngle& (0+255),f,b
  2799  000A72  0E00               	movlw	0
  2800  000A74  23C2               	addwfc	(??_computeAngle+1)& (0+255),f,b
  2801  000A76  23C3               	addwfc	(??_computeAngle+2)& (0+255),f,b
  2802  000A78  23C4               	addwfc	(??_computeAngle+3)& (0+255),f,b
  2803  000A7A  0100               	movlb	0	; () banked
  2804  000A7C  51D3               	movf	_millis& (0+255),w,b
  2805  000A7E  0100               	movlb	0	; () banked
  2806  000A80  25C1               	addwf	??_computeAngle& (0+255),w,b
  2807  000A82  6E20               	movwf	___lltoft@c,c
  2808  000A84  0100               	movlb	0	; () banked
  2809  000A86  51D4               	movf	(_millis+1)& (0+255),w,b
  2810  000A88  0100               	movlb	0	; () banked
  2811  000A8A  21C2               	addwfc	(??_computeAngle+1)& (0+255),w,b
  2812  000A8C  6E21               	movwf	___lltoft@c+1,c
  2813  000A8E  0100               	movlb	0	; () banked
  2814  000A90  51D5               	movf	(_millis+2)& (0+255),w,b
  2815  000A92  0100               	movlb	0	; () banked
  2816  000A94  21C3               	addwfc	(??_computeAngle+2)& (0+255),w,b
  2817  000A96  6E22               	movwf	___lltoft@c+2,c
  2818  000A98  0100               	movlb	0	; () banked
  2819  000A9A  51D6               	movf	(_millis+3)& (0+255),w,b
  2820  000A9C  0100               	movlb	0	; () banked
  2821  000A9E  21C4               	addwfc	(??_computeAngle+3)& (0+255),w,b
  2822  000AA0  6E23               	movwf	___lltoft@c+3,c
  2823  000AA2  EC94  F016         	call	___lltoft	;wreg free
  2824  000AA6  C020  F075         	movff	?___lltoft,___ftdiv@f1
  2825  000AAA  C021  F076         	movff	?___lltoft+1,___ftdiv@f1+1
  2826  000AAE  C022  F077         	movff	?___lltoft+2,___ftdiv@f1+2
  2827  000AB2  0E00               	movlw	0
  2828  000AB4  0100               	movlb	0	; () banked
  2829  000AB6  6F78               	movwf	___ftdiv@f2& (0+255),b
  2830  000AB8  0E7A               	movlw	122
  2831  000ABA  0100               	movlb	0	; () banked
  2832  000ABC  6F79               	movwf	(___ftdiv@f2+1)& (0+255),b
  2833  000ABE  0E44               	movlw	68
  2834  000AC0  0100               	movlb	0	; () banked
  2835  000AC2  6F7A               	movwf	(___ftdiv@f2+2)& (0+255),b
  2836  000AC4  EC8C  F00E         	call	___ftdiv	;wreg free
  2837  000AC8  C075  F100         	movff	?___ftdiv,computeAngle@dt
  2838  000ACC  C076  F101         	movff	?___ftdiv+1,computeAngle@dt+1
  2839  000AD0  C077  F102         	movff	?___ftdiv+2,computeAngle@dt+2
  2840                           
  2841                           ;MPU-6050.c: 208: sensMillis = millis;
  2842  000AD4  C0D3  F143         	movff	_millis,_sensMillis
  2843  000AD8  C0D4  F144         	movff	_millis+1,_sensMillis+1
  2844  000ADC  C0D5  F145         	movff	_millis+2,_sensMillis+2
  2845  000AE0  C0D6  F146         	movff	_millis+3,_sensMillis+3
  2846                           
  2847                           ;MPU-6050.c: 209: gyroY = (float) currentAngle + (rawGyroY * dt /131.0);
  2848  000AE4  0E00               	movlw	0
  2849  000AE6  0100               	movlb	0	; () banked
  2850  000AE8  6F78               	movwf	___ftdiv@f2& (0+255),b
  2851  000AEA  0E03               	movlw	3
  2852  000AEC  0100               	movlb	0	; () banked
  2853  000AEE  6F79               	movwf	(___ftdiv@f2+1)& (0+255),b
  2854  000AF0  0E43               	movlw	67
  2855  000AF2  0100               	movlb	0	; () banked
  2856  000AF4  6F7A               	movwf	(___ftdiv@f2+2)& (0+255),b
  2857  000AF6  C100  F063         	movff	computeAngle@dt,___ftmul@f2
  2858  000AFA  C101  F064         	movff	computeAngle@dt+1,___ftmul@f2+1
  2859  000AFE  C102  F065         	movff	computeAngle@dt+2,___ftmul@f2+2
  2860  000B02  C125  F020         	movff	computeAngle@rawGyroY,___awtoft@c
  2861  000B06  C126  F021         	movff	computeAngle@rawGyroY+1,___awtoft@c+1
  2862  000B0A  EC13  F017         	call	___awtoft	;wreg free
  2863  000B0E  C020  F060         	movff	?___awtoft,___ftmul@f1
  2864  000B12  C021  F061         	movff	?___awtoft+1,___ftmul@f1+1
  2865  000B16  C022  F062         	movff	?___awtoft+2,___ftmul@f1+2
  2866  000B1A  ECE3  F00D         	call	___ftmul	;wreg free
  2867  000B1E  C060  F075         	movff	?___ftmul,___ftdiv@f1
  2868  000B22  C061  F076         	movff	?___ftmul+1,___ftdiv@f1+1
  2869  000B26  C062  F077         	movff	?___ftmul+2,___ftdiv@f1+2
  2870  000B2A  EC8C  F00E         	call	___ftdiv	;wreg free
  2871  000B2E  C075  F024         	movff	?___ftdiv,___ftadd@f1
  2872  000B32  C076  F025         	movff	?___ftdiv+1,___ftadd@f1+1
  2873  000B36  C077  F026         	movff	?___ftdiv+2,___ftadd@f1+2
  2874  000B3A  C0DD  F027         	movff	_currentAngle,___ftadd@f2
  2875  000B3E  C0DE  F028         	movff	_currentAngle+1,___ftadd@f2+1
  2876  000B42  C0DF  F029         	movff	_currentAngle+2,___ftadd@f2+2
  2877  000B46  EC38  F00C         	call	___ftadd	;wreg free
  2878  000B4A  C024  F036         	movff	?___ftadd,_gyroY
  2879  000B4E  C025  F037         	movff	?___ftadd+1,_gyroY+1
  2880  000B52  C026  F038         	movff	?___ftadd+2,_gyroY+2
  2881                           
  2882                           ;MPU-6050.c: 211: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2883  000B56  C123  F020         	movff	computeAngle@rawAccZ,___awtoft@c
  2884  000B5A  C124  F021         	movff	computeAngle@rawAccZ+1,___awtoft@c+1
  2885  000B5E  EC13  F017         	call	___awtoft	;wreg free
  2886  000B62  C020  F107         	movff	?___awtoft,_computeAngle$1189
  2887  000B66  C021  F108         	movff	?___awtoft+1,_computeAngle$1189+1
  2888  000B6A  C022  F109         	movff	?___awtoft+2,_computeAngle$1189+2
  2889                           
  2890                           ;MPU-6050.c: 211: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2891  000B6E  C121  F020         	movff	computeAngle@rawAccY,___awtoft@c
  2892  000B72  C122  F021         	movff	computeAngle@rawAccY+1,___awtoft@c+1
  2893  000B76  EC13  F017         	call	___awtoft	;wreg free
  2894  000B7A  C020  F10A         	movff	?___awtoft,_computeAngle$1190
  2895  000B7E  C021  F10B         	movff	?___awtoft+1,_computeAngle$1190+1
  2896  000B82  C022  F10C         	movff	?___awtoft+2,_computeAngle$1190+2
  2897                           
  2898                           ;MPU-6050.c: 211: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2899  000B86  0E00               	movlw	0
  2900  000B88  0100               	movlb	0	; () banked
  2901  000B8A  6F90               	movwf	pow@y& (0+255),b
  2902  000B8C  0E00               	movlw	0
  2903  000B8E  0100               	movlb	0	; () banked
  2904  000B90  6F91               	movwf	(pow@y+1)& (0+255),b
  2905  000B92  0E40               	movlw	64
  2906  000B94  0100               	movlb	0	; () banked
  2907  000B96  6F92               	movwf	(pow@y+2)& (0+255),b
  2908  000B98  C107  F08D         	movff	_computeAngle$1189,pow@x
  2909  000B9C  C108  F08E         	movff	_computeAngle$1189+1,pow@x+1
  2910  000BA0  C109  F08F         	movff	_computeAngle$1189+2,pow@x+2
  2911  000BA4  EC0E  F00D         	call	_pow	;wreg free
  2912  000BA8  C08D  F10D         	movff	?_pow,_computeAngle$1191
  2913  000BAC  C08E  F10E         	movff	?_pow+1,_computeAngle$1191+1
  2914  000BB0  C08F  F10F         	movff	?_pow+2,_computeAngle$1191+2
  2915                           
  2916                           ;MPU-6050.c: 211: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2917  000BB4  0E00               	movlw	0
  2918  000BB6  0100               	movlb	0	; () banked
  2919  000BB8  6F90               	movwf	pow@y& (0+255),b
  2920  000BBA  0E00               	movlw	0
  2921  000BBC  0100               	movlb	0	; () banked
  2922  000BBE  6F91               	movwf	(pow@y+1)& (0+255),b
  2923  000BC0  0E40               	movlw	64
  2924  000BC2  0100               	movlb	0	; () banked
  2925  000BC4  6F92               	movwf	(pow@y+2)& (0+255),b
  2926  000BC6  C10A  F08D         	movff	_computeAngle$1190,pow@x
  2927  000BCA  C10B  F08E         	movff	_computeAngle$1190+1,pow@x+1
  2928  000BCE  C10C  F08F         	movff	_computeAngle$1190+2,pow@x+2
  2929  000BD2  EC0E  F00D         	call	_pow	;wreg free
  2930  000BD6  C08D  F110         	movff	?_pow,_computeAngle$1192
  2931  000BDA  C08E  F111         	movff	?_pow+1,_computeAngle$1192+1
  2932  000BDE  C08F  F112         	movff	?_pow+2,_computeAngle$1192+2
  2933                           
  2934                           ;MPU-6050.c: 211: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2935  000BE2  C10D  F027         	movff	_computeAngle$1191,___ftadd@f2
  2936  000BE6  C10E  F028         	movff	_computeAngle$1191+1,___ftadd@f2+1
  2937  000BEA  C10F  F029         	movff	_computeAngle$1191+2,___ftadd@f2+2
  2938  000BEE  C110  F024         	movff	_computeAngle$1192,___ftadd@f1
  2939  000BF2  C111  F025         	movff	_computeAngle$1192+1,___ftadd@f1+1
  2940  000BF6  C112  F026         	movff	_computeAngle$1192+2,___ftadd@f1+2
  2941  000BFA  EC38  F00C         	call	___ftadd	;wreg free
  2942  000BFE  C024  F113         	movff	?___ftadd,_computeAngle$1193
  2943  000C02  C025  F114         	movff	?___ftadd+1,_computeAngle$1193+1
  2944  000C06  C026  F115         	movff	?___ftadd+2,_computeAngle$1193+2
  2945                           
  2946                           ;MPU-6050.c: 211: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2947  000C0A  C113  F09E         	movff	_computeAngle$1193,sqrt@a
  2948  000C0E  C114  F09F         	movff	_computeAngle$1193+1,sqrt@a+1
  2949  000C12  C115  F0A0         	movff	_computeAngle$1193+2,sqrt@a+2
  2950  000C16  EC5A  F00B         	call	_sqrt	;wreg free
  2951  000C1A  C09E  F078         	movff	?_sqrt,___ftdiv@f2
  2952  000C1E  C09F  F079         	movff	?_sqrt+1,___ftdiv@f2+1
  2953  000C22  C0A0  F07A         	movff	?_sqrt+2,___ftdiv@f2+2
  2954  000C26  C11F  F020         	movff	computeAngle@rawAccX,___awtoft@c
  2955  000C2A  C120  F021         	movff	computeAngle@rawAccX+1,___awtoft@c+1
  2956  000C2E  EC13  F017         	call	___awtoft	;wreg free
  2957  000C32  C020  F075         	movff	?___awtoft,___ftdiv@f1
  2958  000C36  C021  F076         	movff	?___awtoft+1,___ftdiv@f1+1
  2959  000C3A  C022  F077         	movff	?___awtoft+2,___ftdiv@f1+2
  2960  000C3E  EC8C  F00E         	call	___ftdiv	;wreg free
  2961  000C42  C075  F116         	movff	?___ftdiv,_computeAngle$1194
  2962  000C46  C076  F117         	movff	?___ftdiv+1,_computeAngle$1194+1
  2963  000C4A  C077  F118         	movff	?___ftdiv+2,_computeAngle$1194+2
  2964                           
  2965                           ;MPU-6050.c: 211: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2966  000C4E  C116  F0B1         	movff	_computeAngle$1194,atan@f
  2967  000C52  C117  F0B2         	movff	_computeAngle$1194+1,atan@f+1
  2968  000C56  C118  F0B3         	movff	_computeAngle$1194+2,atan@f+2
  2969  000C5A  EC64  F00A         	call	_atan	;wreg free
  2970  000C5E  C0B1  F119         	movff	?_atan,_computeAngle$1195
  2971  000C62  C0B2  F11A         	movff	?_atan+1,_computeAngle$1195+1
  2972  000C66  C0B3  F11B         	movff	?_atan+2,_computeAngle$1195+2
  2973                           
  2974                           ;MPU-6050.c: 211: accX = (float) RADtoDEG * atan(rawAccX / sqrt(pow(rawAccY,2) + pow(raw
      +                          AccZ,2)));
  2975  000C6A  C119  F060         	movff	_computeAngle$1195,___ftmul@f1
  2976  000C6E  C11A  F061         	movff	_computeAngle$1195+1,___ftmul@f1+1
  2977  000C72  C11B  F062         	movff	_computeAngle$1195+2,___ftmul@f1+2
  2978  000C76  0E77               	movlw	low _RADtoDEG
  2979  000C78  6EF6               	movwf	tblptrl,c
  2980  000C7A                     	if	1	;There is more than 1 active tblptr byte
  2981  000C7A  0E06               	movlw	high _RADtoDEG
  2982  000C7C  6EF7               	movwf	tblptrh,c
  2983  000C7E                     	endif
  2984  000C7E                     	if	0	;There are less than 3 active tblptr bytes
  2985  000C7E                     	endif
  2986  000C7E  0009               	tblrd		*+
  2987  000C80  CFF5 F063          	movff	tablat,___ftmul@f2
  2988  000C84  0009               	tblrd		*+
  2989  000C86  CFF5 F064          	movff	tablat,___ftmul@f2+1
  2990  000C8A  000A               	tblrd		*-
  2991  000C8C  CFF5 F065          	movff	tablat,___ftmul@f2+2
  2992  000C90  ECE3  F00D         	call	___ftmul	;wreg free
  2993  000C94  C060  F0DA         	movff	?___ftmul,_accX
  2994  000C98  C061  F0DB         	movff	?___ftmul+1,_accX+1
  2995  000C9C  C062  F0DC         	movff	?___ftmul+2,_accX+2
  2996                           
  2997                           ;MPU-6050.c: 212: currentAngle = (float) alpha * gyroY + (1-alpha) * accX;
  2998  000CA0  C0DA  F063         	movff	_accX,___ftmul@f2
  2999  000CA4  C0DB  F064         	movff	_accX+1,___ftmul@f2+1
  3000  000CA8  C0DC  F065         	movff	_accX+2,___ftmul@f2+2
  3001  000CAC  0E00               	movlw	0
  3002  000CAE  6E27               	movwf	___ftadd@f2,c
  3003  000CB0  0E80               	movlw	128
  3004  000CB2  6E28               	movwf	___ftadd@f2+1,c
  3005  000CB4  0E3F               	movlw	63
  3006  000CB6  6E29               	movwf	___ftadd@f2+2,c
  3007  000CB8  C0EA  F020         	movff	_alpha,___ftneg@f1
  3008  000CBC  C0EB  F021         	movff	_alpha+1,___ftneg@f1+1
  3009  000CC0  C0EC  F022         	movff	_alpha+2,___ftneg@f1+2
  3010  000CC4  EC84  F017         	call	___ftneg	;wreg free
  3011  000CC8  C020  F024         	movff	?___ftneg,___ftadd@f1
  3012  000CCC  C021  F025         	movff	?___ftneg+1,___ftadd@f1+1
  3013  000CD0  C022  F026         	movff	?___ftneg+2,___ftadd@f1+2
  3014  000CD4  EC38  F00C         	call	___ftadd	;wreg free
  3015  000CD8  C024  F060         	movff	?___ftadd,___ftmul@f1
  3016  000CDC  C025  F061         	movff	?___ftadd+1,___ftmul@f1+1
  3017  000CE0  C026  F062         	movff	?___ftadd+2,___ftmul@f1+2
  3018  000CE4  ECE3  F00D         	call	___ftmul	;wreg free
  3019  000CE8  C060  F11C         	movff	?___ftmul,_computeAngle$1196
  3020  000CEC  C061  F11D         	movff	?___ftmul+1,_computeAngle$1196+1
  3021  000CF0  C062  F11E         	movff	?___ftmul+2,_computeAngle$1196+2
  3022                           
  3023                           ;MPU-6050.c: 212: currentAngle = (float) alpha * gyroY + (1-alpha) * accX;
  3024  000CF4  C036  F063         	movff	_gyroY,___ftmul@f2
  3025  000CF8  C037  F064         	movff	_gyroY+1,___ftmul@f2+1
  3026  000CFC  C038  F065         	movff	_gyroY+2,___ftmul@f2+2
  3027  000D00  C0EA  F060         	movff	_alpha,___ftmul@f1
  3028  000D04  C0EB  F061         	movff	_alpha+1,___ftmul@f1+1
  3029  000D08  C0EC  F062         	movff	_alpha+2,___ftmul@f1+2
  3030  000D0C  ECE3  F00D         	call	___ftmul	;wreg free
  3031  000D10  C060  F024         	movff	?___ftmul,___ftadd@f1
  3032  000D14  C061  F025         	movff	?___ftmul+1,___ftadd@f1+1
  3033  000D18  C062  F026         	movff	?___ftmul+2,___ftadd@f1+2
  3034  000D1C  C11C  F027         	movff	_computeAngle$1196,___ftadd@f2
  3035  000D20  C11D  F028         	movff	_computeAngle$1196+1,___ftadd@f2+1
  3036  000D24  C11E  F029         	movff	_computeAngle$1196+2,___ftadd@f2+2
  3037  000D28  EC38  F00C         	call	___ftadd	;wreg free
  3038  000D2C  C024  F0DD         	movff	?___ftadd,_currentAngle
  3039  000D30  C025  F0DE         	movff	?___ftadd+1,_currentAngle+1
  3040  000D34  C026  F0DF         	movff	?___ftadd+2,_currentAngle+2
  3041  000D38  0012               	return		;funcret
  3042  000D3A                     __end_of_computeAngle:
  3043                           	opt stack 0
  3044                           tblptru	equ	0xFF8
  3045                           tblptrh	equ	0xFF7
  3046                           tblptrl	equ	0xFF6
  3047                           tablat	equ	0xFF5
  3048                           intcon	equ	0xFF2
  3049                           postinc0	equ	0xFEE
  3050                           wreg	equ	0xFE8
  3051                           postdec1	equ	0xFE5
  3052                           fsr1l	equ	0xFE1
  3053                           status	equ	0xFD8
  3054                           
  3055 ;; *************** function _sqrt *****************
  3056 ;; Defined at:
  3057 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\sprcsqrt.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  a               3   62[BANK0 ] void 
  3060 ;; Auto vars:     Size  Location     Type
  3061 ;;  x               3   78[BANK0 ] void 
  3062 ;;  q               3   75[BANK0 ] void 
  3063 ;;  z               3   71[BANK0 ] void 
  3064 ;;  og              3   68[BANK0 ] void 
  3065 ;;  i               1   74[BANK0 ] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  3   62[BANK0 ] unsigned char 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3075 ;;      Params:         0       3       0       0       0       0       0
  3076 ;;      Locals:         0      13       0       0       0       0       0
  3077 ;;      Temps:          0       3       0       0       0       0       0
  3078 ;;      Totals:         0      19       0       0       0       0       0
  3079 ;;Total ram usage:       19 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    5
  3082 ;; This function calls:
  3083 ;;		___ftge
  3084 ;;		___ftmul
  3085 ;;		___ftsub
  3086 ;; This function is called by:
  3087 ;;		_computeAngle
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           	psect	text7
  3092  0016B4                     __ptext7:
  3093                           	opt stack 0
  3094  0016B4                     _sqrt:
  3095                           	opt stack 24
  3096                           
  3097                           ;incstack = 0
  3098  0016B4  0E00               	movlw	0
  3099  0016B6  0100               	movlb	0	; () banked
  3100  0016B8  6F6C               	movwf	___ftge@ff1& (0+255),b
  3101  0016BA  0E00               	movlw	0
  3102  0016BC  0100               	movlb	0	; () banked
  3103  0016BE  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
  3104  0016C0  0E00               	movlw	0
  3105  0016C2  0100               	movlb	0	; () banked
  3106  0016C4  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
  3107  0016C6  C09E  F06F         	movff	sqrt@a,___ftge@ff2
  3108  0016CA  C09F  F070         	movff	sqrt@a+1,___ftge@ff2+1
  3109  0016CE  C0A0  F071         	movff	sqrt@a+2,___ftge@ff2+2
  3110  0016D2  ECBA  F012         	call	___ftge	;wreg free
  3111  0016D6  0100               	movlb	0	; () banked
  3112  0016D8  A0D8               	btfss	status,0,c
  3113  0016DA  D011               	goto	l1157
  3114                           
  3115                           ; BSR set to: 0
  3116  0016DC  0100               	movlb	0	; () banked
  3117  0016DE  AFA0               	btfss	(sqrt@a+2)& (0+255),7,b
  3118  0016E0  D004               	goto	l1158
  3119                           
  3120                           ; BSR set to: 0
  3121  0016E2  0E00               	movlw	0
  3122  0016E4  6E3C               	movwf	_errno+1,c
  3123  0016E6  0E21               	movlw	33
  3124  0016E8  6E3B               	movwf	_errno,c
  3125  0016EA                     l1158:
  3126                           
  3127                           ; BSR set to: 0
  3128  0016EA  0E00               	movlw	0
  3129  0016EC  0100               	movlb	0	; () banked
  3130  0016EE  6F9E               	movwf	?_sqrt& (0+255),b
  3131  0016F0  0E00               	movlw	0
  3132  0016F2  0100               	movlb	0	; () banked
  3133  0016F4  6F9F               	movwf	(?_sqrt+1)& (0+255),b
  3134  0016F6  0E00               	movlw	0
  3135  0016F8  0100               	movlb	0	; () banked
  3136  0016FA  6FA0               	movwf	(?_sqrt+2)& (0+255),b
  3137                           
  3138                           ; BSR set to: 0
  3139  0016FC  0012               	return	
  3140  0016FE                     l1157:
  3141                           
  3142                           ; BSR set to: 0
  3143  0016FE  C09E  F0A7         	movff	sqrt@a,sqrt@z
  3144  001702  C09F  F0A8         	movff	sqrt@a+1,sqrt@z+1
  3145  001706  C0A0  F0A9         	movff	sqrt@a+2,sqrt@z+2
  3146                           
  3147                           ; BSR set to: 0
  3148  00170A  C09E  F0A1         	movff	sqrt@a,??_sqrt
  3149  00170E  C09F  F0A2         	movff	sqrt@a+1,??_sqrt+1
  3150  001712  C0A0  F0A3         	movff	sqrt@a+2,??_sqrt+2
  3151  001716  0100               	movlb	0	; () banked
  3152  001718  1FA1               	comf	??_sqrt& (0+255),f,b
  3153  00171A  1FA2               	comf	(??_sqrt+1)& (0+255),f,b
  3154  00171C  1FA3               	comf	(??_sqrt+2)& (0+255),f,b
  3155  00171E  2BA1               	incf	??_sqrt& (0+255),f,b
  3156  001720  0E00               	movlw	0
  3157  001722  23A2               	addwfc	(??_sqrt+1)& (0+255),f,b
  3158  001724  23A3               	addwfc	(??_sqrt+2)& (0+255),f,b
  3159  001726  0EC8               	movlw	200
  3160  001728  0100               	movlb	0	; () banked
  3161  00172A  25A1               	addwf	??_sqrt& (0+255),w,b
  3162  00172C  0100               	movlb	0	; () banked
  3163  00172E  6FAE               	movwf	sqrt@x& (0+255),b
  3164  001730  0E6E               	movlw	110
  3165  001732  0100               	movlb	0	; () banked
  3166  001734  21A2               	addwfc	(??_sqrt+1)& (0+255),w,b
  3167  001736  0100               	movlb	0	; () banked
  3168  001738  6FAF               	movwf	(sqrt@x+1)& (0+255),b
  3169  00173A  0EBE               	movlw	190
  3170  00173C  0100               	movlb	0	; () banked
  3171  00173E  21A3               	addwfc	(??_sqrt+2)& (0+255),w,b
  3172  001740  0100               	movlb	0	; () banked
  3173  001742  6FB0               	movwf	(sqrt@x+2)& (0+255),b
  3174                           
  3175                           ; BSR set to: 0
  3176  001744  0100               	movlb	0	; () banked
  3177  001746  90D8               	bcf	status,0,c
  3178  001748  33B0               	rrcf	(sqrt@x+2)& (0+255),f,b
  3179  00174A  33AF               	rrcf	(sqrt@x+1)& (0+255),f,b
  3180  00174C  33AE               	rrcf	sqrt@x& (0+255),f,b
  3181                           
  3182                           ; BSR set to: 0
  3183  00174E  0E00               	movlw	0
  3184  001750  0100               	movlb	0	; () banked
  3185  001752  5FA7               	subwf	sqrt@z& (0+255),f,b
  3186  001754  0E80               	movlw	128
  3187  001756  0100               	movlb	0	; () banked
  3188  001758  5BA8               	subwfb	(sqrt@z+1)& (0+255),f,b
  3189  00175A  0E00               	movlw	0
  3190  00175C  0100               	movlb	0	; () banked
  3191  00175E  5BA9               	subwfb	(sqrt@z+2)& (0+255),f,b
  3192                           
  3193                           ; BSR set to: 0
  3194  001760  0E04               	movlw	4
  3195  001762  0100               	movlb	0	; () banked
  3196  001764  6FAA               	movwf	sqrt@i& (0+255),b
  3197  001766                     l4668:
  3198                           
  3199                           ; BSR set to: 0
  3200  001766  C0AE  F0A4         	movff	sqrt@x,sqrt@og
  3201  00176A  C0AF  F0A5         	movff	sqrt@x+1,sqrt@og+1
  3202  00176E  C0B0  F0A6         	movff	sqrt@x+2,sqrt@og+2
  3203                           
  3204                           ; BSR set to: 0
  3205  001772  C0AE  F060         	movff	sqrt@x,___ftmul@f1
  3206  001776  C0AF  F061         	movff	sqrt@x+1,___ftmul@f1+1
  3207  00177A  C0B0  F062         	movff	sqrt@x+2,___ftmul@f1+2
  3208  00177E  C0A7  F063         	movff	sqrt@z,___ftmul@f2
  3209  001782  C0A8  F064         	movff	sqrt@z+1,___ftmul@f2+1
  3210  001786  C0A9  F065         	movff	sqrt@z+2,___ftmul@f2+2
  3211  00178A  ECE3  F00D         	call	___ftmul	;wreg free
  3212  00178E  C060  F0AB         	movff	?___ftmul,sqrt@q
  3213  001792  C061  F0AC         	movff	?___ftmul+1,sqrt@q+1
  3214  001796  C062  F0AD         	movff	?___ftmul+2,sqrt@q+2
  3215  00179A  C0AB  F060         	movff	sqrt@q,___ftmul@f1
  3216  00179E  C0AC  F061         	movff	sqrt@q+1,___ftmul@f1+1
  3217  0017A2  C0AD  F062         	movff	sqrt@q+2,___ftmul@f1+2
  3218  0017A6  C0AE  F063         	movff	sqrt@x,___ftmul@f2
  3219  0017AA  C0AF  F064         	movff	sqrt@x+1,___ftmul@f2+1
  3220  0017AE  C0B0  F065         	movff	sqrt@x+2,___ftmul@f2+2
  3221  0017B2  ECE3  F00D         	call	___ftmul	;wreg free
  3222  0017B6  C060  F0AB         	movff	?___ftmul,sqrt@q
  3223  0017BA  C061  F0AC         	movff	?___ftmul+1,sqrt@q+1
  3224  0017BE  C062  F0AD         	movff	?___ftmul+2,sqrt@q+2
  3225  0017C2  C0AB  F060         	movff	sqrt@q,___ftmul@f1
  3226  0017C6  C0AC  F061         	movff	sqrt@q+1,___ftmul@f1+1
  3227  0017CA  C0AD  F062         	movff	sqrt@q+2,___ftmul@f1+2
  3228  0017CE  C0AE  F063         	movff	sqrt@x,___ftmul@f2
  3229  0017D2  C0AF  F064         	movff	sqrt@x+1,___ftmul@f2+1
  3230  0017D6  C0B0  F065         	movff	sqrt@x+2,___ftmul@f2+2
  3231  0017DA  ECE3  F00D         	call	___ftmul	;wreg free
  3232  0017DE  C060  F0AB         	movff	?___ftmul,sqrt@q
  3233  0017E2  C061  F0AC         	movff	?___ftmul+1,sqrt@q+1
  3234  0017E6  C062  F0AD         	movff	?___ftmul+2,sqrt@q+2
  3235  0017EA  C0AE  F060         	movff	sqrt@x,___ftmul@f1
  3236  0017EE  C0AF  F061         	movff	sqrt@x+1,___ftmul@f1+1
  3237  0017F2  C0B0  F062         	movff	sqrt@x+2,___ftmul@f1+2
  3238  0017F6  0E00               	movlw	0
  3239  0017F8  0100               	movlb	0	; () banked
  3240  0017FA  6F63               	movwf	___ftmul@f2& (0+255),b
  3241  0017FC  0EC0               	movlw	192
  3242  0017FE  0100               	movlb	0	; () banked
  3243  001800  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3244  001802  0E3F               	movlw	63
  3245  001804  0100               	movlb	0	; () banked
  3246  001806  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3247  001808  ECE3  F00D         	call	___ftmul	;wreg free
  3248  00180C  C060  F0AE         	movff	?___ftmul,sqrt@x
  3249  001810  C061  F0AF         	movff	?___ftmul+1,sqrt@x+1
  3250  001814  C062  F0B0         	movff	?___ftmul+2,sqrt@x+2
  3251  001818  C0AE  F060         	movff	sqrt@x,___ftsub@f1
  3252  00181C  C0AF  F061         	movff	sqrt@x+1,___ftsub@f1+1
  3253  001820  C0B0  F062         	movff	sqrt@x+2,___ftsub@f1+2
  3254  001824  C0AB  F063         	movff	sqrt@q,___ftsub@f2
  3255  001828  C0AC  F064         	movff	sqrt@q+1,___ftsub@f2+1
  3256  00182C  C0AD  F065         	movff	sqrt@q+2,___ftsub@f2+2
  3257  001830  ECED  F016         	call	___ftsub	;wreg free
  3258  001834  C060  F0AE         	movff	?___ftsub,sqrt@x
  3259  001838  C061  F0AF         	movff	?___ftsub+1,sqrt@x+1
  3260  00183C  C062  F0B0         	movff	?___ftsub+2,sqrt@x+2
  3261  001840  0100               	movlb	0	; () banked
  3262  001842  2FAA               	decfsz	sqrt@i& (0+255),f,b
  3263  001844  D790               	goto	l4668
  3264                           
  3265                           ; BSR set to: 0
  3266                           
  3267                           ; BSR set to: 0
  3268  001846  C0AE  F060         	movff	sqrt@x,___ftmul@f1
  3269  00184A  C0AF  F061         	movff	sqrt@x+1,___ftmul@f1+1
  3270  00184E  C0B0  F062         	movff	sqrt@x+2,___ftmul@f1+2
  3271  001852  C09E  F063         	movff	sqrt@a,___ftmul@f2
  3272  001856  C09F  F064         	movff	sqrt@a+1,___ftmul@f2+1
  3273  00185A  C0A0  F065         	movff	sqrt@a+2,___ftmul@f2+2
  3274  00185E  ECE3  F00D         	call	___ftmul	;wreg free
  3275  001862  C060  F09E         	movff	?___ftmul,?_sqrt
  3276  001866  C061  F09F         	movff	?___ftmul+1,?_sqrt+1
  3277  00186A  C062  F0A0         	movff	?___ftmul+2,?_sqrt+2
  3278  00186E  0012               	return	
  3279  001870                     __end_of_sqrt:
  3280                           	opt stack 0
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           intcon	equ	0xFF2
  3286                           postinc0	equ	0xFEE
  3287                           wreg	equ	0xFE8
  3288                           postdec1	equ	0xFE5
  3289                           fsr1l	equ	0xFE1
  3290                           status	equ	0xFD8
  3291                           
  3292 ;; *************** function _pow *****************
  3293 ;; Defined at:
  3294 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\pow.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;  x               3   45[BANK0 ] unsigned char 
  3297 ;;  y               3   48[BANK0 ] unsigned char 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  yi              4   58[BANK0 ] unsigned long 
  3300 ;;  sign            1   57[BANK0 ] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  3   45[BANK0 ] unsigned char 
  3303 ;; Registers used:
  3304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3310 ;;      Params:         0       6       0       0       0       0       0
  3311 ;;      Locals:         0      11       0       0       0       0       0
  3312 ;;      Temps:          0       0       0       0       0       0       0
  3313 ;;      Totals:         0      17       0       0       0       0       0
  3314 ;;Total ram usage:       17 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    6
  3317 ;; This function calls:
  3318 ;;		___ftge
  3319 ;;		___ftmul
  3320 ;;		___ftneg
  3321 ;;		___fttol
  3322 ;;		___lltoft
  3323 ;;		_exp
  3324 ;;		_log
  3325 ;; This function is called by:
  3326 ;;		_computeAngle
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330                           	psect	text8
  3331  001A1C                     __ptext8:
  3332                           	opt stack 0
  3333  001A1C                     _pow:
  3334                           	opt stack 23
  3335                           
  3336                           ;incstack = 0
  3337  001A1C  0E00               	movlw	0
  3338  001A1E  0100               	movlb	0	; () banked
  3339  001A20  6F99               	movwf	pow@sign& (0+255),b
  3340                           
  3341                           ; BSR set to: 0
  3342  001A22  0100               	movlb	0	; () banked
  3343  001A24  518D               	movf	pow@x& (0+255),w,b
  3344  001A26  0100               	movlb	0	; () banked
  3345  001A28  118E               	iorwf	(pow@x+1)& (0+255),w,b
  3346  001A2A  0100               	movlb	0	; () banked
  3347  001A2C  118F               	iorwf	(pow@x+2)& (0+255),w,b
  3348  001A2E  A4D8               	btfss	status,2,c
  3349  001A30  D022               	goto	l4622
  3350                           
  3351                           ; BSR set to: 0
  3352  001A32  0E00               	movlw	0
  3353  001A34  0100               	movlb	0	; () banked
  3354  001A36  6F6C               	movwf	___ftge@ff1& (0+255),b
  3355  001A38  0E00               	movlw	0
  3356  001A3A  0100               	movlb	0	; () banked
  3357  001A3C  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
  3358  001A3E  0E00               	movlw	0
  3359  001A40  0100               	movlb	0	; () banked
  3360  001A42  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
  3361  001A44  C090  F06F         	movff	pow@y,___ftge@ff2
  3362  001A48  C091  F070         	movff	pow@y+1,___ftge@ff2+1
  3363  001A4C  C092  F071         	movff	pow@y+2,___ftge@ff2+2
  3364  001A50  ECBA  F012         	call	___ftge	;wreg free
  3365  001A54  0100               	movlb	0	; () banked
  3366  001A56  A0D8               	btfss	status,0,c
  3367  001A58  D004               	goto	l1023
  3368                           
  3369                           ; BSR set to: 0
  3370  001A5A  0E00               	movlw	0
  3371  001A5C  6E3C               	movwf	_errno+1,c
  3372  001A5E  0E21               	movlw	33
  3373  001A60  6E3B               	movwf	_errno,c
  3374  001A62                     l1023:
  3375                           
  3376                           ; BSR set to: 0
  3377  001A62  0E00               	movlw	0
  3378  001A64  0100               	movlb	0	; () banked
  3379  001A66  6F8D               	movwf	?_pow& (0+255),b
  3380  001A68  0E00               	movlw	0
  3381  001A6A  0100               	movlb	0	; () banked
  3382  001A6C  6F8E               	movwf	(?_pow+1)& (0+255),b
  3383  001A6E  0E00               	movlw	0
  3384  001A70  0100               	movlb	0	; () banked
  3385  001A72  6F8F               	movwf	(?_pow+2)& (0+255),b
  3386                           
  3387                           ; BSR set to: 0
  3388  001A74  0012               	return	
  3389  001A76                     l4622:
  3390                           
  3391                           ; BSR set to: 0
  3392  001A76  0100               	movlb	0	; () banked
  3393  001A78  5190               	movf	pow@y& (0+255),w,b
  3394  001A7A  0100               	movlb	0	; () banked
  3395  001A7C  1191               	iorwf	(pow@y+1)& (0+255),w,b
  3396  001A7E  0100               	movlb	0	; () banked
  3397  001A80  1192               	iorwf	(pow@y+2)& (0+255),w,b
  3398  001A82  A4D8               	btfss	status,2,c
  3399  001A84  D00A               	goto	l4628
  3400                           
  3401                           ; BSR set to: 0
  3402  001A86  0E00               	movlw	0
  3403  001A88  0100               	movlb	0	; () banked
  3404  001A8A  6F8D               	movwf	?_pow& (0+255),b
  3405  001A8C  0E80               	movlw	128
  3406  001A8E  0100               	movlb	0	; () banked
  3407  001A90  6F8E               	movwf	(?_pow+1)& (0+255),b
  3408  001A92  0E3F               	movlw	63
  3409  001A94  0100               	movlb	0	; () banked
  3410  001A96  6F8F               	movwf	(?_pow+2)& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413  001A98  0012               	return	
  3414  001A9A                     l4628:
  3415                           
  3416                           ; BSR set to: 0
  3417  001A9A  0100               	movlb	0	; () banked
  3418  001A9C  AF8F               	btfss	(pow@x+2)& (0+255),7,b
  3419  001A9E  D048               	goto	l4640
  3420                           
  3421                           ; BSR set to: 0
  3422  001AA0  C090  F018         	movff	pow@y,___fttol@f1
  3423  001AA4  C091  F019         	movff	pow@y+1,___fttol@f1+1
  3424  001AA8  C092  F01A         	movff	pow@y+2,___fttol@f1+2
  3425  001AAC  EC6A  F011         	call	___fttol	;wreg free
  3426  001AB0  C018  F09A         	movff	?___fttol,pow@yi
  3427  001AB4  C019  F09B         	movff	?___fttol+1,pow@yi+1
  3428  001AB8  C01A  F09C         	movff	?___fttol+2,pow@yi+2
  3429  001ABC  C01B  F09D         	movff	?___fttol+3,pow@yi+3
  3430  001AC0  C09A  F020         	movff	pow@yi,___lltoft@c
  3431  001AC4  C09B  F021         	movff	pow@yi+1,___lltoft@c+1
  3432  001AC8  C09C  F022         	movff	pow@yi+2,___lltoft@c+2
  3433  001ACC  C09D  F023         	movff	pow@yi+3,___lltoft@c+3
  3434  001AD0  EC94  F016         	call	___lltoft	;wreg free
  3435  001AD4  0100               	movlb	0	; () banked
  3436  001AD6  5190               	movf	pow@y& (0+255),w,b
  3437  001AD8  1820               	xorwf	?___lltoft,w,c
  3438  001ADA  E109               	bnz	u5800
  3439  001ADC  0100               	movlb	0	; () banked
  3440  001ADE  5191               	movf	(pow@y+1)& (0+255),w,b
  3441  001AE0  1821               	xorwf	?___lltoft+1,w,c
  3442  001AE2  E105               	bnz	u5800
  3443  001AE4  0100               	movlb	0	; () banked
  3444  001AE6  5192               	movf	(pow@y+2)& (0+255),w,b
  3445  001AE8  1822               	xorwf	?___lltoft+2,w,c
  3446  001AEA  B4D8               	btfsc	status,2,c
  3447  001AEC  D00E               	goto	l4636
  3448  001AEE                     u5800:
  3449                           
  3450                           ; BSR set to: 0
  3451  001AEE  0E00               	movlw	0
  3452  001AF0  6E3C               	movwf	_errno+1,c
  3453  001AF2  0E21               	movlw	33
  3454  001AF4  6E3B               	movwf	_errno,c
  3455  001AF6  0E00               	movlw	0
  3456  001AF8  0100               	movlb	0	; () banked
  3457  001AFA  6F8D               	movwf	?_pow& (0+255),b
  3458  001AFC  0E00               	movlw	0
  3459  001AFE  0100               	movlb	0	; () banked
  3460  001B00  6F8E               	movwf	(?_pow+1)& (0+255),b
  3461  001B02  0E00               	movlw	0
  3462  001B04  0100               	movlb	0	; () banked
  3463  001B06  6F8F               	movwf	(?_pow+2)& (0+255),b
  3464                           
  3465                           ; BSR set to: 0
  3466  001B08  0012               	return	
  3467  001B0A                     l4636:
  3468                           
  3469                           ; BSR set to: 0
  3470  001B0A  0100               	movlb	0	; () banked
  3471  001B0C  519A               	movf	pow@yi& (0+255),w,b
  3472  001B0E  0B01               	andlw	1
  3473  001B10  0100               	movlb	0	; () banked
  3474  001B12  6F99               	movwf	pow@sign& (0+255),b
  3475                           
  3476                           ; BSR set to: 0
  3477  001B14  C08D  F020         	movff	pow@x,___ftneg@f1
  3478  001B18  C08E  F021         	movff	pow@x+1,___ftneg@f1+1
  3479  001B1C  C08F  F022         	movff	pow@x+2,___ftneg@f1+2
  3480  001B20  EC84  F017         	call	___ftneg	;wreg free
  3481  001B24  C020  F08D         	movff	?___ftneg,pow@x
  3482  001B28  C021  F08E         	movff	?___ftneg+1,pow@x+1
  3483  001B2C  C022  F08F         	movff	?___ftneg+2,pow@x+2
  3484  001B30                     l4640:
  3485  001B30  C08D  F078         	movff	pow@x,log@x
  3486  001B34  C08E  F079         	movff	pow@x+1,log@x+1
  3487  001B38  C08F  F07A         	movff	pow@x+2,log@x+2
  3488  001B3C  EC32  F00F         	call	_log	;wreg free
  3489  001B40  C078  F093         	movff	?_log,_pow$1203
  3490  001B44  C079  F094         	movff	?_log+1,_pow$1203+1
  3491  001B48  C07A  F095         	movff	?_log+2,_pow$1203+2
  3492  001B4C  C093  F060         	movff	_pow$1203,___ftmul@f1
  3493  001B50  C094  F061         	movff	_pow$1203+1,___ftmul@f1+1
  3494  001B54  C095  F062         	movff	_pow$1203+2,___ftmul@f1+2
  3495  001B58  C090  F063         	movff	pow@y,___ftmul@f2
  3496  001B5C  C091  F064         	movff	pow@y+1,___ftmul@f2+1
  3497  001B60  C092  F065         	movff	pow@y+2,___ftmul@f2+2
  3498  001B64  ECE3  F00D         	call	___ftmul	;wreg free
  3499  001B68  C060  F096         	movff	?___ftmul,_pow$1204
  3500  001B6C  C061  F097         	movff	?___ftmul+1,_pow$1204+1
  3501  001B70  C062  F098         	movff	?___ftmul+2,_pow$1204+2
  3502  001B74  C096  F084         	movff	_pow$1204,exp@x
  3503  001B78  C097  F085         	movff	_pow$1204+1,exp@x+1
  3504  001B7C  C098  F086         	movff	_pow$1204+2,exp@x+2
  3505  001B80  EC52  F008         	call	_exp	;wreg free
  3506  001B84  C084  F08D         	movff	?_exp,pow@x
  3507  001B88  C085  F08E         	movff	?_exp+1,pow@x+1
  3508  001B8C  C086  F08F         	movff	?_exp+2,pow@x+2
  3509  001B90  0100               	movlb	0	; () banked
  3510  001B92  5199               	movf	pow@sign& (0+255),w,b
  3511  001B94  0100               	movlb	0	; () banked
  3512  001B96  B4D8               	btfsc	status,2,c
  3513  001B98  D00F               	goto	l1028
  3514                           
  3515                           ; BSR set to: 0
  3516  001B9A  C08D  F020         	movff	pow@x,___ftneg@f1
  3517  001B9E  C08E  F021         	movff	pow@x+1,___ftneg@f1+1
  3518  001BA2  C08F  F022         	movff	pow@x+2,___ftneg@f1+2
  3519  001BA6  EC84  F017         	call	___ftneg	;wreg free
  3520  001BAA  C020  F08D         	movff	?___ftneg,?_pow
  3521  001BAE  C021  F08E         	movff	?___ftneg+1,?_pow+1
  3522  001BB2  C022  F08F         	movff	?___ftneg+2,?_pow+2
  3523  001BB6  0012               	return	
  3524  001BB8                     l1028:
  3525                           
  3526                           ; BSR set to: 0
  3527  001BB8  C08D  F08D         	movff	pow@x,?_pow
  3528  001BBC  C08E  F08E         	movff	pow@x+1,?_pow+1
  3529  001BC0  C08F  F08F         	movff	pow@x+2,?_pow+2
  3530  001BC4  0012               	return		;funcret
  3531  001BC6                     __end_of_pow:
  3532                           	opt stack 0
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           intcon	equ	0xFF2
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           postdec1	equ	0xFE5
  3541                           fsr1l	equ	0xFE1
  3542                           status	equ	0xFD8
  3543                           
  3544 ;; *************** function _log *****************
  3545 ;; Defined at:
  3546 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\log.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  x               3   24[BANK0 ] unsigned char 
  3549 ;; Auto vars:     Size  Location     Type
  3550 ;;  exponent        2   27[BANK0 ] int 
  3551 ;; Return value:  Size  Location     Type
  3552 ;;                  3   24[BANK0 ] int 
  3553 ;; Registers used:
  3554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3555 ;; Tracked objects:
  3556 ;;		On entry : 0/0
  3557 ;;		On exit  : 0/0
  3558 ;;		Unchanged: 0/0
  3559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3560 ;;      Params:         0       3       0       0       0       0       0
  3561 ;;      Locals:         0       2       0       0       0       0       0
  3562 ;;      Temps:          0       0       0       0       0       0       0
  3563 ;;      Totals:         0       5       0       0       0       0       0
  3564 ;;Total ram usage:        5 bytes
  3565 ;; Hardware stack levels used:    1
  3566 ;; Hardware stack levels required when called:    5
  3567 ;; This function calls:
  3568 ;;		___awtoft
  3569 ;;		___ftadd
  3570 ;;		___ftmul
  3571 ;;		_eval_poly
  3572 ;;		_frexp
  3573 ;; This function is called by:
  3574 ;;		_pow
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text9
  3579  001E64                     __ptext9:
  3580                           	opt stack 0
  3581  001E64                     _log:
  3582                           	opt stack 23
  3583                           
  3584                           ;incstack = 0
  3585  001E64  0100               	movlb	0	; () banked
  3586  001E66  AF7A               	btfss	(log@x+2)& (0+255),7,b
  3587  001E68  D00E               	goto	l4424
  3588                           
  3589                           ; BSR set to: 0
  3590  001E6A  0E00               	movlw	0
  3591  001E6C  6E3C               	movwf	_errno+1,c
  3592  001E6E  0E21               	movlw	33
  3593  001E70  6E3B               	movwf	_errno,c
  3594  001E72  0E00               	movlw	0
  3595  001E74  0100               	movlb	0	; () banked
  3596  001E76  6F78               	movwf	?_log& (0+255),b
  3597  001E78  0E00               	movlw	0
  3598  001E7A  0100               	movlb	0	; () banked
  3599  001E7C  6F79               	movwf	(?_log+1)& (0+255),b
  3600  001E7E  0E00               	movlw	0
  3601  001E80  0100               	movlb	0	; () banked
  3602  001E82  6F7A               	movwf	(?_log+2)& (0+255),b
  3603                           
  3604                           ; BSR set to: 0
  3605  001E84  0012               	return	
  3606  001E86                     l4424:
  3607                           
  3608                           ; BSR set to: 0
  3609  001E86  0100               	movlb	0	; () banked
  3610  001E88  5178               	movf	log@x& (0+255),w,b
  3611  001E8A  0100               	movlb	0	; () banked
  3612  001E8C  1179               	iorwf	(log@x+1)& (0+255),w,b
  3613  001E8E  0100               	movlb	0	; () banked
  3614  001E90  117A               	iorwf	(log@x+2)& (0+255),w,b
  3615  001E92  A4D8               	btfss	status,2,c
  3616  001E94  D00E               	goto	l4430
  3617                           
  3618                           ; BSR set to: 0
  3619  001E96  0E00               	movlw	0
  3620  001E98  6E3C               	movwf	_errno+1,c
  3621  001E9A  0E22               	movlw	34
  3622  001E9C  6E3B               	movwf	_errno,c
  3623  001E9E  0E00               	movlw	0
  3624  001EA0  0100               	movlb	0	; () banked
  3625  001EA2  6F78               	movwf	?_log& (0+255),b
  3626  001EA4  0E00               	movlw	0
  3627  001EA6  0100               	movlb	0	; () banked
  3628  001EA8  6F79               	movwf	(?_log+1)& (0+255),b
  3629  001EAA  0E00               	movlw	0
  3630  001EAC  0100               	movlb	0	; () banked
  3631  001EAE  6F7A               	movwf	(?_log+2)& (0+255),b
  3632                           
  3633                           ; BSR set to: 0
  3634  001EB0  0012               	return	
  3635  001EB2                     l4430:
  3636                           
  3637                           ; BSR set to: 0
  3638  001EB2  0E00               	movlw	0
  3639  001EB4  0100               	movlb	0	; () banked
  3640  001EB6  6F63               	movwf	___ftmul@f2& (0+255),b
  3641  001EB8  0E00               	movlw	0
  3642  001EBA  0100               	movlb	0	; () banked
  3643  001EBC  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3644  001EBE  0E40               	movlw	64
  3645  001EC0  0100               	movlb	0	; () banked
  3646  001EC2  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3647  001EC4  0E7B               	movlw	low log@exponent
  3648  001EC6  6E1B               	movwf	frexp@eptr,c
  3649  001EC8  0E00               	movlw	high log@exponent
  3650  001ECA  6E1C               	movwf	frexp@eptr+1,c
  3651  001ECC  C078  F018         	movff	log@x,frexp@value
  3652  001ED0  C079  F019         	movff	log@x+1,frexp@value+1
  3653  001ED4  C07A  F01A         	movff	log@x+2,frexp@value+2
  3654  001ED8  EC8B  F014         	call	_frexp	;wreg free
  3655  001EDC  C018  F060         	movff	?_frexp,___ftmul@f1
  3656  001EE0  C019  F061         	movff	?_frexp+1,___ftmul@f1+1
  3657  001EE4  C01A  F062         	movff	?_frexp+2,___ftmul@f1+2
  3658  001EE8  ECE3  F00D         	call	___ftmul	;wreg free
  3659  001EEC  C060  F024         	movff	?___ftmul,___ftadd@f1
  3660  001EF0  C061  F025         	movff	?___ftmul+1,___ftadd@f1+1
  3661  001EF4  C062  F026         	movff	?___ftmul+2,___ftadd@f1+2
  3662  001EF8  0E00               	movlw	0
  3663  001EFA  6E27               	movwf	___ftadd@f2,c
  3664  001EFC  0E80               	movlw	128
  3665  001EFE  6E28               	movwf	___ftadd@f2+1,c
  3666  001F00  0EBF               	movlw	191
  3667  001F02  6E29               	movwf	___ftadd@f2+2,c
  3668  001F04  EC38  F00C         	call	___ftadd	;wreg free
  3669  001F08  C024  F078         	movff	?___ftadd,log@x
  3670  001F0C  C025  F079         	movff	?___ftadd+1,log@x+1
  3671  001F10  C026  F07A         	movff	?___ftadd+2,log@x+2
  3672  001F14  0100               	movlb	0	; () banked
  3673  001F16  077B               	decf	log@exponent& (0+255),f,b
  3674  001F18  A0D8               	btfss	status,0,c
  3675  001F1A  077C               	decf	(log@exponent+1)& (0+255),f,b
  3676                           
  3677                           ; BSR set to: 0
  3678  001F1C  C078  F06C         	movff	log@x,eval_poly@x
  3679  001F20  C079  F06D         	movff	log@x+1,eval_poly@x+1
  3680  001F24  C07A  F06E         	movff	log@x+2,eval_poly@x+2
  3681  001F28  0E98               	movlw	low log@coeff
  3682  001F2A  0100               	movlb	0	; () banked
  3683  001F2C  6F6F               	movwf	eval_poly@d& (0+255),b
  3684  001F2E  0E06               	movlw	high log@coeff
  3685  001F30  0100               	movlb	0	; () banked
  3686  001F32  6F70               	movwf	(eval_poly@d+1)& (0+255),b
  3687  001F34  0E00               	movlw	0
  3688  001F36  0100               	movlb	0	; () banked
  3689  001F38  6F72               	movwf	(eval_poly@n+1)& (0+255),b
  3690  001F3A  0E08               	movlw	8
  3691  001F3C  6F71               	movwf	eval_poly@n& (0+255),b
  3692  001F3E  ECE4  F011         	call	_eval_poly	;wreg free
  3693  001F42  C06C  F078         	movff	?_eval_poly,log@x
  3694  001F46  C06D  F079         	movff	?_eval_poly+1,log@x+1
  3695  001F4A  C06E  F07A         	movff	?_eval_poly+2,log@x+2
  3696  001F4E  0E72               	movlw	114
  3697  001F50  0100               	movlb	0	; () banked
  3698  001F52  6F63               	movwf	___ftmul@f2& (0+255),b
  3699  001F54  0E31               	movlw	49
  3700  001F56  0100               	movlb	0	; () banked
  3701  001F58  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3702  001F5A  0E3F               	movlw	63
  3703  001F5C  0100               	movlb	0	; () banked
  3704  001F5E  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3705  001F60  C07B  F020         	movff	log@exponent,___awtoft@c
  3706  001F64  C07C  F021         	movff	log@exponent+1,___awtoft@c+1
  3707  001F68  EC13  F017         	call	___awtoft	;wreg free
  3708  001F6C  C020  F060         	movff	?___awtoft,___ftmul@f1
  3709  001F70  C021  F061         	movff	?___awtoft+1,___ftmul@f1+1
  3710  001F74  C022  F062         	movff	?___awtoft+2,___ftmul@f1+2
  3711  001F78  ECE3  F00D         	call	___ftmul	;wreg free
  3712  001F7C  C060  F024         	movff	?___ftmul,___ftadd@f1
  3713  001F80  C061  F025         	movff	?___ftmul+1,___ftadd@f1+1
  3714  001F84  C062  F026         	movff	?___ftmul+2,___ftadd@f1+2
  3715  001F88  C078  F027         	movff	log@x,___ftadd@f2
  3716  001F8C  C079  F028         	movff	log@x+1,___ftadd@f2+1
  3717  001F90  C07A  F029         	movff	log@x+2,___ftadd@f2+2
  3718  001F94  EC38  F00C         	call	___ftadd	;wreg free
  3719  001F98  C024  F078         	movff	?___ftadd,?_log
  3720  001F9C  C025  F079         	movff	?___ftadd+1,?_log+1
  3721  001FA0  C026  F07A         	movff	?___ftadd+2,?_log+2
  3722  001FA4  0012               	return	
  3723  001FA6                     __end_of_log:
  3724                           	opt stack 0
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           intcon	equ	0xFF2
  3730                           postinc0	equ	0xFEE
  3731                           wreg	equ	0xFE8
  3732                           postdec1	equ	0xFE5
  3733                           fsr1l	equ	0xFE1
  3734                           status	equ	0xFD8
  3735                           
  3736 ;; *************** function _exp *****************
  3737 ;; Defined at:
  3738 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\exp.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;  x               3   36[BANK0 ] int 
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;  exponent        2   42[BANK0 ] int 
  3743 ;;  sign            1   44[BANK0 ] unsigned char 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  3   36[BANK0 ] unsigned char 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3753 ;;      Params:         0       3       0       0       0       0       0
  3754 ;;      Locals:         0       6       0       0       0       0       0
  3755 ;;      Temps:          0       0       0       0       0       0       0
  3756 ;;      Totals:         0       9       0       0       0       0       0
  3757 ;;Total ram usage:        9 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    5
  3760 ;; This function calls:
  3761 ;;		___awtoft
  3762 ;;		___ftdiv
  3763 ;;		___ftge
  3764 ;;		___ftmul
  3765 ;;		___ftneg
  3766 ;;		___ftsub
  3767 ;;		___fttol
  3768 ;;		_eval_poly
  3769 ;;		_floor
  3770 ;;		_ldexp
  3771 ;; This function is called by:
  3772 ;;		_pow
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           	psect	text10
  3777  0010A4                     __ptext10:
  3778                           	opt stack 0
  3779  0010A4                     _exp:
  3780                           	opt stack 23
  3781                           
  3782                           ;incstack = 0
  3783  0010A4  0100               	movlb	0	; () banked
  3784  0010A6  5184               	movf	exp@x& (0+255),w,b
  3785  0010A8  0100               	movlb	0	; () banked
  3786  0010AA  1185               	iorwf	(exp@x+1)& (0+255),w,b
  3787  0010AC  0100               	movlb	0	; () banked
  3788  0010AE  1186               	iorwf	(exp@x+2)& (0+255),w,b
  3789  0010B0  A4D8               	btfss	status,2,c
  3790  0010B2  D00A               	goto	l4446
  3791                           
  3792                           ; BSR set to: 0
  3793  0010B4  0E00               	movlw	0
  3794  0010B6  0100               	movlb	0	; () banked
  3795  0010B8  6F84               	movwf	?_exp& (0+255),b
  3796  0010BA  0E80               	movlw	128
  3797  0010BC  0100               	movlb	0	; () banked
  3798  0010BE  6F85               	movwf	(?_exp+1)& (0+255),b
  3799  0010C0  0E3F               	movlw	63
  3800  0010C2  0100               	movlb	0	; () banked
  3801  0010C4  6F86               	movwf	(?_exp+2)& (0+255),b
  3802                           
  3803                           ; BSR set to: 0
  3804  0010C6  0012               	return	
  3805  0010C8                     l4446:
  3806                           
  3807                           ; BSR set to: 0
  3808  0010C8  0E72               	movlw	114
  3809  0010CA  0100               	movlb	0	; () banked
  3810  0010CC  6F6C               	movwf	___ftge@ff1& (0+255),b
  3811  0010CE  0E31               	movlw	49
  3812  0010D0  0100               	movlb	0	; () banked
  3813  0010D2  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
  3814  0010D4  0E44               	movlw	68
  3815  0010D6  0100               	movlb	0	; () banked
  3816  0010D8  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
  3817  0010DA  C084  F06F         	movff	exp@x,___ftge@ff2
  3818  0010DE  C085  F070         	movff	exp@x+1,___ftge@ff2+1
  3819  0010E2  C086  F071         	movff	exp@x+2,___ftge@ff2+2
  3820  0010E6  ECBA  F012         	call	___ftge	;wreg free
  3821  0010EA  0100               	movlb	0	; () banked
  3822  0010EC  B0D8               	btfsc	status,0,c
  3823  0010EE  D00E               	goto	l4452
  3824                           
  3825                           ; BSR set to: 0
  3826  0010F0  0E00               	movlw	0
  3827  0010F2  6E3C               	movwf	_errno+1,c
  3828  0010F4  0E22               	movlw	34
  3829  0010F6  6E3B               	movwf	_errno,c
  3830  0010F8  0EFF               	movlw	255
  3831  0010FA  0100               	movlb	0	; () banked
  3832  0010FC  6F84               	movwf	?_exp& (0+255),b
  3833  0010FE  0E7F               	movlw	127
  3834  001100  0100               	movlb	0	; () banked
  3835  001102  6F85               	movwf	(?_exp+1)& (0+255),b
  3836  001104  0E7F               	movlw	127
  3837  001106  0100               	movlb	0	; () banked
  3838  001108  6F86               	movwf	(?_exp+2)& (0+255),b
  3839                           
  3840                           ; BSR set to: 0
  3841  00110A  0012               	return	
  3842  00110C                     l4452:
  3843                           
  3844                           ; BSR set to: 0
  3845  00110C  C084  F06C         	movff	exp@x,___ftge@ff1
  3846  001110  C085  F06D         	movff	exp@x+1,___ftge@ff1+1
  3847  001114  C086  F06E         	movff	exp@x+2,___ftge@ff1+2
  3848  001118  0E49               	movlw	73
  3849  00111A  0100               	movlb	0	; () banked
  3850  00111C  6F6F               	movwf	___ftge@ff2& (0+255),b
  3851  00111E  0E3A               	movlw	58
  3852  001120  0100               	movlb	0	; () banked
  3853  001122  6F70               	movwf	(___ftge@ff2+1)& (0+255),b
  3854  001124  0EC4               	movlw	196
  3855  001126  0100               	movlb	0	; () banked
  3856  001128  6F71               	movwf	(___ftge@ff2+2)& (0+255),b
  3857  00112A  ECBA  F012         	call	___ftge	;wreg free
  3858  00112E  0100               	movlb	0	; () banked
  3859  001130  B0D8               	btfsc	status,0,c
  3860  001132  D00E               	goto	l4458
  3861                           
  3862                           ; BSR set to: 0
  3863  001134  0E00               	movlw	0
  3864  001136  6E3C               	movwf	_errno+1,c
  3865  001138  0E22               	movlw	34
  3866  00113A  6E3B               	movwf	_errno,c
  3867  00113C  0E00               	movlw	0
  3868  00113E  0100               	movlb	0	; () banked
  3869  001140  6F84               	movwf	?_exp& (0+255),b
  3870  001142  0E00               	movlw	0
  3871  001144  0100               	movlb	0	; () banked
  3872  001146  6F85               	movwf	(?_exp+1)& (0+255),b
  3873  001148  0E00               	movlw	0
  3874  00114A  0100               	movlb	0	; () banked
  3875  00114C  6F86               	movwf	(?_exp+2)& (0+255),b
  3876                           
  3877                           ; BSR set to: 0
  3878  00114E  0012               	return	
  3879  001150                     l4458:
  3880                           
  3881                           ; BSR set to: 0
  3882  001150  0100               	movlb	0	; () banked
  3883  001152  AF86               	btfss	(exp@x+2)& (0+255),7,b
  3884  001154  D002               	goto	u5370
  3885  001156  0E01               	movlw	1
  3886  001158  D001               	goto	u5380
  3887  00115A                     u5370:
  3888  00115A  0E00               	movlw	0
  3889  00115C                     u5380:
  3890  00115C  0100               	movlb	0	; () banked
  3891  00115E  6F8C               	movwf	exp@sign& (0+255),b
  3892                           
  3893                           ; BSR set to: 0
  3894  001160  0100               	movlb	0	; () banked
  3895  001162  518C               	movf	exp@sign& (0+255),w,b
  3896  001164  0100               	movlb	0	; () banked
  3897  001166  B4D8               	btfsc	status,2,c
  3898  001168  D00E               	goto	l1205
  3899                           
  3900                           ; BSR set to: 0
  3901  00116A  C084  F020         	movff	exp@x,___ftneg@f1
  3902  00116E  C085  F021         	movff	exp@x+1,___ftneg@f1+1
  3903  001172  C086  F022         	movff	exp@x+2,___ftneg@f1+2
  3904  001176  EC84  F017         	call	___ftneg	;wreg free
  3905  00117A  C020  F084         	movff	?___ftneg,exp@x
  3906  00117E  C021  F085         	movff	?___ftneg+1,exp@x+1
  3907  001182  C022  F086         	movff	?___ftneg+2,exp@x+2
  3908  001186                     l1205:
  3909  001186  C084  F060         	movff	exp@x,___ftmul@f1
  3910  00118A  C085  F061         	movff	exp@x+1,___ftmul@f1+1
  3911  00118E  C086  F062         	movff	exp@x+2,___ftmul@f1+2
  3912  001192  0EAA               	movlw	170
  3913  001194  0100               	movlb	0	; () banked
  3914  001196  6F63               	movwf	___ftmul@f2& (0+255),b
  3915  001198  0EB8               	movlw	184
  3916  00119A  0100               	movlb	0	; () banked
  3917  00119C  6F64               	movwf	(___ftmul@f2+1)& (0+255),b
  3918  00119E  0E3F               	movlw	63
  3919  0011A0  0100               	movlb	0	; () banked
  3920  0011A2  6F65               	movwf	(___ftmul@f2+2)& (0+255),b
  3921  0011A4  ECE3  F00D         	call	___ftmul	;wreg free
  3922  0011A8  C060  F084         	movff	?___ftmul,exp@x
  3923  0011AC  C061  F085         	movff	?___ftmul+1,exp@x+1
  3924  0011B0  C062  F086         	movff	?___ftmul+2,exp@x+2
  3925  0011B4  C084  F075         	movff	exp@x,floor@x
  3926  0011B8  C085  F076         	movff	exp@x+1,floor@x+1
  3927  0011BC  C086  F077         	movff	exp@x+2,floor@x+2
  3928  0011C0  ECF0  F010         	call	_floor	;wreg free
  3929  0011C4  C075  F087         	movff	?_floor,_exp$1205
  3930  0011C8  C076  F088         	movff	?_floor+1,_exp$1205+1
  3931  0011CC  C077  F089         	movff	?_floor+2,_exp$1205+2
  3932  0011D0  C087  F018         	movff	_exp$1205,___fttol@f1
  3933  0011D4  C088  F019         	movff	_exp$1205+1,___fttol@f1+1
  3934  0011D8  C089  F01A         	movff	_exp$1205+2,___fttol@f1+2
  3935  0011DC  EC6A  F011         	call	___fttol	;wreg free
  3936  0011E0  C018  F08A         	movff	?___fttol,exp@exponent
  3937  0011E4  C019  F08B         	movff	?___fttol+1,exp@exponent+1
  3938  0011E8  C084  F060         	movff	exp@x,___ftsub@f1
  3939  0011EC  C085  F061         	movff	exp@x+1,___ftsub@f1+1
  3940  0011F0  C086  F062         	movff	exp@x+2,___ftsub@f1+2
  3941  0011F4  C08A  F020         	movff	exp@exponent,___awtoft@c
  3942  0011F8  C08B  F021         	movff	exp@exponent+1,___awtoft@c+1
  3943  0011FC  EC13  F017         	call	___awtoft	;wreg free
  3944  001200  C020  F063         	movff	?___awtoft,___ftsub@f2
  3945  001204  C021  F064         	movff	?___awtoft+1,___ftsub@f2+1
  3946  001208  C022  F065         	movff	?___awtoft+2,___ftsub@f2+2
  3947  00120C  ECED  F016         	call	___ftsub	;wreg free
  3948  001210  C060  F084         	movff	?___ftsub,exp@x
  3949  001214  C061  F085         	movff	?___ftsub+1,exp@x+1
  3950  001218  C062  F086         	movff	?___ftsub+2,exp@x+2
  3951  00121C  C084  F06C         	movff	exp@x,eval_poly@x
  3952  001220  C085  F06D         	movff	exp@x+1,eval_poly@x+1
  3953  001224  C086  F06E         	movff	exp@x+2,eval_poly@x+2
  3954  001228  0E7A               	movlw	low exp@coeff
  3955  00122A  0100               	movlb	0	; () banked
  3956  00122C  6F6F               	movwf	eval_poly@d& (0+255),b
  3957  00122E  0E06               	movlw	high exp@coeff
  3958  001230  0100               	movlb	0	; () banked
  3959  001232  6F70               	movwf	(eval_poly@d+1)& (0+255),b
  3960  001234  0E00               	movlw	0
  3961  001236  0100               	movlb	0	; () banked
  3962  001238  6F72               	movwf	(eval_poly@n+1)& (0+255),b
  3963  00123A  0E09               	movlw	9
  3964  00123C  6F71               	movwf	eval_poly@n& (0+255),b
  3965  00123E  ECE4  F011         	call	_eval_poly	;wreg free
  3966  001242  C06C  F078         	movff	?_eval_poly,ldexp@value
  3967  001246  C06D  F079         	movff	?_eval_poly+1,ldexp@value+1
  3968  00124A  C06E  F07A         	movff	?_eval_poly+2,ldexp@value+2
  3969  00124E  C08A  F07B         	movff	exp@exponent,ldexp@newexp
  3970  001252  C08B  F07C         	movff	exp@exponent+1,ldexp@newexp+1
  3971  001256  EC66  F010         	call	_ldexp	;wreg free
  3972  00125A  C078  F084         	movff	?_ldexp,exp@x
  3973  00125E  C079  F085         	movff	?_ldexp+1,exp@x+1
  3974  001262  C07A  F086         	movff	?_ldexp+2,exp@x+2
  3975  001266  0100               	movlb	0	; () banked
  3976  001268  518C               	movf	exp@sign& (0+255),w,b
  3977  00126A  0100               	movlb	0	; () banked
  3978  00126C  B4D8               	btfsc	status,2,c
  3979  00126E  D02E               	goto	l1206
  3980                           
  3981                           ; BSR set to: 0
  3982  001270  0100               	movlb	0	; () banked
  3983  001272  2984               	incf	exp@x& (0+255),w,b
  3984  001274  E113               	bnz	l4480
  3985  001276  0E7F               	movlw	127
  3986  001278  0100               	movlb	0	; () banked
  3987  00127A  1985               	xorwf	(exp@x+1)& (0+255),w,b
  3988  00127C  E10F               	bnz	l4480
  3989  00127E  0E7F               	movlw	127
  3990  001280  0100               	movlb	0	; () banked
  3991  001282  1986               	xorwf	(exp@x+2)& (0+255),w,b
  3992  001284  A4D8               	btfss	status,2,c
  3993  001286  D00A               	goto	l4480
  3994                           
  3995                           ; BSR set to: 0
  3996  001288  0E00               	movlw	0
  3997  00128A  0100               	movlb	0	; () banked
  3998  00128C  6F84               	movwf	?_exp& (0+255),b
  3999  00128E  0E00               	movlw	0
  4000  001290  0100               	movlb	0	; () banked
  4001  001292  6F85               	movwf	(?_exp+1)& (0+255),b
  4002  001294  0E00               	movlw	0
  4003  001296  0100               	movlb	0	; () banked
  4004  001298  6F86               	movwf	(?_exp+2)& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007  00129A  0012               	return	
  4008  00129C                     l4480:
  4009                           
  4010                           ; BSR set to: 0
  4011  00129C  0E00               	movlw	0
  4012  00129E  0100               	movlb	0	; () banked
  4013  0012A0  6F75               	movwf	___ftdiv@f1& (0+255),b
  4014  0012A2  0E80               	movlw	128
  4015  0012A4  0100               	movlb	0	; () banked
  4016  0012A6  6F76               	movwf	(___ftdiv@f1+1)& (0+255),b
  4017  0012A8  0E3F               	movlw	63
  4018  0012AA  0100               	movlb	0	; () banked
  4019  0012AC  6F77               	movwf	(___ftdiv@f1+2)& (0+255),b
  4020  0012AE  C084  F078         	movff	exp@x,___ftdiv@f2
  4021  0012B2  C085  F079         	movff	exp@x+1,___ftdiv@f2+1
  4022  0012B6  C086  F07A         	movff	exp@x+2,___ftdiv@f2+2
  4023  0012BA  EC8C  F00E         	call	___ftdiv	;wreg free
  4024  0012BE  C075  F084         	movff	?___ftdiv,?_exp
  4025  0012C2  C076  F085         	movff	?___ftdiv+1,?_exp+1
  4026  0012C6  C077  F086         	movff	?___ftdiv+2,?_exp+2
  4027  0012CA  0012               	return	
  4028  0012CC                     l1206:
  4029                           
  4030                           ; BSR set to: 0
  4031  0012CC  C084  F084         	movff	exp@x,?_exp
  4032  0012D0  C085  F085         	movff	exp@x+1,?_exp+1
  4033  0012D4  C086  F086         	movff	exp@x+2,?_exp+2
  4034  0012D8  0012               	return		;funcret
  4035  0012DA                     __end_of_exp:
  4036                           	opt stack 0
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           intcon	equ	0xFF2
  4042                           postinc0	equ	0xFEE
  4043                           wreg	equ	0xFE8
  4044                           postdec1	equ	0xFE5
  4045                           fsr1l	equ	0xFE1
  4046                           status	equ	0xFD8
  4047                           
  4048 ;; *************** function _ldexp *****************
  4049 ;; Defined at:
  4050 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  value           3   24[BANK0 ] unsigned char 
  4053 ;;  newexp          2   27[BANK0 ] int 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;		None
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  3   24[BANK0 ] int 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4065 ;;      Params:         0       5       0       0       0       0       0
  4066 ;;      Locals:         0       0       0       0       0       0       0
  4067 ;;      Temps:          0       2       0       0       0       0       0
  4068 ;;      Totals:         0       7       0       0       0       0       0
  4069 ;;Total ram usage:        7 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    2
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_exp
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text11
  4080  0020CC                     __ptext11:
  4081                           	opt stack 0
  4082  0020CC                     _ldexp:
  4083                           	opt stack 25
  4084                           
  4085                           ;incstack = 0
  4086  0020CC  0100               	movlb	0	; () banked
  4087  0020CE  5178               	movf	ldexp@value& (0+255),w,b
  4088  0020D0  0100               	movlb	0	; () banked
  4089  0020D2  1179               	iorwf	(ldexp@value+1)& (0+255),w,b
  4090  0020D4  0100               	movlb	0	; () banked
  4091  0020D6  117A               	iorwf	(ldexp@value+2)& (0+255),w,b
  4092  0020D8  A4D8               	btfss	status,2,c
  4093  0020DA  D00A               	goto	l4344
  4094                           
  4095                           ; BSR set to: 0
  4096  0020DC  0E00               	movlw	0
  4097  0020DE  0100               	movlb	0	; () banked
  4098  0020E0  6F78               	movwf	?_ldexp& (0+255),b
  4099  0020E2  0E00               	movlw	0
  4100  0020E4  0100               	movlb	0	; () banked
  4101  0020E6  6F79               	movwf	(?_ldexp+1)& (0+255),b
  4102  0020E8  0E00               	movlw	0
  4103  0020EA  0100               	movlb	0	; () banked
  4104  0020EC  6F7A               	movwf	(?_ldexp+2)& (0+255),b
  4105                           
  4106                           ; BSR set to: 0
  4107  0020EE  0012               	return	
  4108  0020F0                     l4344:
  4109                           
  4110                           ; BSR set to: 0
  4111  0020F0  0100               	movlb	0	; () banked
  4112  0020F2  517A               	movf	(ldexp@value+2)& (0+255),w,b
  4113  0020F4  0B7F               	andlw	127
  4114  0020F6  0100               	movlb	0	; () banked
  4115  0020F8  6F7D               	movwf	??_ldexp& (0+255),b
  4116  0020FA  6B7E               	clrf	(??_ldexp+1)& (0+255),b
  4117  0020FC  90D8               	bcf	status,0,c
  4118  0020FE  0100               	movlb	0	; () banked
  4119  002100  377D               	rlcf	??_ldexp& (0+255),f,b
  4120  002102  377E               	rlcf	(??_ldexp+1)& (0+255),f,b
  4121  002104  0100               	movlb	0	; () banked
  4122  002106  517D               	movf	??_ldexp& (0+255),w,b
  4123  002108  0100               	movlb	0	; () banked
  4124  00210A  277B               	addwf	ldexp@newexp& (0+255),f,b
  4125  00210C  0100               	movlb	0	; () banked
  4126  00210E  517E               	movf	(??_ldexp+1)& (0+255),w,b
  4127  002110  0100               	movlb	0	; () banked
  4128  002112  237C               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4129  002114  0100               	movlb	0	; () banked
  4130  002116  AF79               	btfss	(ldexp@value+1)& (0+255),7,b
  4131  002118  D004               	goto	u5190
  4132  00211A  0100               	movlb	0	; () banked
  4133  00211C  6B7D               	clrf	??_ldexp& (0+255),b
  4134  00211E  2B7D               	incf	??_ldexp& (0+255),f,b
  4135  002120  D002               	goto	u5198
  4136  002122                     u5190:
  4137  002122  0100               	movlb	0	; () banked
  4138  002124  6B7D               	clrf	??_ldexp& (0+255),b
  4139  002126                     u5198:
  4140  002126  0100               	movlb	0	; () banked
  4141  002128  517D               	movf	??_ldexp& (0+255),w,b
  4142  00212A  0100               	movlb	0	; () banked
  4143  00212C  277B               	addwf	ldexp@newexp& (0+255),f,b
  4144  00212E  0E00               	movlw	0
  4145  002130  237C               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4146  002132  0100               	movlb	0	; () banked
  4147  002134  AF7C               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4148  002136  D00E               	goto	l4352
  4149                           
  4150                           ; BSR set to: 0
  4151  002138  0E00               	movlw	0
  4152  00213A  6E3C               	movwf	_errno+1,c
  4153  00213C  0E22               	movlw	34
  4154  00213E  6E3B               	movwf	_errno,c
  4155  002140  0E00               	movlw	0
  4156  002142  0100               	movlb	0	; () banked
  4157  002144  6F78               	movwf	?_ldexp& (0+255),b
  4158  002146  0E00               	movlw	0
  4159  002148  0100               	movlb	0	; () banked
  4160  00214A  6F79               	movwf	(?_ldexp+1)& (0+255),b
  4161  00214C  0E00               	movlw	0
  4162  00214E                     L2:
  4163  00214E  0100               	movlb	0	; () banked
  4164  002150  6F7A               	movwf	(?_ldexp+2)& (0+255),b
  4165                           
  4166                           ; BSR set to: 0
  4167  002152  0012               	return	
  4168  002154                     l4352:
  4169                           
  4170                           ; BSR set to: 0
  4171  002154  0100               	movlb	0	; () banked
  4172  002156  BF7C               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  4173  002158  D01B               	goto	l4368
  4174  00215A  0100               	movlb	0	; () banked
  4175  00215C  057C               	decf	(ldexp@newexp+1)& (0+255),w,b
  4176  00215E  A0D8               	btfss	status,0,c
  4177  002160  D017               	goto	l4368
  4178                           
  4179                           ; BSR set to: 0
  4180  002162  0E00               	movlw	0
  4181  002164  6E3C               	movwf	_errno+1,c
  4182  002166  0E22               	movlw	34
  4183  002168  6E3B               	movwf	_errno,c
  4184                           
  4185                           ; BSR set to: 0
  4186  00216A  0100               	movlb	0	; () banked
  4187  00216C  AF7A               	btfss	(ldexp@value+2)& (0+255),7,b
  4188  00216E  D008               	goto	l4364
  4189                           
  4190                           ; BSR set to: 0
  4191  002170  0EFF               	movlw	255
  4192  002172  0100               	movlb	0	; () banked
  4193  002174  6F78               	movwf	?_ldexp& (0+255),b
  4194  002176  0E7F               	movlw	127
  4195  002178  0100               	movlb	0	; () banked
  4196  00217A  6F79               	movwf	(?_ldexp+1)& (0+255),b
  4197  00217C  0EFF               	movlw	255
  4198  00217E  D7E7               	goto	L2
  4199  002180                     l4364:
  4200                           
  4201                           ; BSR set to: 0
  4202  002180  0EFF               	movlw	255
  4203  002182  0100               	movlb	0	; () banked
  4204  002184  6F78               	movwf	?_ldexp& (0+255),b
  4205  002186  0E7F               	movlw	127
  4206  002188  0100               	movlb	0	; () banked
  4207  00218A  6F79               	movwf	(?_ldexp+1)& (0+255),b
  4208  00218C  0E7F               	movlw	127
  4209  00218E  D7DF               	goto	L2
  4210  002190                     l4368:
  4211                           
  4212                           ; BSR set to: 0
  4213  002190  0100               	movlb	0	; () banked
  4214  002192  357C               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4215  002194  317C               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4216  002196  0100               	movlb	0	; () banked
  4217  002198  6F7E               	movwf	(??_ldexp+1)& (0+255),b
  4218  00219A  0100               	movlb	0	; () banked
  4219  00219C  317B               	rrcf	ldexp@newexp& (0+255),w,b
  4220  00219E  0100               	movlb	0	; () banked
  4221  0021A0  6F7D               	movwf	??_ldexp& (0+255),b
  4222  0021A2  0100               	movlb	0	; () banked
  4223  0021A4  517A               	movf	(ldexp@value+2)& (0+255),w,b
  4224  0021A6  0100               	movlb	0	; () banked
  4225  0021A8  197D               	xorwf	??_ldexp& (0+255),w,b
  4226  0021AA  0B80               	andlw	-128
  4227  0021AC  197D               	xorwf	??_ldexp& (0+255),w,b
  4228  0021AE  0100               	movlb	0	; () banked
  4229  0021B0  6F7A               	movwf	(ldexp@value+2)& (0+255),b
  4230  0021B2  C07B  F07D         	movff	ldexp@newexp,??_ldexp
  4231  0021B6  0E01               	movlw	1
  4232  0021B8  0100               	movlb	0	; () banked
  4233  0021BA  177D               	andwf	??_ldexp& (0+255),f,b
  4234  0021BC  0100               	movlb	0	; () banked
  4235  0021BE  337D               	rrcf	??_ldexp& (0+255),f,b
  4236  0021C0  337D               	rrcf	??_ldexp& (0+255),f,b
  4237  0021C2  0100               	movlb	0	; () banked
  4238  0021C4  5179               	movf	(ldexp@value+1)& (0+255),w,b
  4239  0021C6  0100               	movlb	0	; () banked
  4240  0021C8  197D               	xorwf	??_ldexp& (0+255),w,b
  4241  0021CA  0B7F               	andlw	-129
  4242  0021CC  197D               	xorwf	??_ldexp& (0+255),w,b
  4243  0021CE  0100               	movlb	0	; () banked
  4244  0021D0  6F79               	movwf	(ldexp@value+1)& (0+255),b
  4245                           
  4246                           ; BSR set to: 0
  4247                           
  4248                           ; BSR set to: 0
  4249                           
  4250                           ; BSR set to: 0
  4251  0021D2  C078  F078         	movff	ldexp@value,?_ldexp
  4252  0021D6  C079  F079         	movff	ldexp@value+1,?_ldexp+1
  4253  0021DA  C07A  F07A         	movff	ldexp@value+2,?_ldexp+2
  4254  0021DE  0012               	return	
  4255  0021E0                     __end_of_ldexp:
  4256                           	opt stack 0
  4257                           tblptru	equ	0xFF8
  4258                           tblptrh	equ	0xFF7
  4259                           tblptrl	equ	0xFF6
  4260                           tablat	equ	0xFF5
  4261                           intcon	equ	0xFF2
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1l	equ	0xFE1
  4266                           status	equ	0xFD8
  4267                           
  4268 ;; *************** function _floor *****************
  4269 ;; Defined at:
  4270 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\floor.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;  x               3   21[BANK0 ] int 
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  i               3   24[BANK0 ] int 
  4275 ;;  expon           2   27[BANK0 ] int 
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  3   21[BANK0 ] int 
  4278 ;; Registers used:
  4279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4285 ;;      Params:         0       3       0       0       0       0       0
  4286 ;;      Locals:         0       5       0       0       0       0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0
  4288 ;;      Totals:         0       8       0       0       0       0       0
  4289 ;;Total ram usage:        8 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    4
  4292 ;; This function calls:
  4293 ;;		___altoft
  4294 ;;		___ftadd
  4295 ;;		___ftge
  4296 ;;		___fttol
  4297 ;;		_frexp
  4298 ;; This function is called by:
  4299 ;;		_exp
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text12
  4304  0021E0                     __ptext12:
  4305                           	opt stack 0
  4306  0021E0                     _floor:
  4307                           	opt stack 23
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;incstack = 0
  4311  0021E0  C075  F018         	movff	floor@x,frexp@value
  4312  0021E4  C076  F019         	movff	floor@x+1,frexp@value+1
  4313  0021E8  C077  F01A         	movff	floor@x+2,frexp@value+2
  4314  0021EC  0E7B               	movlw	low floor@expon
  4315  0021EE  6E1B               	movwf	frexp@eptr,c
  4316  0021F0  0E00               	movlw	high floor@expon
  4317  0021F2  6E1C               	movwf	frexp@eptr+1,c
  4318  0021F4  EC8B  F014         	call	_frexp	;wreg free
  4319  0021F8  0100               	movlb	0	; () banked
  4320  0021FA  AF7C               	btfss	(floor@expon+1)& (0+255),7,b
  4321  0021FC  D017               	goto	l4328
  4322                           
  4323                           ; BSR set to: 0
  4324  0021FE  0100               	movlb	0	; () banked
  4325  002200  AF77               	btfss	(floor@x+2)& (0+255),7,b
  4326  002202  D00A               	goto	l4324
  4327                           
  4328                           ; BSR set to: 0
  4329  002204  0E00               	movlw	0
  4330  002206  0100               	movlb	0	; () banked
  4331  002208  6F75               	movwf	?_floor& (0+255),b
  4332  00220A  0E80               	movlw	128
  4333  00220C  0100               	movlb	0	; () banked
  4334  00220E  6F76               	movwf	(?_floor+1)& (0+255),b
  4335  002210  0EBF               	movlw	191
  4336  002212  0100               	movlb	0	; () banked
  4337  002214  6F77               	movwf	(?_floor+2)& (0+255),b
  4338                           
  4339                           ; BSR set to: 0
  4340  002216  0012               	return	
  4341  002218                     l4324:
  4342                           
  4343                           ; BSR set to: 0
  4344  002218  0E00               	movlw	0
  4345  00221A  0100               	movlb	0	; () banked
  4346  00221C  6F75               	movwf	?_floor& (0+255),b
  4347  00221E  0E00               	movlw	0
  4348  002220  0100               	movlb	0	; () banked
  4349  002222  6F76               	movwf	(?_floor+1)& (0+255),b
  4350  002224  0E00               	movlw	0
  4351  002226  0100               	movlb	0	; () banked
  4352  002228  6F77               	movwf	(?_floor+2)& (0+255),b
  4353                           
  4354                           ; BSR set to: 0
  4355  00222A  0012               	return	
  4356  00222C                     l4328:
  4357                           
  4358                           ; BSR set to: 0
  4359  00222C  0100               	movlb	0	; () banked
  4360  00222E  517C               	movf	(floor@expon+1)& (0+255),w,b
  4361  002230  E105               	bnz	u5160
  4362  002232  0E15               	movlw	21
  4363  002234  0100               	movlb	0	; () banked
  4364  002236  5D7B               	subwf	floor@expon& (0+255),w,b
  4365  002238  A0D8               	btfss	status,0,c
  4366  00223A  D007               	goto	l4332
  4367  00223C                     u5160:
  4368                           
  4369                           ; BSR set to: 0
  4370  00223C  C075  F075         	movff	floor@x,?_floor
  4371  002240  C076  F076         	movff	floor@x+1,?_floor+1
  4372  002244  C077  F077         	movff	floor@x+2,?_floor+2
  4373  002248  0012               	return	
  4374  00224A                     l4332:
  4375                           
  4376                           ; BSR set to: 0
  4377  00224A  C075  F018         	movff	floor@x,___fttol@f1
  4378  00224E  C076  F019         	movff	floor@x+1,___fttol@f1+1
  4379  002252  C077  F01A         	movff	floor@x+2,___fttol@f1+2
  4380  002256  EC6A  F011         	call	___fttol	;wreg free
  4381  00225A  C018  F027         	movff	?___fttol,___altoft@c
  4382  00225E  C019  F028         	movff	?___fttol+1,___altoft@c+1
  4383  002262  C01A  F029         	movff	?___fttol+2,___altoft@c+2
  4384  002266  C01B  F02A         	movff	?___fttol+3,___altoft@c+3
  4385  00226A  ECEB  F015         	call	___altoft	;wreg free
  4386  00226E  C027  F078         	movff	?___altoft,floor@i
  4387  002272  C028  F079         	movff	?___altoft+1,floor@i+1
  4388  002276  C029  F07A         	movff	?___altoft+2,floor@i+2
  4389  00227A  C075  F06C         	movff	floor@x,___ftge@ff1
  4390  00227E  C076  F06D         	movff	floor@x+1,___ftge@ff1+1
  4391  002282  C077  F06E         	movff	floor@x+2,___ftge@ff1+2
  4392  002286  C078  F06F         	movff	floor@i,___ftge@ff2
  4393  00228A  C079  F070         	movff	floor@i+1,___ftge@ff2+1
  4394  00228E  C07A  F071         	movff	floor@i+2,___ftge@ff2+2
  4395  002292  ECBA  F012         	call	___ftge	;wreg free
  4396  002296  0100               	movlb	0	; () banked
  4397  002298  B0D8               	btfsc	status,0,c
  4398  00229A  D015               	goto	l1216
  4399                           
  4400                           ; BSR set to: 0
  4401  00229C  C078  F024         	movff	floor@i,___ftadd@f1
  4402  0022A0  C079  F025         	movff	floor@i+1,___ftadd@f1+1
  4403  0022A4  C07A  F026         	movff	floor@i+2,___ftadd@f1+2
  4404  0022A8  0E00               	movlw	0
  4405  0022AA  6E27               	movwf	___ftadd@f2,c
  4406  0022AC  0E80               	movlw	128
  4407  0022AE  6E28               	movwf	___ftadd@f2+1,c
  4408  0022B0  0EBF               	movlw	191
  4409  0022B2  6E29               	movwf	___ftadd@f2+2,c
  4410  0022B4  EC38  F00C         	call	___ftadd	;wreg free
  4411  0022B8  C024  F075         	movff	?___ftadd,?_floor
  4412  0022BC  C025  F076         	movff	?___ftadd+1,?_floor+1
  4413  0022C0  C026  F077         	movff	?___ftadd+2,?_floor+2
  4414  0022C4  0012               	return	
  4415  0022C6                     l1216:
  4416                           
  4417                           ; BSR set to: 0
  4418  0022C6  C078  F075         	movff	floor@i,?_floor
  4419  0022CA  C079  F076         	movff	floor@i+1,?_floor+1
  4420  0022CE  C07A  F077         	movff	floor@i+2,?_floor+2
  4421  0022D2  0012               	return		;funcret
  4422  0022D4                     __end_of_floor:
  4423                           	opt stack 0
  4424                           tblptru	equ	0xFF8
  4425                           tblptrh	equ	0xFF7
  4426                           tblptrl	equ	0xFF6
  4427                           tablat	equ	0xFF5
  4428                           intcon	equ	0xFF2
  4429                           postinc0	equ	0xFEE
  4430                           wreg	equ	0xFE8
  4431                           postdec1	equ	0xFE5
  4432                           fsr1l	equ	0xFE1
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function _frexp *****************
  4436 ;; Defined at:
  4437 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  value           3   23[COMRAM] int 
  4440 ;;  eptr            2   26[COMRAM] PTR int 
  4441 ;;		 -> log@exponent(2), floor@expon(2), 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;		None
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  3   23[COMRAM] PTR int 
  4446 ;; Registers used:
  4447 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4453 ;;      Params:         5       0       0       0       0       0       0
  4454 ;;      Locals:         0       0       0       0       0       0       0
  4455 ;;      Temps:          2       0       0       0       0       0       0
  4456 ;;      Totals:         7       0       0       0       0       0       0
  4457 ;;Total ram usage:        7 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    2
  4460 ;; This function calls:
  4461 ;;		Nothing
  4462 ;; This function is called by:
  4463 ;;		_floor
  4464 ;;		_log
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text13
  4469  002916                     __ptext13:
  4470                           	opt stack 0
  4471  002916                     _frexp:
  4472                           	opt stack 25
  4473                           
  4474                           ;incstack = 0
  4475  002916  5018               	movf	frexp@value,w,c
  4476  002918  1019               	iorwf	frexp@value+1,w,c
  4477  00291A  101A               	iorwf	frexp@value+2,w,c
  4478  00291C  A4D8               	btfss	status,2,c
  4479  00291E  D00F               	goto	l4220
  4480  002920  C01B  FFD9         	movff	frexp@eptr,fsr2l
  4481  002924  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  4482  002928  0E00               	movlw	0
  4483  00292A  6EDE               	movwf	postinc2,c
  4484  00292C  0E00               	movlw	0
  4485  00292E  6EDD               	movwf	postdec2,c
  4486  002930  0E00               	movlw	0
  4487  002932  6E18               	movwf	?_frexp,c
  4488  002934  0E00               	movlw	0
  4489  002936  6E19               	movwf	?_frexp+1,c
  4490  002938  0E00               	movlw	0
  4491  00293A  6E1A               	movwf	?_frexp+2,c
  4492  00293C  0012               	return	
  4493  00293E                     l4220:
  4494  00293E  501A               	movf	frexp@value+2,w,c
  4495  002940  0B7F               	andlw	127
  4496  002942  6E1D               	movwf	??_frexp& (0+255),c
  4497  002944  6A1E               	clrf	(??_frexp+1)& (0+255),c
  4498  002946  90D8               	bcf	status,0,c
  4499  002948  361D               	rlcf	??_frexp,f,c
  4500  00294A  361E               	rlcf	??_frexp+1,f,c
  4501  00294C  C01B  FFD9         	movff	frexp@eptr,fsr2l
  4502  002950  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  4503  002954  C01D  FFDE         	movff	??_frexp,postinc2
  4504  002958  C01E  FFDD         	movff	??_frexp+1,postdec2
  4505  00295C  AE19               	btfss	frexp@value+1,7,c
  4506  00295E  D003               	goto	u5020
  4507  002960  6A1D               	clrf	??_frexp& (0+255),c
  4508  002962  2A1D               	incf	??_frexp& (0+255),f,c
  4509  002964  D001               	goto	u5028
  4510  002966                     u5020:
  4511  002966  6A1D               	clrf	??_frexp& (0+255),c
  4512  002968                     u5028:
  4513  002968  501D               	movf	??_frexp,w,c
  4514  00296A  C01B  FFD9         	movff	frexp@eptr,fsr2l
  4515  00296E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  4516  002972  12DE               	iorwf	postinc2,f,c
  4517  002974  0E00               	movlw	0
  4518  002976  12DD               	iorwf	postdec2,f,c
  4519  002978  C01B  FFD9         	movff	frexp@eptr,fsr2l
  4520  00297C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  4521  002980  0E82               	movlw	130
  4522  002982  26DE               	addwf	postinc2,f,c
  4523  002984  0EFF               	movlw	255
  4524  002986  22DD               	addwfc	postdec2,f,c
  4525  002988  801A               	bsf	frexp@value+2,0,c
  4526  00298A  821A               	bsf	frexp@value+2,1,c
  4527  00298C  841A               	bsf	frexp@value+2,2,c
  4528  00298E  861A               	bsf	frexp@value+2,3,c
  4529  002990  881A               	bsf	frexp@value+2,4,c
  4530  002992  8A1A               	bsf	frexp@value+2,5,c
  4531  002994  9C1A               	bcf	frexp@value+2,6,c
  4532  002996  9E19               	bcf	frexp@value+1,7,c
  4533  002998  C018  F018         	movff	frexp@value,?_frexp
  4534  00299C  C019  F019         	movff	frexp@value+1,?_frexp+1
  4535  0029A0  C01A  F01A         	movff	frexp@value+2,?_frexp+2
  4536  0029A4  0012               	return	
  4537  0029A6                     __end_of_frexp:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           intcon	equ	0xFF2
  4544                           postinc0	equ	0xFEE
  4545                           wreg	equ	0xFE8
  4546                           postdec1	equ	0xFE5
  4547                           fsr1l	equ	0xFE1
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function ___altoft *****************
  4555 ;; Defined at:
  4556 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  c               4   38[COMRAM] long 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  sign            1   47[COMRAM] unsigned char 
  4561 ;;  exp             1   46[COMRAM] unsigned char 
  4562 ;; Return value:  Size  Location     Type
  4563 ;;                  3   38[COMRAM] float 
  4564 ;; Registers used:
  4565 ;;		wreg, status,2, status,0, cstack
  4566 ;; Tracked objects:
  4567 ;;		On entry : 0/0
  4568 ;;		On exit  : 0/0
  4569 ;;		Unchanged: 0/0
  4570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4571 ;;      Params:         4       0       0       0       0       0       0
  4572 ;;      Locals:         2       0       0       0       0       0       0
  4573 ;;      Temps:          4       0       0       0       0       0       0
  4574 ;;      Totals:        10       0       0       0       0       0       0
  4575 ;;Total ram usage:       10 bytes
  4576 ;; Hardware stack levels used:    1
  4577 ;; Hardware stack levels required when called:    3
  4578 ;; This function calls:
  4579 ;;		___ftpack
  4580 ;; This function is called by:
  4581 ;;		_floor
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text14
  4586  002BD6                     __ptext14:
  4587                           	opt stack 0
  4588  002BD6                     ___altoft:
  4589                           	opt stack 23
  4590                           
  4591                           ;incstack = 0
  4592  002BD6  0E00               	movlw	0
  4593  002BD8  6E30               	movwf	___altoft@sign,c
  4594  002BDA  0E8E               	movlw	142
  4595  002BDC  6E2F               	movwf	___altoft@exp,c
  4596  002BDE  AE2A               	btfss	___altoft@c+3,7,c
  4597  002BE0  D011               	goto	l4024
  4598  002BE2  1E2A               	comf	___altoft@c+3,f,c
  4599  002BE4  1E29               	comf	___altoft@c+2,f,c
  4600  002BE6  1E28               	comf	___altoft@c+1,f,c
  4601  002BE8  6C27               	negf	___altoft@c,c
  4602  002BEA  0E00               	movlw	0
  4603  002BEC  2228               	addwfc	___altoft@c+1,f,c
  4604  002BEE  2229               	addwfc	___altoft@c+2,f,c
  4605  002BF0  222A               	addwfc	___altoft@c+3,f,c
  4606  002BF2  0E01               	movlw	1
  4607  002BF4  6E30               	movwf	___altoft@sign,c
  4608  002BF6  D006               	goto	l4024
  4609  002BF8                     l4022:
  4610  002BF8  90D8               	bcf	status,0,c
  4611  002BFA  322A               	rrcf	___altoft@c+3,f,c
  4612  002BFC  3229               	rrcf	___altoft@c+2,f,c
  4613  002BFE  3228               	rrcf	___altoft@c+1,f,c
  4614  002C00  3227               	rrcf	___altoft@c,f,c
  4615  002C02  2A2F               	incf	___altoft@exp,f,c
  4616  002C04                     l4024:
  4617  002C04  0E00               	movlw	0
  4618  002C06  1427               	andwf	___altoft@c,w,c
  4619  002C08  6E2B               	movwf	??___altoft& (0+255),c
  4620  002C0A  0E00               	movlw	0
  4621  002C0C  1428               	andwf	___altoft@c+1,w,c
  4622  002C0E  6E2C               	movwf	(??___altoft+1)& (0+255),c
  4623  002C10  0E00               	movlw	0
  4624  002C12  1429               	andwf	___altoft@c+2,w,c
  4625  002C14  6E2D               	movwf	(??___altoft+2)& (0+255),c
  4626  002C16  0EFF               	movlw	255
  4627  002C18  142A               	andwf	___altoft@c+3,w,c
  4628  002C1A  6E2E               	movwf	(??___altoft+3)& (0+255),c
  4629  002C1C  502B               	movf	??___altoft,w,c
  4630  002C1E  102C               	iorwf	??___altoft+1,w,c
  4631  002C20  102D               	iorwf	??___altoft+2,w,c
  4632  002C22  102E               	iorwf	??___altoft+3,w,c
  4633  002C24  A4D8               	btfss	status,2,c
  4634  002C26  D7E8               	goto	l4022
  4635  002C28  C027  F018         	movff	___altoft@c,___ftpack@arg
  4636  002C2C  C028  F019         	movff	___altoft@c+1,___ftpack@arg+1
  4637  002C30  C029  F01A         	movff	___altoft@c+2,___ftpack@arg+2
  4638  002C34  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
  4639  002C38  C030  F01C         	movff	___altoft@sign,___ftpack@sign
  4640  002C3C  ECDE  F013         	call	___ftpack	;wreg free
  4641  002C40  C018  F027         	movff	?___ftpack,?___altoft
  4642  002C44  C019  F028         	movff	?___ftpack+1,?___altoft+1
  4643  002C48  C01A  F029         	movff	?___ftpack+2,?___altoft+2
  4644  002C4C  0012               	return	
  4645  002C4E                     __end_of___altoft:
  4646                           	opt stack 0
  4647                           tblptru	equ	0xFF8
  4648                           tblptrh	equ	0xFF7
  4649                           tblptrl	equ	0xFF6
  4650                           tablat	equ	0xFF5
  4651                           intcon	equ	0xFF2
  4652                           postinc0	equ	0xFEE
  4653                           wreg	equ	0xFE8
  4654                           postdec1	equ	0xFE5
  4655                           fsr1l	equ	0xFE1
  4656                           postinc2	equ	0xFDE
  4657                           postdec2	equ	0xFDD
  4658                           fsr2h	equ	0xFDA
  4659                           fsr2l	equ	0xFD9
  4660                           status	equ	0xFD8
  4661                           
  4662 ;; *************** function ___ftsub *****************
  4663 ;; Defined at:
  4664 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;  f1              3    0[BANK0 ] float 
  4667 ;;  f2              3    3[BANK0 ] float 
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  3    0[BANK0 ] float 
  4672 ;; Registers used:
  4673 ;;		wreg, status,2, status,0, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4679 ;;      Params:         0       6       0       0       0       0       0
  4680 ;;      Locals:         0       0       0       0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0
  4682 ;;      Totals:         0       6       0       0       0       0       0
  4683 ;;Total ram usage:        6 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    4
  4686 ;; This function calls:
  4687 ;;		___ftadd
  4688 ;; This function is called by:
  4689 ;;		_sqrt
  4690 ;;		_exp
  4691 ;;		_sprintf
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text15
  4696  002DDA                     __ptext15:
  4697                           	opt stack 0
  4698  002DDA                     ___ftsub:
  4699                           	opt stack 24
  4700                           
  4701                           ;incstack = 0
  4702  002DDA  0100               	movlb	0	; () banked
  4703  002DDC  5163               	movf	___ftsub@f2& (0+255),w,b
  4704  002DDE  0100               	movlb	0	; () banked
  4705  002DE0  1164               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4706  002DE2  0100               	movlb	0	; () banked
  4707  002DE4  1165               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4708  002DE6  B4D8               	btfsc	status,2,c
  4709  002DE8  D009               	goto	l4288
  4710                           
  4711                           ; BSR set to: 0
  4712  002DEA  0E00               	movlw	0
  4713  002DEC  0100               	movlb	0	; () banked
  4714  002DEE  1B63               	xorwf	___ftsub@f2& (0+255),f,b
  4715  002DF0  0E00               	movlw	0
  4716  002DF2  0100               	movlb	0	; () banked
  4717  002DF4  1B64               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4718  002DF6  0E80               	movlw	128
  4719  002DF8  0100               	movlb	0	; () banked
  4720  002DFA  1B65               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4721  002DFC                     l4288:
  4722                           
  4723                           ; BSR set to: 0
  4724  002DFC  C060  F024         	movff	___ftsub@f1,___ftadd@f1
  4725  002E00  C061  F025         	movff	___ftsub@f1+1,___ftadd@f1+1
  4726  002E04  C062  F026         	movff	___ftsub@f1+2,___ftadd@f1+2
  4727  002E08  C063  F027         	movff	___ftsub@f2,___ftadd@f2
  4728  002E0C  C064  F028         	movff	___ftsub@f2+1,___ftadd@f2+1
  4729  002E10  C065  F029         	movff	___ftsub@f2+2,___ftadd@f2+2
  4730  002E14  EC38  F00C         	call	___ftadd	;wreg free
  4731  002E18  C024  F060         	movff	?___ftadd,?___ftsub
  4732  002E1C  C025  F061         	movff	?___ftadd+1,?___ftsub+1
  4733  002E20  C026  F062         	movff	?___ftadd+2,?___ftsub+2
  4734  002E24  0012               	return	
  4735  002E26                     __end_of___ftsub:
  4736                           	opt stack 0
  4737                           tblptru	equ	0xFF8
  4738                           tblptrh	equ	0xFF7
  4739                           tblptrl	equ	0xFF6
  4740                           tablat	equ	0xFF5
  4741                           intcon	equ	0xFF2
  4742                           postinc0	equ	0xFEE
  4743                           wreg	equ	0xFE8
  4744                           postdec1	equ	0xFE5
  4745                           fsr1l	equ	0xFE1
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           fsr2h	equ	0xFDA
  4749                           fsr2l	equ	0xFD9
  4750                           status	equ	0xFD8
  4751                           
  4752 ;; *************** function ___awtoft *****************
  4753 ;; Defined at:
  4754 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  c               2   31[COMRAM] int 
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;  sign            1   34[COMRAM] unsigned char 
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  3   31[COMRAM] float 
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0, cstack
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4768 ;;      Params:         3       0       0       0       0       0       0
  4769 ;;      Locals:         1       0       0       0       0       0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0
  4771 ;;      Totals:         4       0       0       0       0       0       0
  4772 ;;Total ram usage:        4 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    3
  4775 ;; This function calls:
  4776 ;;		___ftpack
  4777 ;; This function is called by:
  4778 ;;		_computeAngle
  4779 ;;		_exp
  4780 ;;		_log
  4781 ;; This function uses a non-reentrant model
  4782 ;;
  4783                           
  4784                           	psect	text16
  4785  002E26                     __ptext16:
  4786                           	opt stack 0
  4787  002E26                     ___awtoft:
  4788                           	opt stack 24
  4789                           
  4790                           ;incstack = 0
  4791  002E26  0E00               	movlw	0
  4792  002E28  6E23               	movwf	___awtoft@sign,c
  4793  002E2A  AE21               	btfss	___awtoft@c+1,7,c
  4794  002E2C  D006               	goto	l4306
  4795  002E2E  6C20               	negf	___awtoft@c,c
  4796  002E30  1E21               	comf	___awtoft@c+1,f,c
  4797  002E32  B0D8               	btfsc	status,0,c
  4798  002E34  2A21               	incf	___awtoft@c+1,f,c
  4799  002E36  0E01               	movlw	1
  4800  002E38  6E23               	movwf	___awtoft@sign,c
  4801  002E3A                     l4306:
  4802  002E3A  C020  F018         	movff	___awtoft@c,___ftpack@arg
  4803  002E3E  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
  4804  002E42  6A1A               	clrf	___ftpack@arg+2,c
  4805  002E44  0E8E               	movlw	142
  4806  002E46  6E1B               	movwf	___ftpack@exp,c
  4807  002E48  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
  4808  002E4C  ECDE  F013         	call	___ftpack	;wreg free
  4809  002E50  C018  F020         	movff	?___ftpack,?___awtoft
  4810  002E54  C019  F021         	movff	?___ftpack+1,?___awtoft+1
  4811  002E58  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
  4812  002E5C  0012               	return	
  4813  002E5E                     __end_of___awtoft:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           intcon	equ	0xFF2
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           fsr1l	equ	0xFE1
  4824                           postinc2	equ	0xFDE
  4825                           postdec2	equ	0xFDD
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function ___lltoft *****************
  4831 ;; Defined at:
  4832 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  c               4   31[COMRAM] unsigned long 
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;  exp             1   39[COMRAM] unsigned char 
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  3   31[COMRAM] float 
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4846 ;;      Params:         4       0       0       0       0       0       0
  4847 ;;      Locals:         1       0       0       0       0       0       0
  4848 ;;      Temps:          4       0       0       0       0       0       0
  4849 ;;      Totals:         9       0       0       0       0       0       0
  4850 ;;Total ram usage:        9 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    3
  4853 ;; This function calls:
  4854 ;;		___ftpack
  4855 ;; This function is called by:
  4856 ;;		_computeAngle
  4857 ;;		_pow
  4858 ;;		_sprintf
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text17
  4863  002D28                     __ptext17:
  4864                           	opt stack 0
  4865  002D28                     ___lltoft:
  4866                           	opt stack 25
  4867                           
  4868                           ;incstack = 0
  4869  002D28  0E8E               	movlw	142
  4870  002D2A  6E28               	movwf	___lltoft@exp,c
  4871  002D2C  D006               	goto	l4412
  4872  002D2E                     l4410:
  4873  002D2E  90D8               	bcf	status,0,c
  4874  002D30  3223               	rrcf	___lltoft@c+3,f,c
  4875  002D32  3222               	rrcf	___lltoft@c+2,f,c
  4876  002D34  3221               	rrcf	___lltoft@c+1,f,c
  4877  002D36  3220               	rrcf	___lltoft@c,f,c
  4878  002D38  2A28               	incf	___lltoft@exp,f,c
  4879  002D3A                     l4412:
  4880  002D3A  0E00               	movlw	0
  4881  002D3C  1420               	andwf	___lltoft@c,w,c
  4882  002D3E  6E24               	movwf	??___lltoft& (0+255),c
  4883  002D40  0E00               	movlw	0
  4884  002D42  1421               	andwf	___lltoft@c+1,w,c
  4885  002D44  6E25               	movwf	(??___lltoft+1)& (0+255),c
  4886  002D46  0E00               	movlw	0
  4887  002D48  1422               	andwf	___lltoft@c+2,w,c
  4888  002D4A  6E26               	movwf	(??___lltoft+2)& (0+255),c
  4889  002D4C  0EFF               	movlw	255
  4890  002D4E  1423               	andwf	___lltoft@c+3,w,c
  4891  002D50  6E27               	movwf	(??___lltoft+3)& (0+255),c
  4892  002D52  5024               	movf	??___lltoft,w,c
  4893  002D54  1025               	iorwf	??___lltoft+1,w,c
  4894  002D56  1026               	iorwf	??___lltoft+2,w,c
  4895  002D58  1027               	iorwf	??___lltoft+3,w,c
  4896  002D5A  A4D8               	btfss	status,2,c
  4897  002D5C  D7E8               	goto	l4410
  4898  002D5E  C020  F018         	movff	___lltoft@c,___ftpack@arg
  4899  002D62  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
  4900  002D66  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
  4901  002D6A  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
  4902  002D6E  0E00               	movlw	0
  4903  002D70  6E1C               	movwf	___ftpack@sign,c
  4904  002D72  ECDE  F013         	call	___ftpack	;wreg free
  4905  002D76  C018  F020         	movff	?___ftpack,?___lltoft
  4906  002D7A  C019  F021         	movff	?___ftpack+1,?___lltoft+1
  4907  002D7E  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
  4908  002D82  0012               	return	
  4909  002D84                     __end_of___lltoft:
  4910                           	opt stack 0
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           intcon	equ	0xFF2
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           postdec1	equ	0xFE5
  4919                           fsr1l	equ	0xFE1
  4920                           postinc2	equ	0xFDE
  4921                           postdec2	equ	0xFDD
  4922                           fsr2h	equ	0xFDA
  4923                           fsr2l	equ	0xFD9
  4924                           status	equ	0xFD8
  4925                           
  4926 ;; *************** function _getGyroY *****************
  4927 ;; Defined at:
  4928 ;;		line 76 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\MPU-6050.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  data            2   33[COMRAM] int 
  4933 ;;  dataL           2   31[COMRAM] int 
  4934 ;;  dataH           2   29[COMRAM] int 
  4935 ;; Return value:  Size  Location     Type
  4936 ;;                  2   25[COMRAM] int 
  4937 ;; Registers used:
  4938 ;;		wreg, status,2, status,0, cstack
  4939 ;; Tracked objects:
  4940 ;;		On entry : 0/0
  4941 ;;		On exit  : 0/0
  4942 ;;		Unchanged: 0/0
  4943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4944 ;;      Params:         2       0       0       0       0       0       0
  4945 ;;      Locals:         6       0       0       0       0       0       0
  4946 ;;      Temps:          2       0       0       0       0       0       0
  4947 ;;      Totals:        10       0       0       0       0       0       0
  4948 ;;Total ram usage:       10 bytes
  4949 ;; Hardware stack levels used:    1
  4950 ;; Hardware stack levels required when called:    4
  4951 ;; This function calls:
  4952 ;;		_ReadI2C
  4953 ;;		_WriteI2C
  4954 ;; This function is called by:
  4955 ;;		_computeAngle
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text18
  4960  0029A6                     __ptext18:
  4961                           	opt stack 0
  4962  0029A6                     _getGyroY:
  4963                           	opt stack 25
  4964                           
  4965                           ;MPU-6050.c: 77: signed int dataH,dataL;
  4966                           ;MPU-6050.c: 78: signed int data;
  4967                           ;MPU-6050.c: 79: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  4968                           
  4969                           ;incstack = 0
  4970  0029A6  80C5               	bsf	4037,0,c	;volatile
  4971  0029A8                     l213:
  4972  0029A8  B0C5               	btfsc	4037,0,c	;volatile
  4973  0029AA  D7FE               	goto	l213
  4974                           
  4975                           ;MPU-6050.c: 80: WriteI2C(0xD0);
  4976  0029AC  0ED0               	movlw	208
  4977  0029AE  EC47  F017         	call	_WriteI2C
  4978                           
  4979                           ;MPU-6050.c: 81: WriteI2C(0x45);
  4980  0029B2  0E45               	movlw	69
  4981  0029B4  EC47  F017         	call	_WriteI2C
  4982                           
  4983                           ;MPU-6050.c: 82: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  4984  0029B8  82C5               	bsf	4037,1,c	;volatile
  4985  0029BA                     l216:
  4986  0029BA  B2C5               	btfsc	4037,1,c	;volatile
  4987  0029BC  D7FE               	goto	l216
  4988                           
  4989                           ;MPU-6050.c: 83: WriteI2C(0xD0+1);
  4990  0029BE  0ED1               	movlw	209
  4991  0029C0  EC47  F017         	call	_WriteI2C
  4992                           
  4993                           ;MPU-6050.c: 84: dataH=ReadI2C();
  4994  0029C4  ECA8  F017         	call	_ReadI2C	;wreg free
  4995  0029C8  6E1C               	movwf	??_getGyroY& (0+255),c
  4996  0029CA  501C               	movf	??_getGyroY,w,c
  4997  0029CC  6E1E               	movwf	getGyroY@dataH,c
  4998  0029CE  6A1F               	clrf	getGyroY@dataH+1,c
  4999                           
  5000                           ;MPU-6050.c: 85: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  5001  0029D0  8AC5               	bsf	4037,5,c	;volatile
  5002  0029D2  88C5               	bsf	4037,4,c	;volatile
  5003  0029D4                     l219:
  5004  0029D4  B8C5               	btfsc	4037,4,c	;volatile
  5005  0029D6  D7FE               	goto	l219
  5006                           
  5007                           ;MPU-6050.c: 86: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5008  0029D8  84C5               	bsf	4037,2,c	;volatile
  5009  0029DA                     l222:
  5010  0029DA  B4C5               	btfsc	4037,2,c	;volatile
  5011  0029DC  D7FE               	goto	l222
  5012                           
  5013                           ;MPU-6050.c: 88: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  5014  0029DE  80C5               	bsf	4037,0,c	;volatile
  5015  0029E0                     l225:
  5016  0029E0  B0C5               	btfsc	4037,0,c	;volatile
  5017  0029E2  D7FE               	goto	l225
  5018                           
  5019                           ;MPU-6050.c: 89: WriteI2C(0xD0);
  5020  0029E4  0ED0               	movlw	208
  5021  0029E6  EC47  F017         	call	_WriteI2C
  5022                           
  5023                           ;MPU-6050.c: 90: WriteI2C(0x46);
  5024  0029EA  0E46               	movlw	70
  5025  0029EC  EC47  F017         	call	_WriteI2C
  5026                           
  5027                           ;MPU-6050.c: 91: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  5028  0029F0  82C5               	bsf	4037,1,c	;volatile
  5029  0029F2                     l228:
  5030  0029F2  B2C5               	btfsc	4037,1,c	;volatile
  5031  0029F4  D7FE               	goto	l228
  5032                           
  5033                           ;MPU-6050.c: 92: WriteI2C(0xD0+1);
  5034  0029F6  0ED1               	movlw	209
  5035  0029F8  EC47  F017         	call	_WriteI2C
  5036                           
  5037                           ;MPU-6050.c: 93: dataL=ReadI2C();
  5038  0029FC  ECA8  F017         	call	_ReadI2C	;wreg free
  5039  002A00  6E1C               	movwf	??_getGyroY& (0+255),c
  5040  002A02  501C               	movf	??_getGyroY,w,c
  5041  002A04  6E20               	movwf	getGyroY@dataL,c
  5042  002A06  6A21               	clrf	getGyroY@dataL+1,c
  5043                           
  5044                           ;MPU-6050.c: 94: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  5045  002A08  8AC5               	bsf	4037,5,c	;volatile
  5046  002A0A  88C5               	bsf	4037,4,c	;volatile
  5047  002A0C                     l231:
  5048  002A0C  B8C5               	btfsc	4037,4,c	;volatile
  5049  002A0E  D7FE               	goto	l231
  5050                           
  5051                           ;MPU-6050.c: 95: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5052  002A10  84C5               	bsf	4037,2,c	;volatile
  5053  002A12                     l234:
  5054  002A12  B4C5               	btfsc	4037,2,c	;volatile
  5055  002A14  D7FE               	goto	l234
  5056                           
  5057                           ;MPU-6050.c: 96: data=(dataH<<8)|dataL;
  5058  002A16  501E               	movf	getGyroY@dataH,w,c
  5059  002A18  6E1D               	movwf	(??_getGyroY+1)& (0+255),c
  5060  002A1A  6A1C               	clrf	??_getGyroY& (0+255),c
  5061  002A1C  5020               	movf	getGyroY@dataL,w,c
  5062  002A1E  101C               	iorwf	??_getGyroY,w,c
  5063  002A20  6E22               	movwf	getGyroY@data,c
  5064  002A22  5021               	movf	getGyroY@dataL+1,w,c
  5065  002A24  101D               	iorwf	??_getGyroY+1,w,c
  5066  002A26  6E23               	movwf	getGyroY@data+1,c
  5067                           
  5068                           ;MPU-6050.c: 97: return data;
  5069  002A28  C022  F01A         	movff	getGyroY@data,?_getGyroY
  5070  002A2C  C023  F01B         	movff	getGyroY@data+1,?_getGyroY+1
  5071  002A30  0012               	return	
  5072  002A32                     __end_of_getGyroY:
  5073                           	opt stack 0
  5074                           tblptru	equ	0xFF8
  5075                           tblptrh	equ	0xFF7
  5076                           tblptrl	equ	0xFF6
  5077                           tablat	equ	0xFF5
  5078                           intcon	equ	0xFF2
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           postdec1	equ	0xFE5
  5082                           fsr1l	equ	0xFE1
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _getAccelZ *****************
  5090 ;; Defined at:
  5091 ;;		line 148 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\MPU-6050.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;		None
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  data            2   33[COMRAM] int 
  5096 ;;  dataL           2   31[COMRAM] int 
  5097 ;;  dataH           2   29[COMRAM] int 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  2   25[COMRAM] int 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5107 ;;      Params:         2       0       0       0       0       0       0
  5108 ;;      Locals:         6       0       0       0       0       0       0
  5109 ;;      Temps:          2       0       0       0       0       0       0
  5110 ;;      Totals:        10       0       0       0       0       0       0
  5111 ;;Total ram usage:       10 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:    4
  5114 ;; This function calls:
  5115 ;;		_ReadI2C
  5116 ;;		_WriteI2C
  5117 ;; This function is called by:
  5118 ;;		_computeAngle
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text19
  5123  002A32                     __ptext19:
  5124                           	opt stack 0
  5125  002A32                     _getAccelZ:
  5126                           	opt stack 25
  5127                           
  5128                           ;MPU-6050.c: 149: signed int dataH,dataL;
  5129                           ;MPU-6050.c: 150: signed int data;
  5130                           ;MPU-6050.c: 151: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  5131                           
  5132                           ;incstack = 0
  5133  002A32  80C5               	bsf	4037,0,c	;volatile
  5134  002A34                     l294:
  5135  002A34  B0C5               	btfsc	4037,0,c	;volatile
  5136  002A36  D7FE               	goto	l294
  5137                           
  5138                           ;MPU-6050.c: 152: WriteI2C(0xD0);
  5139  002A38  0ED0               	movlw	208
  5140  002A3A  EC47  F017         	call	_WriteI2C
  5141                           
  5142                           ;MPU-6050.c: 153: WriteI2C(0x3F);
  5143  002A3E  0E3F               	movlw	63
  5144  002A40  EC47  F017         	call	_WriteI2C
  5145                           
  5146                           ;MPU-6050.c: 154: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  5147  002A44  82C5               	bsf	4037,1,c	;volatile
  5148  002A46                     l297:
  5149  002A46  B2C5               	btfsc	4037,1,c	;volatile
  5150  002A48  D7FE               	goto	l297
  5151                           
  5152                           ;MPU-6050.c: 155: WriteI2C(0xD0+1);
  5153  002A4A  0ED1               	movlw	209
  5154  002A4C  EC47  F017         	call	_WriteI2C
  5155                           
  5156                           ;MPU-6050.c: 156: dataH=ReadI2C();
  5157  002A50  ECA8  F017         	call	_ReadI2C	;wreg free
  5158  002A54  6E1C               	movwf	??_getAccelZ& (0+255),c
  5159  002A56  501C               	movf	??_getAccelZ,w,c
  5160  002A58  6E1E               	movwf	getAccelZ@dataH,c
  5161  002A5A  6A1F               	clrf	getAccelZ@dataH+1,c
  5162                           
  5163                           ;MPU-6050.c: 157: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  5164  002A5C  8AC5               	bsf	4037,5,c	;volatile
  5165  002A5E  88C5               	bsf	4037,4,c	;volatile
  5166  002A60                     l300:
  5167  002A60  B8C5               	btfsc	4037,4,c	;volatile
  5168  002A62  D7FE               	goto	l300
  5169                           
  5170                           ;MPU-6050.c: 158: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5171  002A64  84C5               	bsf	4037,2,c	;volatile
  5172  002A66                     l303:
  5173  002A66  B4C5               	btfsc	4037,2,c	;volatile
  5174  002A68  D7FE               	goto	l303
  5175                           
  5176                           ;MPU-6050.c: 160: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  5177  002A6A  80C5               	bsf	4037,0,c	;volatile
  5178  002A6C                     l306:
  5179  002A6C  B0C5               	btfsc	4037,0,c	;volatile
  5180  002A6E  D7FE               	goto	l306
  5181                           
  5182                           ;MPU-6050.c: 161: WriteI2C(0xD0);
  5183  002A70  0ED0               	movlw	208
  5184  002A72  EC47  F017         	call	_WriteI2C
  5185                           
  5186                           ;MPU-6050.c: 162: WriteI2C(0x40);
  5187  002A76  0E40               	movlw	64
  5188  002A78  EC47  F017         	call	_WriteI2C
  5189                           
  5190                           ;MPU-6050.c: 163: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  5191  002A7C  82C5               	bsf	4037,1,c	;volatile
  5192  002A7E                     l309:
  5193  002A7E  B2C5               	btfsc	4037,1,c	;volatile
  5194  002A80  D7FE               	goto	l309
  5195                           
  5196                           ;MPU-6050.c: 164: WriteI2C(0xD0+1);
  5197  002A82  0ED1               	movlw	209
  5198  002A84  EC47  F017         	call	_WriteI2C
  5199                           
  5200                           ;MPU-6050.c: 165: dataL=ReadI2C();
  5201  002A88  ECA8  F017         	call	_ReadI2C	;wreg free
  5202  002A8C  6E1C               	movwf	??_getAccelZ& (0+255),c
  5203  002A8E  501C               	movf	??_getAccelZ,w,c
  5204  002A90  6E20               	movwf	getAccelZ@dataL,c
  5205  002A92  6A21               	clrf	getAccelZ@dataL+1,c
  5206                           
  5207                           ;MPU-6050.c: 166: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  5208  002A94  8AC5               	bsf	4037,5,c	;volatile
  5209  002A96  88C5               	bsf	4037,4,c	;volatile
  5210  002A98                     l312:
  5211  002A98  B8C5               	btfsc	4037,4,c	;volatile
  5212  002A9A  D7FE               	goto	l312
  5213                           
  5214                           ;MPU-6050.c: 167: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5215  002A9C  84C5               	bsf	4037,2,c	;volatile
  5216  002A9E                     l315:
  5217  002A9E  B4C5               	btfsc	4037,2,c	;volatile
  5218  002AA0  D7FE               	goto	l315
  5219                           
  5220                           ;MPU-6050.c: 168: data=(dataH<<8)|dataL;
  5221  002AA2  501E               	movf	getAccelZ@dataH,w,c
  5222  002AA4  6E1D               	movwf	(??_getAccelZ+1)& (0+255),c
  5223  002AA6  6A1C               	clrf	??_getAccelZ& (0+255),c
  5224  002AA8  5020               	movf	getAccelZ@dataL,w,c
  5225  002AAA  101C               	iorwf	??_getAccelZ,w,c
  5226  002AAC  6E22               	movwf	getAccelZ@data,c
  5227  002AAE  5021               	movf	getAccelZ@dataL+1,w,c
  5228  002AB0  101D               	iorwf	??_getAccelZ+1,w,c
  5229  002AB2  6E23               	movwf	getAccelZ@data+1,c
  5230                           
  5231                           ;MPU-6050.c: 169: return data;
  5232  002AB4  C022  F01A         	movff	getAccelZ@data,?_getAccelZ
  5233  002AB8  C023  F01B         	movff	getAccelZ@data+1,?_getAccelZ+1
  5234  002ABC  0012               	return	
  5235  002ABE                     __end_of_getAccelZ:
  5236                           	opt stack 0
  5237                           tblptru	equ	0xFF8
  5238                           tblptrh	equ	0xFF7
  5239                           tblptrl	equ	0xFF6
  5240                           tablat	equ	0xFF5
  5241                           intcon	equ	0xFF2
  5242                           postinc0	equ	0xFEE
  5243                           wreg	equ	0xFE8
  5244                           postdec1	equ	0xFE5
  5245                           fsr1l	equ	0xFE1
  5246                           postinc2	equ	0xFDE
  5247                           postdec2	equ	0xFDD
  5248                           fsr2h	equ	0xFDA
  5249                           fsr2l	equ	0xFD9
  5250                           status	equ	0xFD8
  5251                           
  5252 ;; *************** function _getAccelY *****************
  5253 ;; Defined at:
  5254 ;;		line 124 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\MPU-6050.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;  data            2   33[COMRAM] int 
  5259 ;;  dataL           2   31[COMRAM] int 
  5260 ;;  dataH           2   29[COMRAM] int 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  2   25[COMRAM] int 
  5263 ;; Registers used:
  5264 ;;		wreg, status,2, status,0, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5270 ;;      Params:         2       0       0       0       0       0       0
  5271 ;;      Locals:         6       0       0       0       0       0       0
  5272 ;;      Temps:          2       0       0       0       0       0       0
  5273 ;;      Totals:        10       0       0       0       0       0       0
  5274 ;;Total ram usage:       10 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:    4
  5277 ;; This function calls:
  5278 ;;		_ReadI2C
  5279 ;;		_WriteI2C
  5280 ;; This function is called by:
  5281 ;;		_computeAngle
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text20
  5286  002ABE                     __ptext20:
  5287                           	opt stack 0
  5288  002ABE                     _getAccelY:
  5289                           	opt stack 25
  5290                           
  5291                           ;MPU-6050.c: 125: signed int dataH,dataL;
  5292                           ;MPU-6050.c: 126: signed int data;
  5293                           ;MPU-6050.c: 127: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  5294                           
  5295                           ;incstack = 0
  5296  002ABE  80C5               	bsf	4037,0,c	;volatile
  5297  002AC0                     l267:
  5298  002AC0  B0C5               	btfsc	4037,0,c	;volatile
  5299  002AC2  D7FE               	goto	l267
  5300                           
  5301                           ;MPU-6050.c: 128: WriteI2C(0xD0);
  5302  002AC4  0ED0               	movlw	208
  5303  002AC6  EC47  F017         	call	_WriteI2C
  5304                           
  5305                           ;MPU-6050.c: 129: WriteI2C(0x3D);
  5306  002ACA  0E3D               	movlw	61
  5307  002ACC  EC47  F017         	call	_WriteI2C
  5308                           
  5309                           ;MPU-6050.c: 130: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  5310  002AD0  82C5               	bsf	4037,1,c	;volatile
  5311  002AD2                     l270:
  5312  002AD2  B2C5               	btfsc	4037,1,c	;volatile
  5313  002AD4  D7FE               	goto	l270
  5314                           
  5315                           ;MPU-6050.c: 131: WriteI2C(0xD0+1);
  5316  002AD6  0ED1               	movlw	209
  5317  002AD8  EC47  F017         	call	_WriteI2C
  5318                           
  5319                           ;MPU-6050.c: 132: dataH=ReadI2C();
  5320  002ADC  ECA8  F017         	call	_ReadI2C	;wreg free
  5321  002AE0  6E1C               	movwf	??_getAccelY& (0+255),c
  5322  002AE2  501C               	movf	??_getAccelY,w,c
  5323  002AE4  6E1E               	movwf	getAccelY@dataH,c
  5324  002AE6  6A1F               	clrf	getAccelY@dataH+1,c
  5325                           
  5326                           ;MPU-6050.c: 133: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  5327  002AE8  8AC5               	bsf	4037,5,c	;volatile
  5328  002AEA  88C5               	bsf	4037,4,c	;volatile
  5329  002AEC                     l273:
  5330  002AEC  B8C5               	btfsc	4037,4,c	;volatile
  5331  002AEE  D7FE               	goto	l273
  5332                           
  5333                           ;MPU-6050.c: 134: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5334  002AF0  84C5               	bsf	4037,2,c	;volatile
  5335  002AF2                     l276:
  5336  002AF2  B4C5               	btfsc	4037,2,c	;volatile
  5337  002AF4  D7FE               	goto	l276
  5338                           
  5339                           ;MPU-6050.c: 136: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  5340  002AF6  80C5               	bsf	4037,0,c	;volatile
  5341  002AF8                     l279:
  5342  002AF8  B0C5               	btfsc	4037,0,c	;volatile
  5343  002AFA  D7FE               	goto	l279
  5344                           
  5345                           ;MPU-6050.c: 137: WriteI2C(0xD0);
  5346  002AFC  0ED0               	movlw	208
  5347  002AFE  EC47  F017         	call	_WriteI2C
  5348                           
  5349                           ;MPU-6050.c: 138: WriteI2C(0x3E);
  5350  002B02  0E3E               	movlw	62
  5351  002B04  EC47  F017         	call	_WriteI2C
  5352                           
  5353                           ;MPU-6050.c: 139: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  5354  002B08  82C5               	bsf	4037,1,c	;volatile
  5355  002B0A                     l282:
  5356  002B0A  B2C5               	btfsc	4037,1,c	;volatile
  5357  002B0C  D7FE               	goto	l282
  5358                           
  5359                           ;MPU-6050.c: 140: WriteI2C(0xD0+1);
  5360  002B0E  0ED1               	movlw	209
  5361  002B10  EC47  F017         	call	_WriteI2C
  5362                           
  5363                           ;MPU-6050.c: 141: dataL=ReadI2C();
  5364  002B14  ECA8  F017         	call	_ReadI2C	;wreg free
  5365  002B18  6E1C               	movwf	??_getAccelY& (0+255),c
  5366  002B1A  501C               	movf	??_getAccelY,w,c
  5367  002B1C  6E20               	movwf	getAccelY@dataL,c
  5368  002B1E  6A21               	clrf	getAccelY@dataL+1,c
  5369                           
  5370                           ;MPU-6050.c: 142: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  5371  002B20  8AC5               	bsf	4037,5,c	;volatile
  5372  002B22  88C5               	bsf	4037,4,c	;volatile
  5373  002B24                     l285:
  5374  002B24  B8C5               	btfsc	4037,4,c	;volatile
  5375  002B26  D7FE               	goto	l285
  5376                           
  5377                           ;MPU-6050.c: 143: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5378  002B28  84C5               	bsf	4037,2,c	;volatile
  5379  002B2A                     l288:
  5380  002B2A  B4C5               	btfsc	4037,2,c	;volatile
  5381  002B2C  D7FE               	goto	l288
  5382                           
  5383                           ;MPU-6050.c: 144: data=(dataH<<8)|dataL;
  5384  002B2E  501E               	movf	getAccelY@dataH,w,c
  5385  002B30  6E1D               	movwf	(??_getAccelY+1)& (0+255),c
  5386  002B32  6A1C               	clrf	??_getAccelY& (0+255),c
  5387  002B34  5020               	movf	getAccelY@dataL,w,c
  5388  002B36  101C               	iorwf	??_getAccelY,w,c
  5389  002B38  6E22               	movwf	getAccelY@data,c
  5390  002B3A  5021               	movf	getAccelY@dataL+1,w,c
  5391  002B3C  101D               	iorwf	??_getAccelY+1,w,c
  5392  002B3E  6E23               	movwf	getAccelY@data+1,c
  5393                           
  5394                           ;MPU-6050.c: 145: return data;
  5395  002B40  C022  F01A         	movff	getAccelY@data,?_getAccelY
  5396  002B44  C023  F01B         	movff	getAccelY@data+1,?_getAccelY+1
  5397  002B48  0012               	return	
  5398  002B4A                     __end_of_getAccelY:
  5399                           	opt stack 0
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           intcon	equ	0xFF2
  5405                           postinc0	equ	0xFEE
  5406                           wreg	equ	0xFE8
  5407                           postdec1	equ	0xFE5
  5408                           fsr1l	equ	0xFE1
  5409                           postinc2	equ	0xFDE
  5410                           postdec2	equ	0xFDD
  5411                           fsr2h	equ	0xFDA
  5412                           fsr2l	equ	0xFD9
  5413                           status	equ	0xFD8
  5414                           
  5415 ;; *************** function _getAccelX *****************
  5416 ;; Defined at:
  5417 ;;		line 100 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\MPU-6050.c"
  5418 ;; Parameters:    Size  Location     Type
  5419 ;;		None
  5420 ;; Auto vars:     Size  Location     Type
  5421 ;;  data            2   33[COMRAM] int 
  5422 ;;  dataL           2   31[COMRAM] int 
  5423 ;;  dataH           2   29[COMRAM] int 
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  2   25[COMRAM] int 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2, status,0, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5433 ;;      Params:         2       0       0       0       0       0       0
  5434 ;;      Locals:         6       0       0       0       0       0       0
  5435 ;;      Temps:          2       0       0       0       0       0       0
  5436 ;;      Totals:        10       0       0       0       0       0       0
  5437 ;;Total ram usage:       10 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    4
  5440 ;; This function calls:
  5441 ;;		_ReadI2C
  5442 ;;		_WriteI2C
  5443 ;; This function is called by:
  5444 ;;		_computeAngle
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           	psect	text21
  5449  002B4A                     __ptext21:
  5450                           	opt stack 0
  5451  002B4A                     _getAccelX:
  5452                           	opt stack 25
  5453                           
  5454                           ;MPU-6050.c: 101: signed int dataH,dataL;
  5455                           ;MPU-6050.c: 102: signed int data;
  5456                           ;MPU-6050.c: 103: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  5457                           
  5458                           ;incstack = 0
  5459  002B4A  80C5               	bsf	4037,0,c	;volatile
  5460  002B4C                     l240:
  5461  002B4C  B0C5               	btfsc	4037,0,c	;volatile
  5462  002B4E  D7FE               	goto	l240
  5463                           
  5464                           ;MPU-6050.c: 104: WriteI2C(0xD0);
  5465  002B50  0ED0               	movlw	208
  5466  002B52  EC47  F017         	call	_WriteI2C
  5467                           
  5468                           ;MPU-6050.c: 105: WriteI2C(0x3B);
  5469  002B56  0E3B               	movlw	59
  5470  002B58  EC47  F017         	call	_WriteI2C
  5471                           
  5472                           ;MPU-6050.c: 106: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  5473  002B5C  82C5               	bsf	4037,1,c	;volatile
  5474  002B5E                     l243:
  5475  002B5E  B2C5               	btfsc	4037,1,c	;volatile
  5476  002B60  D7FE               	goto	l243
  5477                           
  5478                           ;MPU-6050.c: 107: WriteI2C(0xD0+1);
  5479  002B62  0ED1               	movlw	209
  5480  002B64  EC47  F017         	call	_WriteI2C
  5481                           
  5482                           ;MPU-6050.c: 108: dataH=ReadI2C();
  5483  002B68  ECA8  F017         	call	_ReadI2C	;wreg free
  5484  002B6C  6E1C               	movwf	??_getAccelX& (0+255),c
  5485  002B6E  501C               	movf	??_getAccelX,w,c
  5486  002B70  6E1E               	movwf	getAccelX@dataH,c
  5487  002B72  6A1F               	clrf	getAccelX@dataH+1,c
  5488                           
  5489                           ;MPU-6050.c: 109: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  5490  002B74  8AC5               	bsf	4037,5,c	;volatile
  5491  002B76  88C5               	bsf	4037,4,c	;volatile
  5492  002B78                     l246:
  5493  002B78  B8C5               	btfsc	4037,4,c	;volatile
  5494  002B7A  D7FE               	goto	l246
  5495                           
  5496                           ;MPU-6050.c: 110: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5497  002B7C  84C5               	bsf	4037,2,c	;volatile
  5498  002B7E                     l249:
  5499  002B7E  B4C5               	btfsc	4037,2,c	;volatile
  5500  002B80  D7FE               	goto	l249
  5501                           
  5502                           ;MPU-6050.c: 112: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  5503  002B82  80C5               	bsf	4037,0,c	;volatile
  5504  002B84                     l252:
  5505  002B84  B0C5               	btfsc	4037,0,c	;volatile
  5506  002B86  D7FE               	goto	l252
  5507                           
  5508                           ;MPU-6050.c: 113: WriteI2C(0xD0);
  5509  002B88  0ED0               	movlw	208
  5510  002B8A  EC47  F017         	call	_WriteI2C
  5511                           
  5512                           ;MPU-6050.c: 114: WriteI2C(0x3C);
  5513  002B8E  0E3C               	movlw	60
  5514  002B90  EC47  F017         	call	_WriteI2C
  5515                           
  5516                           ;MPU-6050.c: 115: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  5517  002B94  82C5               	bsf	4037,1,c	;volatile
  5518  002B96                     l255:
  5519  002B96  B2C5               	btfsc	4037,1,c	;volatile
  5520  002B98  D7FE               	goto	l255
  5521                           
  5522                           ;MPU-6050.c: 116: WriteI2C(0xD0+1);
  5523  002B9A  0ED1               	movlw	209
  5524  002B9C  EC47  F017         	call	_WriteI2C
  5525                           
  5526                           ;MPU-6050.c: 117: dataL=ReadI2C();
  5527  002BA0  ECA8  F017         	call	_ReadI2C	;wreg free
  5528  002BA4  6E1C               	movwf	??_getAccelX& (0+255),c
  5529  002BA6  501C               	movf	??_getAccelX,w,c
  5530  002BA8  6E20               	movwf	getAccelX@dataL,c
  5531  002BAA  6A21               	clrf	getAccelX@dataL+1,c
  5532                           
  5533                           ;MPU-6050.c: 118: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  5534  002BAC  8AC5               	bsf	4037,5,c	;volatile
  5535  002BAE  88C5               	bsf	4037,4,c	;volatile
  5536  002BB0                     l258:
  5537  002BB0  B8C5               	btfsc	4037,4,c	;volatile
  5538  002BB2  D7FE               	goto	l258
  5539                           
  5540                           ;MPU-6050.c: 119: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  5541  002BB4  84C5               	bsf	4037,2,c	;volatile
  5542  002BB6                     l261:
  5543  002BB6  B4C5               	btfsc	4037,2,c	;volatile
  5544  002BB8  D7FE               	goto	l261
  5545                           
  5546                           ;MPU-6050.c: 120: data=(dataH<<8)|dataL;
  5547  002BBA  501E               	movf	getAccelX@dataH,w,c
  5548  002BBC  6E1D               	movwf	(??_getAccelX+1)& (0+255),c
  5549  002BBE  6A1C               	clrf	??_getAccelX& (0+255),c
  5550  002BC0  5020               	movf	getAccelX@dataL,w,c
  5551  002BC2  101C               	iorwf	??_getAccelX,w,c
  5552  002BC4  6E22               	movwf	getAccelX@data,c
  5553  002BC6  5021               	movf	getAccelX@dataL+1,w,c
  5554  002BC8  101D               	iorwf	??_getAccelX+1,w,c
  5555  002BCA  6E23               	movwf	getAccelX@data+1,c
  5556                           
  5557                           ;MPU-6050.c: 121: return data;
  5558  002BCC  C022  F01A         	movff	getAccelX@data,?_getAccelX
  5559  002BD0  C023  F01B         	movff	getAccelX@data+1,?_getAccelX+1
  5560  002BD4  0012               	return	
  5561  002BD6                     __end_of_getAccelX:
  5562                           	opt stack 0
  5563                           tblptru	equ	0xFF8
  5564                           tblptrh	equ	0xFF7
  5565                           tblptrl	equ	0xFF6
  5566                           tablat	equ	0xFF5
  5567                           intcon	equ	0xFF2
  5568                           postinc0	equ	0xFEE
  5569                           wreg	equ	0xFE8
  5570                           postdec1	equ	0xFE5
  5571                           fsr1l	equ	0xFE1
  5572                           postinc2	equ	0xFDE
  5573                           postdec2	equ	0xFDD
  5574                           fsr2h	equ	0xFDA
  5575                           fsr2l	equ	0xFD9
  5576                           status	equ	0xFD8
  5577                           
  5578 ;; *************** function _WriteI2C *****************
  5579 ;; Defined at:
  5580 ;;		line 75 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\i2c.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  data_out        1    wreg     unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  data_out        1   24[COMRAM] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;                  1    wreg      unsigned char 
  5587 ;; Registers used:
  5588 ;;		wreg, status,2, status,0, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5594 ;;      Params:         0       0       0       0       0       0       0
  5595 ;;      Locals:         1       0       0       0       0       0       0
  5596 ;;      Temps:          0       0       0       0       0       0       0
  5597 ;;      Totals:         1       0       0       0       0       0       0
  5598 ;;Total ram usage:        1 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    3
  5601 ;; This function calls:
  5602 ;;		_IdleI2C
  5603 ;; This function is called by:
  5604 ;;		_sensorSetup
  5605 ;;		_getGyroY
  5606 ;;		_getAccelX
  5607 ;;		_getAccelY
  5608 ;;		_getAccelZ
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text22
  5613  002E8E                     __ptext22:
  5614                           	opt stack 0
  5615  002E8E                     _WriteI2C:
  5616                           	opt stack 26
  5617                           
  5618                           ;incstack = 0
  5619                           ;WriteI2C@data_out stored from wreg
  5620  002E8E  6E19               	movwf	WriteI2C@data_out,c
  5621                           
  5622                           ;i2c.c: 77: SSPBUF = data_out;
  5623  002E90  C019  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  5624                           
  5625                           ;i2c.c: 78: if ( SSPCON1bits.WCOL )
  5626  002E94  BEC6               	btfsc	4038,7,c	;volatile
  5627  002E96  0012               	return	
  5628                           
  5629                           ;i2c.c: 80: else
  5630                           ;i2c.c: 81: {
  5631                           ;i2c.c: 82: if( ((SSPCON1&0x0F)==0x08) || ((SSPCON1&0x0F)==0x0B) )
  5632                           
  5633                           ;i2c.c: 79: return ( -1 );
  5634                           ;	Return value of _WriteI2C is never used
  5635  002E98  50C6               	movf	4038,w,c	;volatile
  5636  002E9A  0B0F               	andlw	15
  5637  002E9C  0A08               	xorlw	8
  5638  002E9E  B4D8               	btfsc	status,2,c
  5639  002EA0  D005               	goto	l173
  5640  002EA2  50C6               	movf	4038,w,c	;volatile
  5641  002EA4  0B0F               	andlw	15
  5642  002EA6  0A0B               	xorlw	11
  5643  002EA8  A4D8               	btfss	status,2,c
  5644  002EAA  0012               	return	
  5645  002EAC                     l173:
  5646  002EAC  B0C7               	btfsc	4039,0,c	;volatile
  5647  002EAE  D7FE               	goto	l173
  5648                           
  5649                           ;i2c.c: 85: IdleI2C();
  5650  002EB0  ECB6  F017         	call	_IdleI2C	;wreg free
  5651                           
  5652                           ;i2c.c: 86: if ( SSPCON2bits.ACKSTAT )
  5653  002EB4  50C5               	movf	4037,w,c	;volatile
  5654                           
  5655                           ;i2c.c: 88: else return ( 0 );
  5656                           ;	Return value of _WriteI2C is never used
  5657                           
  5658                           ;i2c.c: 87: return ( -2 );
  5659                           ;	Return value of _WriteI2C is never used
  5660  002EB6  0012               	return	
  5661  002EB8                     __end_of_WriteI2C:
  5662                           	opt stack 0
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           intcon	equ	0xFF2
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           postdec1	equ	0xFE5
  5671                           fsr1l	equ	0xFE1
  5672                           postinc2	equ	0xFDE
  5673                           postdec2	equ	0xFDD
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8
  5677                           
  5678 ;; *************** function _IdleI2C *****************
  5679 ;; Defined at:
  5680 ;;		line 48 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\i2c.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5694 ;;      Params:         0       0       0       0       0       0       0
  5695 ;;      Locals:         0       0       0       0       0       0       0
  5696 ;;      Temps:          1       0       0       0       0       0       0
  5697 ;;      Totals:         1       0       0       0       0       0       0
  5698 ;;Total ram usage:        1 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    2
  5701 ;; This function calls:
  5702 ;;		Nothing
  5703 ;; This function is called by:
  5704 ;;		_WriteI2C
  5705 ;;		_sensorSetup
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text23
  5710  002F6C                     __ptext23:
  5711                           	opt stack 0
  5712  002F6C                     _IdleI2C:
  5713                           	opt stack 26
  5714  002F6C                     l4234:
  5715  002F6C  CFC5 F018          	movff	4037,??_IdleI2C	;volatile
  5716  002F70  0E1F               	movlw	31
  5717  002F72  1618               	andwf	??_IdleI2C,f,c
  5718  002F74  A4D8               	btfss	status,2,c
  5719  002F76  D7FA               	goto	l4234
  5720  002F78  A4C7               	btfss	4039,2,c	;volatile
  5721  002F7A  0012               	return	
  5722  002F7C  D7F7               	goto	l4234
  5723  002F7E                     __end_of_IdleI2C:
  5724                           	opt stack 0
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           intcon	equ	0xFF2
  5730                           postinc0	equ	0xFEE
  5731                           wreg	equ	0xFE8
  5732                           postdec1	equ	0xFE5
  5733                           fsr1l	equ	0xFE1
  5734                           postinc2	equ	0xFDE
  5735                           postdec2	equ	0xFDD
  5736                           fsr2h	equ	0xFDA
  5737                           fsr2l	equ	0xFD9
  5738                           status	equ	0xFD8
  5739                           
  5740 ;; *************** function _ReadI2C *****************
  5741 ;; Defined at:
  5742 ;;		line 67 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\i2c.c"
  5743 ;; Parameters:    Size  Location     Type
  5744 ;;		None
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;		None
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      unsigned char 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2, status,0
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5756 ;;      Params:         0       0       0       0       0       0       0
  5757 ;;      Locals:         0       0       0       0       0       0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0
  5759 ;;      Totals:         0       0       0       0       0       0       0
  5760 ;;Total ram usage:        0 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    2
  5763 ;; This function calls:
  5764 ;;		Nothing
  5765 ;; This function is called by:
  5766 ;;		_getGyroY
  5767 ;;		_getAccelX
  5768 ;;		_getAccelY
  5769 ;;		_getAccelZ
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           	psect	text24
  5774  002F50                     __ptext24:
  5775                           	opt stack 0
  5776  002F50                     _ReadI2C:
  5777                           	opt stack 26
  5778                           
  5779                           ;i2c.c: 69: if( ((SSPCON1&0x0F)==0x08) || ((SSPCON1&0x0F)==0x0B) )
  5780                           
  5781                           ;incstack = 0
  5782  002F50  50C6               	movf	4038,w,c	;volatile
  5783  002F52  0B0F               	andlw	15
  5784  002F54  0A08               	xorlw	8
  5785  002F56  B4D8               	btfsc	status,2,c
  5786  002F58  D004               	goto	l160
  5787  002F5A  50C6               	movf	4038,w,c	;volatile
  5788  002F5C  0B0F               	andlw	15
  5789  002F5E  0A0B               	xorlw	11
  5790  002F60  B4D8               	btfsc	status,2,c
  5791  002F62                     l160:
  5792                           
  5793                           ;i2c.c: 70: SSPCON2bits.RCEN = 1;
  5794  002F62  86C5               	bsf	4037,3,c	;volatile
  5795  002F64                     l161:
  5796  002F64  A0C7               	btfss	4039,0,c	;volatile
  5797  002F66  D7FE               	goto	l161
  5798                           
  5799                           ;i2c.c: 72: return ( SSPBUF );
  5800  002F68  50C9               	movf	4041,w,c	;volatile
  5801  002F6A  0012               	return	
  5802  002F6C                     __end_of_ReadI2C:
  5803                           	opt stack 0
  5804                           tblptru	equ	0xFF8
  5805                           tblptrh	equ	0xFF7
  5806                           tblptrl	equ	0xFF6
  5807                           tablat	equ	0xFF5
  5808                           intcon	equ	0xFF2
  5809                           postinc0	equ	0xFEE
  5810                           wreg	equ	0xFE8
  5811                           postdec1	equ	0xFE5
  5812                           fsr1l	equ	0xFE1
  5813                           postinc2	equ	0xFDE
  5814                           postdec2	equ	0xFDD
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _atan *****************
  5820 ;; Defined at:
  5821 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\atan.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  f               3   81[BANK0 ] unsigned char 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;  val             3   94[BANK0 ] unsigned char 
  5826 ;;  val_squared     3   91[BANK0 ] unsigned char 
  5827 ;;  x               3   87[BANK0 ] unsigned char 
  5828 ;;  y               3   84[BANK0 ] unsigned char 
  5829 ;;  recip           1   90[BANK0 ] unsigned char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  3   81[BANK0 ] unsigned char 
  5832 ;; Registers used:
  5833 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5839 ;;      Params:         0       3       0       0       0       0       0
  5840 ;;      Locals:         0      13       0       0       0       0       0
  5841 ;;      Temps:          0       0       0       0       0       0       0
  5842 ;;      Totals:         0      16       0       0       0       0       0
  5843 ;;Total ram usage:       16 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    5
  5846 ;; This function calls:
  5847 ;;		___ftadd
  5848 ;;		___ftdiv
  5849 ;;		___ftge
  5850 ;;		___ftmul
  5851 ;;		___ftneg
  5852 ;;		_eval_poly
  5853 ;;		_fabs
  5854 ;; This function is called by:
  5855 ;;		_computeAngle
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           	psect	text25
  5860  0014C8                     __ptext25:
  5861                           	opt stack 0
  5862  0014C8                     _atan:
  5863                           	opt stack 24
  5864                           
  5865                           ;incstack = 0
  5866  0014C8  C0B1  F023         	movff	atan@f,fabs@d
  5867  0014CC  C0B2  F024         	movff	atan@f+1,fabs@d+1
  5868  0014D0  C0B3  F025         	movff	atan@f+2,fabs@d+2
  5869  0014D4  EC2F  F017         	call	_fabs	;wreg free
  5870  0014D8  C023  F0BE         	movff	?_fabs,atan@val
  5871  0014DC  C024  F0BF         	movff	?_fabs+1,atan@val+1
  5872  0014E0  C025  F0C0         	movff	?_fabs+2,atan@val+2
  5873  0014E4  0100               	movlb	0	; () banked
  5874  0014E6  51BE               	movf	atan@val& (0+255),w,b
  5875  0014E8  0100               	movlb	0	; () banked
  5876  0014EA  11BF               	iorwf	(atan@val+1)& (0+255),w,b
  5877  0014EC  0100               	movlb	0	; () banked
  5878  0014EE  11C0               	iorwf	(atan@val+2)& (0+255),w,b
  5879  0014F0  A4D8               	btfss	status,2,c
  5880  0014F2  D00A               	goto	l4692
  5881                           
  5882                           ; BSR set to: 0
  5883  0014F4  0E00               	movlw	0
  5884  0014F6  0100               	movlb	0	; () banked
  5885  0014F8  6FB1               	movwf	?_atan& (0+255),b
  5886  0014FA  0E00               	movlw	0
  5887  0014FC  0100               	movlb	0	; () banked
  5888  0014FE  6FB2               	movwf	(?_atan+1)& (0+255),b
  5889  001500  0E00               	movlw	0
  5890  001502  0100               	movlb	0	; () banked
  5891  001504  6FB3               	movwf	(?_atan+2)& (0+255),b
  5892                           
  5893                           ; BSR set to: 0
  5894  001506  0012               	return	
  5895  001508                     l4692:
  5896                           
  5897                           ; BSR set to: 0
  5898  001508  0E00               	movlw	0
  5899  00150A  0100               	movlb	0	; () banked
  5900  00150C  6F6C               	movwf	___ftge@ff1& (0+255),b
  5901  00150E  0E80               	movlw	128
  5902  001510  0100               	movlb	0	; () banked
  5903  001512  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
  5904  001514  0E3F               	movlw	63
  5905  001516  0100               	movlb	0	; () banked
  5906  001518  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
  5907  00151A  C0BE  F06F         	movff	atan@val,___ftge@ff2
  5908  00151E  C0BF  F070         	movff	atan@val+1,___ftge@ff2+1
  5909  001522  C0C0  F071         	movff	atan@val+2,___ftge@ff2+2
  5910  001526  ECBA  F012         	call	___ftge	;wreg free
  5911  00152A  0100               	movlb	0	; () banked
  5912  00152C  B0D8               	btfsc	status,0,c
  5913  00152E  D002               	goto	u5850
  5914  001530  0E01               	movlw	1
  5915  001532  D001               	goto	u5860
  5916  001534                     u5850:
  5917  001534  0E00               	movlw	0
  5918  001536                     u5860:
  5919  001536  0100               	movlb	0	; () banked
  5920  001538  6FBA               	movwf	atan@recip& (0+255),b
  5921  00153A  0100               	movlb	0	; () banked
  5922  00153C  51BA               	movf	atan@recip& (0+255),w,b
  5923  00153E  B4D8               	btfsc	status,2,c
  5924  001540  D017               	goto	l667
  5925                           
  5926                           ; BSR set to: 0
  5927  001542  0E00               	movlw	0
  5928  001544  0100               	movlb	0	; () banked
  5929  001546  6F75               	movwf	___ftdiv@f1& (0+255),b
  5930  001548  0E80               	movlw	128
  5931  00154A  0100               	movlb	0	; () banked
  5932  00154C  6F76               	movwf	(___ftdiv@f1+1)& (0+255),b
  5933  00154E  0E3F               	movlw	63
  5934  001550  0100               	movlb	0	; () banked
  5935  001552  6F77               	movwf	(___ftdiv@f1+2)& (0+255),b
  5936  001554  C0BE  F078         	movff	atan@val,___ftdiv@f2
  5937  001558  C0BF  F079         	movff	atan@val+1,___ftdiv@f2+1
  5938  00155C  C0C0  F07A         	movff	atan@val+2,___ftdiv@f2+2
  5939  001560  EC8C  F00E         	call	___ftdiv	;wreg free
  5940  001564  C075  F0BE         	movff	?___ftdiv,atan@val
  5941  001568  C076  F0BF         	movff	?___ftdiv+1,atan@val+1
  5942  00156C  C077  F0C0         	movff	?___ftdiv+2,atan@val+2
  5943  001570                     l667:
  5944  001570  C0BE  F060         	movff	atan@val,___ftmul@f1
  5945  001574  C0BF  F061         	movff	atan@val+1,___ftmul@f1+1
  5946  001578  C0C0  F062         	movff	atan@val+2,___ftmul@f1+2
  5947  00157C  C0BE  F063         	movff	atan@val,___ftmul@f2
  5948  001580  C0BF  F064         	movff	atan@val+1,___ftmul@f2+1
  5949  001584  C0C0  F065         	movff	atan@val+2,___ftmul@f2+2
  5950  001588  ECE3  F00D         	call	___ftmul	;wreg free
  5951  00158C  C060  F0BB         	movff	?___ftmul,atan@val_squared
  5952  001590  C061  F0BC         	movff	?___ftmul+1,atan@val_squared+1
  5953  001594  C062  F0BD         	movff	?___ftmul+2,atan@val_squared+2
  5954  001598  C0BB  F06C         	movff	atan@val_squared,eval_poly@x
  5955  00159C  C0BC  F06D         	movff	atan@val_squared+1,eval_poly@x+1
  5956  0015A0  C0BD  F06E         	movff	atan@val_squared+2,eval_poly@x+2
  5957  0015A4  0EC5               	movlw	low atan@coeff_b
  5958  0015A6  0100               	movlb	0	; () banked
  5959  0015A8  6F6F               	movwf	eval_poly@d& (0+255),b
  5960  0015AA  0E06               	movlw	high atan@coeff_b
  5961  0015AC  0100               	movlb	0	; () banked
  5962  0015AE  6F70               	movwf	(eval_poly@d+1)& (0+255),b
  5963  0015B0  0E00               	movlw	0
  5964  0015B2  0100               	movlb	0	; () banked
  5965  0015B4  6F72               	movwf	(eval_poly@n+1)& (0+255),b
  5966  0015B6  0E04               	movlw	4
  5967  0015B8  6F71               	movwf	eval_poly@n& (0+255),b
  5968  0015BA  ECE4  F011         	call	_eval_poly	;wreg free
  5969  0015BE  C06C  F0B4         	movff	?_eval_poly,atan@y
  5970  0015C2  C06D  F0B5         	movff	?_eval_poly+1,atan@y+1
  5971  0015C6  C06E  F0B6         	movff	?_eval_poly+2,atan@y+2
  5972  0015CA  C0BB  F06C         	movff	atan@val_squared,eval_poly@x
  5973  0015CE  C0BC  F06D         	movff	atan@val_squared+1,eval_poly@x+1
  5974  0015D2  C0BD  F06E         	movff	atan@val_squared+2,eval_poly@x+2
  5975  0015D6  0EB3               	movlw	low atan@coeff_a
  5976  0015D8  0100               	movlb	0	; () banked
  5977  0015DA  6F6F               	movwf	eval_poly@d& (0+255),b
  5978  0015DC  0E06               	movlw	high atan@coeff_a
  5979  0015DE  0100               	movlb	0	; () banked
  5980  0015E0  6F70               	movwf	(eval_poly@d+1)& (0+255),b
  5981  0015E2  0E00               	movlw	0
  5982  0015E4  0100               	movlb	0	; () banked
  5983  0015E6  6F72               	movwf	(eval_poly@n+1)& (0+255),b
  5984  0015E8  0E05               	movlw	5
  5985  0015EA  6F71               	movwf	eval_poly@n& (0+255),b
  5986  0015EC  ECE4  F011         	call	_eval_poly	;wreg free
  5987  0015F0  C06C  F0B7         	movff	?_eval_poly,atan@x
  5988  0015F4  C06D  F0B8         	movff	?_eval_poly+1,atan@x+1
  5989  0015F8  C06E  F0B9         	movff	?_eval_poly+2,atan@x+2
  5990  0015FC  C0BE  F060         	movff	atan@val,___ftmul@f1
  5991  001600  C0BF  F061         	movff	atan@val+1,___ftmul@f1+1
  5992  001604  C0C0  F062         	movff	atan@val+2,___ftmul@f1+2
  5993  001608  C0B4  F078         	movff	atan@y,___ftdiv@f2
  5994  00160C  C0B5  F079         	movff	atan@y+1,___ftdiv@f2+1
  5995  001610  C0B6  F07A         	movff	atan@y+2,___ftdiv@f2+2
  5996  001614  C0B7  F075         	movff	atan@x,___ftdiv@f1
  5997  001618  C0B8  F076         	movff	atan@x+1,___ftdiv@f1+1
  5998  00161C  C0B9  F077         	movff	atan@x+2,___ftdiv@f1+2
  5999  001620  EC8C  F00E         	call	___ftdiv	;wreg free
  6000  001624  C075  F063         	movff	?___ftdiv,___ftmul@f2
  6001  001628  C076  F064         	movff	?___ftdiv+1,___ftmul@f2+1
  6002  00162C  C077  F065         	movff	?___ftdiv+2,___ftmul@f2+2
  6003  001630  ECE3  F00D         	call	___ftmul	;wreg free
  6004  001634  C060  F0BE         	movff	?___ftmul,atan@val
  6005  001638  C061  F0BF         	movff	?___ftmul+1,atan@val+1
  6006  00163C  C062  F0C0         	movff	?___ftmul+2,atan@val+2
  6007  001640  0100               	movlb	0	; () banked
  6008  001642  51BA               	movf	atan@recip& (0+255),w,b
  6009  001644  0100               	movlb	0	; () banked
  6010  001646  B4D8               	btfsc	status,2,c
  6011  001648  D01C               	goto	l4704
  6012                           
  6013                           ; BSR set to: 0
  6014  00164A  C0BE  F020         	movff	atan@val,___ftneg@f1
  6015  00164E  C0BF  F021         	movff	atan@val+1,___ftneg@f1+1
  6016  001652  C0C0  F022         	movff	atan@val+2,___ftneg@f1+2
  6017  001656  EC84  F017         	call	___ftneg	;wreg free
  6018  00165A  C020  F024         	movff	?___ftneg,___ftadd@f1
  6019  00165E  C021  F025         	movff	?___ftneg+1,___ftadd@f1+1
  6020  001662  C022  F026         	movff	?___ftneg+2,___ftadd@f1+2
  6021  001666  0E10               	movlw	16
  6022  001668  6E27               	movwf	___ftadd@f2,c
  6023  00166A  0EC9               	movlw	201
  6024  00166C  6E28               	movwf	___ftadd@f2+1,c
  6025  00166E  0E3F               	movlw	63
  6026  001670  6E29               	movwf	___ftadd@f2+2,c
  6027  001672  EC38  F00C         	call	___ftadd	;wreg free
  6028  001676  C024  F0BE         	movff	?___ftadd,atan@val
  6029  00167A  C025  F0BF         	movff	?___ftadd+1,atan@val+1
  6030  00167E  C026  F0C0         	movff	?___ftadd+2,atan@val+2
  6031  001682                     l4704:
  6032  001682  0100               	movlb	0	; () banked
  6033  001684  BFB3               	btfsc	(atan@f+2)& (0+255),7,b
  6034  001686  D007               	goto	l4708
  6035                           
  6036                           ; BSR set to: 0
  6037  001688  C0BE  F0B1         	movff	atan@val,?_atan
  6038  00168C  C0BF  F0B2         	movff	atan@val+1,?_atan+1
  6039  001690  C0C0  F0B3         	movff	atan@val+2,?_atan+2
  6040  001694  0012               	return	
  6041  001696                     l4708:
  6042                           
  6043                           ; BSR set to: 0
  6044  001696  C0BE  F020         	movff	atan@val,___ftneg@f1
  6045  00169A  C0BF  F021         	movff	atan@val+1,___ftneg@f1+1
  6046  00169E  C0C0  F022         	movff	atan@val+2,___ftneg@f1+2
  6047  0016A2  EC84  F017         	call	___ftneg	;wreg free
  6048  0016A6  C020  F0B1         	movff	?___ftneg,?_atan
  6049  0016AA  C021  F0B2         	movff	?___ftneg+1,?_atan+1
  6050  0016AE  C022  F0B3         	movff	?___ftneg+2,?_atan+2
  6051  0016B2  0012               	return	
  6052  0016B4                     __end_of_atan:
  6053                           	opt stack 0
  6054                           tblptru	equ	0xFF8
  6055                           tblptrh	equ	0xFF7
  6056                           tblptrl	equ	0xFF6
  6057                           tablat	equ	0xFF5
  6058                           intcon	equ	0xFF2
  6059                           postinc0	equ	0xFEE
  6060                           wreg	equ	0xFE8
  6061                           postdec1	equ	0xFE5
  6062                           fsr1l	equ	0xFE1
  6063                           postinc2	equ	0xFDE
  6064                           postdec2	equ	0xFDD
  6065                           fsr2h	equ	0xFDA
  6066                           fsr2l	equ	0xFD9
  6067                           status	equ	0xFD8
  6068                           
  6069 ;; *************** function _fabs *****************
  6070 ;; Defined at:
  6071 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fabs.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  d               3   34[COMRAM] unsigned char 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;		None
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  3   34[COMRAM] unsigned char 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2, status,0, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6085 ;;      Params:         3       0       0       0       0       0       0
  6086 ;;      Locals:         0       0       0       0       0       0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0
  6088 ;;      Totals:         3       0       0       0       0       0       0
  6089 ;;Total ram usage:        3 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    3
  6092 ;; This function calls:
  6093 ;;		___ftneg
  6094 ;; This function is called by:
  6095 ;;		_atan
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text26
  6100  002E5E                     __ptext26:
  6101                           	opt stack 0
  6102  002E5E                     _fabs:
  6103                           	opt stack 25
  6104                           
  6105                           ;incstack = 0
  6106  002E5E  AE25               	btfss	fabs@d+2,7,c
  6107  002E60  D00F               	goto	l745
  6108  002E62  C023  F020         	movff	fabs@d,___ftneg@f1
  6109  002E66  C024  F021         	movff	fabs@d+1,___ftneg@f1+1
  6110  002E6A  C025  F022         	movff	fabs@d+2,___ftneg@f1+2
  6111  002E6E  EC84  F017         	call	___ftneg	;wreg free
  6112  002E72  C020  F023         	movff	?___ftneg,?_fabs
  6113  002E76  C021  F024         	movff	?___ftneg+1,?_fabs+1
  6114  002E7A  C022  F025         	movff	?___ftneg+2,?_fabs+2
  6115  002E7E  0012               	return	
  6116  002E80                     l745:
  6117  002E80  C023  F023         	movff	fabs@d,?_fabs
  6118  002E84  C024  F024         	movff	fabs@d+1,?_fabs+1
  6119  002E88  C025  F025         	movff	fabs@d+2,?_fabs+2
  6120  002E8C  0012               	return		;funcret
  6121  002E8E                     __end_of_fabs:
  6122                           	opt stack 0
  6123                           tblptru	equ	0xFF8
  6124                           tblptrh	equ	0xFF7
  6125                           tblptrl	equ	0xFF6
  6126                           tablat	equ	0xFF5
  6127                           intcon	equ	0xFF2
  6128                           postinc0	equ	0xFEE
  6129                           wreg	equ	0xFE8
  6130                           postdec1	equ	0xFE5
  6131                           fsr1l	equ	0xFE1
  6132                           postinc2	equ	0xFDE
  6133                           postdec2	equ	0xFDD
  6134                           fsr2h	equ	0xFDA
  6135                           fsr2l	equ	0xFD9
  6136                           status	equ	0xFD8
  6137                           
  6138 ;; *************** function _eval_poly *****************
  6139 ;; Defined at:
  6140 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\evalpoly.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;  x               3   12[BANK0 ] unsigned char 
  6143 ;;  d               2   15[BANK0 ] PTR const 
  6144 ;;		 -> log@coeff(27), exp@coeff(30), atan@coeff_a(18), atan@coeff_b(15), 
  6145 ;;  n               2   17[BANK0 ] int 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  res             3   21[BANK0 ] int 
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  3   12[BANK0 ] int 
  6150 ;; Registers used:
  6151 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6157 ;;      Params:         0       7       0       0       0       0       0
  6158 ;;      Locals:         0       3       0       0       0       0       0
  6159 ;;      Temps:          0       2       0       0       0       0       0
  6160 ;;      Totals:         0      12       0       0       0       0       0
  6161 ;;Total ram usage:       12 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    4
  6164 ;; This function calls:
  6165 ;;		___ftadd
  6166 ;;		___ftmul
  6167 ;;		___wmul
  6168 ;; This function is called by:
  6169 ;;		_atan
  6170 ;;		_exp
  6171 ;;		_log
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           	psect	text27
  6176  0023C8                     __ptext27:
  6177                           	opt stack 0
  6178  0023C8                     _eval_poly:
  6179                           	opt stack 23
  6180                           
  6181                           ;incstack = 0
  6182  0023C8  C071  F018         	movff	eval_poly@n,___wmul@multiplier
  6183  0023CC  C072  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
  6184  0023D0  0E00               	movlw	0
  6185  0023D2  6E1B               	movwf	___wmul@multiplicand+1,c
  6186  0023D4  0E03               	movlw	3
  6187  0023D6  6E1A               	movwf	___wmul@multiplicand,c
  6188  0023D8  EC71  F017         	call	___wmul	;wreg free
  6189  0023DC  C06F  F073         	movff	eval_poly@d,??_eval_poly
  6190  0023E0  C070  F074         	movff	eval_poly@d+1,??_eval_poly+1
  6191  0023E4  5018               	movf	?___wmul,w,c
  6192  0023E6  0100               	movlb	0	; () banked
  6193  0023E8  2773               	addwf	??_eval_poly& (0+255),f,b
  6194  0023EA  5019               	movf	?___wmul+1,w,c
  6195  0023EC  0100               	movlb	0	; () banked
  6196  0023EE  2374               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6197  0023F0  C073  FFF6         	movff	??_eval_poly,tblptrl
  6198  0023F4  C074  FFF7         	movff	??_eval_poly+1,tblptrh
  6199  0023F8                     	if	0	;tblptru may be non-zero
  6200  0023F8                     	endif
  6201  0023F8                     	if	0	;tblptru may be non-zero
  6202  0023F8                     	endif
  6203  0023F8  0009               	tblrd		*+
  6204  0023FA  CFF5 F075          	movff	tablat,eval_poly@res
  6205  0023FE  0009               	tblrd		*+
  6206  002400  CFF5 F076          	movff	tablat,eval_poly@res+1
  6207  002404  000A               	tblrd		*-
  6208  002406  CFF5 F077          	movff	tablat,eval_poly@res+2
  6209  00240A  D041               	goto	l4296
  6210  00240C                     l4294:
  6211                           
  6212                           ; BSR set to: 0
  6213  00240C  C075  F063         	movff	eval_poly@res,___ftmul@f2
  6214  002410  C076  F064         	movff	eval_poly@res+1,___ftmul@f2+1
  6215  002414  C077  F065         	movff	eval_poly@res+2,___ftmul@f2+2
  6216  002418  C06C  F060         	movff	eval_poly@x,___ftmul@f1
  6217  00241C  C06D  F061         	movff	eval_poly@x+1,___ftmul@f1+1
  6218  002420  C06E  F062         	movff	eval_poly@x+2,___ftmul@f1+2
  6219  002424  ECE3  F00D         	call	___ftmul	;wreg free
  6220  002428  C060  F024         	movff	?___ftmul,___ftadd@f1
  6221  00242C  C061  F025         	movff	?___ftmul+1,___ftadd@f1+1
  6222  002430  C062  F026         	movff	?___ftmul+2,___ftadd@f1+2
  6223  002434  0E00               	movlw	0
  6224  002436  6E1B               	movwf	___wmul@multiplicand+1,c
  6225  002438  0E03               	movlw	3
  6226  00243A  6E1A               	movwf	___wmul@multiplicand,c
  6227  00243C  0100               	movlb	0	; () banked
  6228  00243E  0771               	decf	eval_poly@n& (0+255),f,b
  6229  002440  A0D8               	btfss	status,0,c
  6230  002442  0772               	decf	(eval_poly@n+1)& (0+255),f,b
  6231  002444  C071  F018         	movff	eval_poly@n,___wmul@multiplier
  6232  002448  C072  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
  6233  00244C  EC71  F017         	call	___wmul	;wreg free
  6234  002450  C06F  F073         	movff	eval_poly@d,??_eval_poly
  6235  002454  C070  F074         	movff	eval_poly@d+1,??_eval_poly+1
  6236  002458  5018               	movf	?___wmul,w,c
  6237  00245A  0100               	movlb	0	; () banked
  6238  00245C  2773               	addwf	??_eval_poly& (0+255),f,b
  6239  00245E  5019               	movf	?___wmul+1,w,c
  6240  002460  0100               	movlb	0	; () banked
  6241  002462  2374               	addwfc	(??_eval_poly+1)& (0+255),f,b
  6242  002464  C073  FFF6         	movff	??_eval_poly,tblptrl
  6243  002468  C074  FFF7         	movff	??_eval_poly+1,tblptrh
  6244  00246C                     	if	0	;tblptru may be non-zero
  6245  00246C                     	endif
  6246  00246C                     	if	0	;tblptru may be non-zero
  6247  00246C                     	endif
  6248  00246C  0009               	tblrd		*+
  6249  00246E  CFF5 F027          	movff	tablat,___ftadd@f2
  6250  002472  0009               	tblrd		*+
  6251  002474  CFF5 F028          	movff	tablat,___ftadd@f2+1
  6252  002478  000A               	tblrd		*-
  6253  00247A  CFF5 F029          	movff	tablat,___ftadd@f2+2
  6254  00247E  EC38  F00C         	call	___ftadd	;wreg free
  6255  002482  C024  F075         	movff	?___ftadd,eval_poly@res
  6256  002486  C025  F076         	movff	?___ftadd+1,eval_poly@res+1
  6257  00248A  C026  F077         	movff	?___ftadd+2,eval_poly@res+2
  6258  00248E                     l4296:
  6259  00248E  0100               	movlb	0	; () banked
  6260  002490  5171               	movf	eval_poly@n& (0+255),w,b
  6261  002492  0100               	movlb	0	; () banked
  6262  002494  1172               	iorwf	(eval_poly@n+1)& (0+255),w,b
  6263  002496  A4D8               	btfss	status,2,c
  6264  002498  D7B9               	goto	l4294
  6265                           
  6266                           ; BSR set to: 0
  6267  00249A  C075  F06C         	movff	eval_poly@res,?_eval_poly
  6268  00249E  C076  F06D         	movff	eval_poly@res+1,?_eval_poly+1
  6269  0024A2  C077  F06E         	movff	eval_poly@res+2,?_eval_poly+2
  6270                           
  6271                           ; BSR set to: 0
  6272  0024A6  0012               	return		;funcret
  6273  0024A8                     __end_of_eval_poly:
  6274                           	opt stack 0
  6275                           tblptru	equ	0xFF8
  6276                           tblptrh	equ	0xFF7
  6277                           tblptrl	equ	0xFF6
  6278                           tablat	equ	0xFF5
  6279                           intcon	equ	0xFF2
  6280                           postinc0	equ	0xFEE
  6281                           wreg	equ	0xFE8
  6282                           postdec1	equ	0xFE5
  6283                           fsr1l	equ	0xFE1
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function ___wmul *****************
  6291 ;; Defined at:
  6292 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  multiplier      2   23[COMRAM] unsigned int 
  6295 ;;  multiplicand    2   25[COMRAM] unsigned int 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  product         2   27[COMRAM] unsigned int 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  2   23[COMRAM] unsigned int 
  6300 ;; Registers used:
  6301 ;;		wreg, status,2, status,0, prodl, prodh
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6307 ;;      Params:         4       0       0       0       0       0       0
  6308 ;;      Locals:         2       0       0       0       0       0       0
  6309 ;;      Temps:          0       0       0       0       0       0       0
  6310 ;;      Totals:         6       0       0       0       0       0       0
  6311 ;;Total ram usage:        6 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; Hardware stack levels required when called:    2
  6314 ;; This function calls:
  6315 ;;		Nothing
  6316 ;; This function is called by:
  6317 ;;		_eval_poly
  6318 ;;		_sprintf
  6319 ;;		_scale
  6320 ;;		_fround
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text28
  6325  002EE2                     __ptext28:
  6326                           	opt stack 0
  6327  002EE2                     ___wmul:
  6328                           	opt stack 24
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;incstack = 0
  6332  002EE2  5018               	movf	___wmul@multiplier,w,c
  6333  002EE4  021A               	mulwf	___wmul@multiplicand,c
  6334  002EE6  CFF3 F01C          	movff	prodl,___wmul@product
  6335  002EEA  CFF4 F01D          	movff	prodh,___wmul@product+1
  6336  002EEE  5018               	movf	___wmul@multiplier,w,c
  6337  002EF0  021B               	mulwf	___wmul@multiplicand+1,c
  6338  002EF2  50F3               	movf	prodl,w,c
  6339  002EF4  261D               	addwf	___wmul@product+1,f,c
  6340  002EF6  5019               	movf	___wmul@multiplier+1,w,c
  6341  002EF8  021A               	mulwf	___wmul@multiplicand,c
  6342  002EFA  50F3               	movf	prodl,w,c
  6343  002EFC  261D               	addwf	___wmul@product+1,f,c
  6344  002EFE  C01C  F018         	movff	___wmul@product,?___wmul
  6345  002F02  C01D  F019         	movff	___wmul@product+1,?___wmul+1
  6346  002F06  0012               	return	
  6347  002F08                     __end_of___wmul:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           tblptrh	equ	0xFF7
  6351                           tblptrl	equ	0xFF6
  6352                           tablat	equ	0xFF5
  6353                           prodh	equ	0xFF4
  6354                           prodl	equ	0xFF3
  6355                           intcon	equ	0xFF2
  6356                           postinc0	equ	0xFEE
  6357                           wreg	equ	0xFE8
  6358                           postdec1	equ	0xFE5
  6359                           fsr1l	equ	0xFE1
  6360                           postinc2	equ	0xFDE
  6361                           postdec2	equ	0xFDD
  6362                           fsr2h	equ	0xFDA
  6363                           fsr2l	equ	0xFD9
  6364                           status	equ	0xFD8
  6365                           
  6366 ;; *************** function ___ftdiv *****************
  6367 ;; Defined at:
  6368 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;  f1              3   21[BANK0 ] float 
  6371 ;;  f2              3   24[BANK0 ] float 
  6372 ;; Auto vars:     Size  Location     Type
  6373 ;;  f3              3   31[BANK0 ] float 
  6374 ;;  sign            1   35[BANK0 ] unsigned char 
  6375 ;;  exp             1   34[BANK0 ] unsigned char 
  6376 ;;  cntr            1   30[BANK0 ] unsigned char 
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  3   21[BANK0 ] float 
  6379 ;; Registers used:
  6380 ;;		wreg, status,2, status,0, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6386 ;;      Params:         0       6       0       0       0       0       0
  6387 ;;      Locals:         0       6       0       0       0       0       0
  6388 ;;      Temps:          0       3       0       0       0       0       0
  6389 ;;      Totals:         0      15       0       0       0       0       0
  6390 ;;Total ram usage:       15 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    3
  6393 ;; This function calls:
  6394 ;;		___ftpack
  6395 ;; This function is called by:
  6396 ;;		_computeAngle
  6397 ;;		_atan
  6398 ;;		_exp
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402                           	psect	text29
  6403  001D18                     __ptext29:
  6404                           	opt stack 0
  6405  001D18                     ___ftdiv:
  6406                           	opt stack 24
  6407                           
  6408                           ;incstack = 0
  6409  001D18  C077  F07B         	movff	___ftdiv@f1+2,??___ftdiv
  6410  001D1C  0100               	movlb	0	; () banked
  6411  001D1E  6B7C               	clrf	(??___ftdiv+1)& (0+255),b
  6412  001D20  6B7D               	clrf	(??___ftdiv+2)& (0+255),b
  6413  001D22  0100               	movlb	0	; () banked
  6414  001D24  3576               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  6415  001D26  0100               	movlb	0	; () banked
  6416  001D28  377B               	rlcf	??___ftdiv& (0+255),f,b
  6417  001D2A  E301               	bnc	u5051
  6418  001D2C  817C               	bsf	(??___ftdiv+1)& (0+255),0,b
  6419  001D2E                     u5051:
  6420  001D2E  0100               	movlb	0	; () banked
  6421  001D30  517B               	movf	??___ftdiv& (0+255),w,b
  6422  001D32  0100               	movlb	0	; () banked
  6423  001D34  6F82               	movwf	___ftdiv@exp& (0+255),b
  6424  001D36  0100               	movlb	0	; () banked
  6425  001D38  5182               	movf	___ftdiv@exp& (0+255),w,b
  6426  001D3A  A4D8               	btfss	status,2,c
  6427  001D3C  D00A               	goto	l4244
  6428                           
  6429                           ; BSR set to: 0
  6430  001D3E  0E00               	movlw	0
  6431  001D40  0100               	movlb	0	; () banked
  6432  001D42  6F75               	movwf	?___ftdiv& (0+255),b
  6433  001D44  0E00               	movlw	0
  6434  001D46  0100               	movlb	0	; () banked
  6435  001D48  6F76               	movwf	(?___ftdiv+1)& (0+255),b
  6436  001D4A  0E00               	movlw	0
  6437  001D4C  0100               	movlb	0	; () banked
  6438  001D4E  6F77               	movwf	(?___ftdiv+2)& (0+255),b
  6439                           
  6440                           ; BSR set to: 0
  6441  001D50  0012               	return	
  6442  001D52                     l4244:
  6443                           
  6444                           ; BSR set to: 0
  6445  001D52  C07A  F07B         	movff	___ftdiv@f2+2,??___ftdiv
  6446  001D56  0100               	movlb	0	; () banked
  6447  001D58  6B7C               	clrf	(??___ftdiv+1)& (0+255),b
  6448  001D5A  6B7D               	clrf	(??___ftdiv+2)& (0+255),b
  6449  001D5C  0100               	movlb	0	; () banked
  6450  001D5E  3579               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  6451  001D60  0100               	movlb	0	; () banked
  6452  001D62  377B               	rlcf	??___ftdiv& (0+255),f,b
  6453  001D64  E301               	bnc	u5071
  6454  001D66  817C               	bsf	(??___ftdiv+1)& (0+255),0,b
  6455  001D68                     u5071:
  6456  001D68  0100               	movlb	0	; () banked
  6457  001D6A  517B               	movf	??___ftdiv& (0+255),w,b
  6458  001D6C  0100               	movlb	0	; () banked
  6459  001D6E  6F83               	movwf	___ftdiv@sign& (0+255),b
  6460  001D70  0100               	movlb	0	; () banked
  6461  001D72  5183               	movf	___ftdiv@sign& (0+255),w,b
  6462  001D74  A4D8               	btfss	status,2,c
  6463  001D76  D00A               	goto	l4250
  6464                           
  6465                           ; BSR set to: 0
  6466  001D78  0E00               	movlw	0
  6467  001D7A  0100               	movlb	0	; () banked
  6468  001D7C  6F75               	movwf	?___ftdiv& (0+255),b
  6469  001D7E  0E00               	movlw	0
  6470  001D80  0100               	movlb	0	; () banked
  6471  001D82  6F76               	movwf	(?___ftdiv+1)& (0+255),b
  6472  001D84  0E00               	movlw	0
  6473  001D86  0100               	movlb	0	; () banked
  6474  001D88  6F77               	movwf	(?___ftdiv+2)& (0+255),b
  6475                           
  6476                           ; BSR set to: 0
  6477  001D8A  0012               	return	
  6478  001D8C                     l4250:
  6479                           
  6480                           ; BSR set to: 0
  6481  001D8C  0E00               	movlw	0
  6482  001D8E  0100               	movlb	0	; () banked
  6483  001D90  6F7F               	movwf	___ftdiv@f3& (0+255),b
  6484  001D92  0E00               	movlw	0
  6485  001D94  0100               	movlb	0	; () banked
  6486  001D96  6F80               	movwf	(___ftdiv@f3+1)& (0+255),b
  6487  001D98  0E00               	movlw	0
  6488  001D9A  0100               	movlb	0	; () banked
  6489  001D9C  6F81               	movwf	(___ftdiv@f3+2)& (0+255),b
  6490                           
  6491                           ; BSR set to: 0
  6492  001D9E  0100               	movlb	0	; () banked
  6493  001DA0  5183               	movf	___ftdiv@sign& (0+255),w,b
  6494  001DA2  0F89               	addlw	137
  6495  001DA4  0100               	movlb	0	; () banked
  6496  001DA6  5F82               	subwf	___ftdiv@exp& (0+255),f,b
  6497                           
  6498                           ; BSR set to: 0
  6499  001DA8  C077  F083         	movff	___ftdiv@f1+2,___ftdiv@sign
  6500                           
  6501                           ; BSR set to: 0
  6502  001DAC  0100               	movlb	0	; () banked
  6503  001DAE  517A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6504  001DB0  0100               	movlb	0	; () banked
  6505  001DB2  1B83               	xorwf	___ftdiv@sign& (0+255),f,b
  6506                           
  6507                           ; BSR set to: 0
  6508  001DB4  0E80               	movlw	128
  6509  001DB6  0100               	movlb	0	; () banked
  6510  001DB8  1783               	andwf	___ftdiv@sign& (0+255),f,b
  6511                           
  6512                           ; BSR set to: 0
  6513  001DBA  0100               	movlb	0	; () banked
  6514  001DBC  8F76               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  6515                           
  6516                           ; BSR set to: 0
  6517  001DBE  0EFF               	movlw	255
  6518  001DC0  0100               	movlb	0	; () banked
  6519  001DC2  1775               	andwf	___ftdiv@f1& (0+255),f,b
  6520  001DC4  0EFF               	movlw	255
  6521  001DC6  0100               	movlb	0	; () banked
  6522  001DC8  1776               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  6523  001DCA  0E00               	movlw	0
  6524  001DCC  0100               	movlb	0	; () banked
  6525  001DCE  1777               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  6526                           
  6527                           ; BSR set to: 0
  6528  001DD0  0100               	movlb	0	; () banked
  6529  001DD2  8F79               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  6530                           
  6531                           ; BSR set to: 0
  6532  001DD4  0EFF               	movlw	255
  6533  001DD6  0100               	movlb	0	; () banked
  6534  001DD8  1778               	andwf	___ftdiv@f2& (0+255),f,b
  6535  001DDA  0EFF               	movlw	255
  6536  001DDC  0100               	movlb	0	; () banked
  6537  001DDE  1779               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  6538  001DE0  0E00               	movlw	0
  6539  001DE2  0100               	movlb	0	; () banked
  6540  001DE4  177A               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  6541                           
  6542                           ; BSR set to: 0
  6543  001DE6  0E18               	movlw	24
  6544  001DE8  0100               	movlb	0	; () banked
  6545  001DEA  6F7E               	movwf	___ftdiv@cntr& (0+255),b
  6546  001DEC                     l4270:
  6547                           
  6548                           ; BSR set to: 0
  6549  001DEC  0100               	movlb	0	; () banked
  6550  001DEE  90D8               	bcf	status,0,c
  6551  001DF0  377F               	rlcf	___ftdiv@f3& (0+255),f,b
  6552  001DF2  3780               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  6553  001DF4  3781               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  6554                           
  6555                           ; BSR set to: 0
  6556  001DF6  0100               	movlb	0	; () banked
  6557  001DF8  5178               	movf	___ftdiv@f2& (0+255),w,b
  6558  001DFA  0100               	movlb	0	; () banked
  6559  001DFC  5D75               	subwf	___ftdiv@f1& (0+255),w,b
  6560  001DFE  0100               	movlb	0	; () banked
  6561  001E00  5179               	movf	(___ftdiv@f2+1)& (0+255),w,b
  6562  001E02  0100               	movlb	0	; () banked
  6563  001E04  5976               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  6564  001E06  0100               	movlb	0	; () banked
  6565  001E08  517A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6566  001E0A  0100               	movlb	0	; () banked
  6567  001E0C  5977               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  6568  001E0E  A0D8               	btfss	status,0,c
  6569  001E10  D00E               	goto	l849
  6570                           
  6571                           ; BSR set to: 0
  6572  001E12  0100               	movlb	0	; () banked
  6573  001E14  5178               	movf	___ftdiv@f2& (0+255),w,b
  6574  001E16  0100               	movlb	0	; () banked
  6575  001E18  5F75               	subwf	___ftdiv@f1& (0+255),f,b
  6576  001E1A  0100               	movlb	0	; () banked
  6577  001E1C  5179               	movf	(___ftdiv@f2+1)& (0+255),w,b
  6578  001E1E  0100               	movlb	0	; () banked
  6579  001E20  5B76               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  6580  001E22  0100               	movlb	0	; () banked
  6581  001E24  517A               	movf	(___ftdiv@f2+2)& (0+255),w,b
  6582  001E26  0100               	movlb	0	; () banked
  6583  001E28  5B77               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  6584                           
  6585                           ; BSR set to: 0
  6586  001E2A  0100               	movlb	0	; () banked
  6587  001E2C  817F               	bsf	___ftdiv@f3& (0+255),0,b
  6588  001E2E                     l849:
  6589                           
  6590                           ; BSR set to: 0
  6591  001E2E  0100               	movlb	0	; () banked
  6592  001E30  90D8               	bcf	status,0,c
  6593  001E32  3775               	rlcf	___ftdiv@f1& (0+255),f,b
  6594  001E34  3776               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  6595  001E36  3777               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  6596                           
  6597                           ; BSR set to: 0
  6598  001E38  0100               	movlb	0	; () banked
  6599  001E3A  2F7E               	decfsz	___ftdiv@cntr& (0+255),f,b
  6600  001E3C  D7D7               	goto	l4270
  6601                           
  6602                           ; BSR set to: 0
  6603                           
  6604                           ; BSR set to: 0
  6605  001E3E  C07F  F018         	movff	___ftdiv@f3,___ftpack@arg
  6606  001E42  C080  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6607  001E46  C081  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6608  001E4A  C082  F01B         	movff	___ftdiv@exp,___ftpack@exp
  6609  001E4E  C083  F01C         	movff	___ftdiv@sign,___ftpack@sign
  6610  001E52  ECDE  F013         	call	___ftpack	;wreg free
  6611  001E56  C018  F075         	movff	?___ftpack,?___ftdiv
  6612  001E5A  C019  F076         	movff	?___ftpack+1,?___ftdiv+1
  6613  001E5E  C01A  F077         	movff	?___ftpack+2,?___ftdiv+2
  6614  001E62  0012               	return	
  6615  001E64                     __end_of___ftdiv:
  6616                           	opt stack 0
  6617                           tblptru	equ	0xFF8
  6618                           tblptrh	equ	0xFF7
  6619                           tblptrl	equ	0xFF6
  6620                           tablat	equ	0xFF5
  6621                           prodh	equ	0xFF4
  6622                           prodl	equ	0xFF3
  6623                           intcon	equ	0xFF2
  6624                           postinc0	equ	0xFEE
  6625                           wreg	equ	0xFE8
  6626                           postdec1	equ	0xFE5
  6627                           fsr1l	equ	0xFE1
  6628                           postinc2	equ	0xFDE
  6629                           postdec2	equ	0xFDD
  6630                           fsr2h	equ	0xFDA
  6631                           fsr2l	equ	0xFD9
  6632                           status	equ	0xFD8
  6633                           
  6634 ;; *************** function _DelayMs *****************
  6635 ;; Defined at:
  6636 ;;		line 11 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\delay.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;  cnt             1    wreg     unsigned char 
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;  cnt             1   23[COMRAM] unsigned char 
  6641 ;;  _dcnt           1   25[COMRAM] unsigned char 
  6642 ;;  i               1   24[COMRAM] unsigned char 
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg, status,2, status,0
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6652 ;;      Params:         0       0       0       0       0       0       0
  6653 ;;      Locals:         3       0       0       0       0       0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0
  6655 ;;      Totals:         3       0       0       0       0       0       0
  6656 ;;Total ram usage:        3 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    2
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_computeAngle
  6663 ;;		_main
  6664 ;;		_bluetoothTX_data
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text30
  6669  002EB8                     __ptext30:
  6670                           	opt stack 0
  6671  002EB8                     _DelayMs:
  6672                           	opt stack 27
  6673                           
  6674                           ;incstack = 0
  6675                           ;DelayMs@cnt stored from wreg
  6676  002EB8  6E18               	movwf	DelayMs@cnt,c
  6677                           
  6678                           ;delay.c: 12: unsigned char i;
  6679                           ;delay.c: 13: while (cnt--) {
  6680  002EBA  D00E               	goto	l4494
  6681  002EBC                     l4486:
  6682                           
  6683                           ;delay.c: 14: i=4;
  6684  002EBC  0E04               	movlw	4
  6685  002EBE  6E19               	movwf	DelayMs@i,c
  6686                           
  6687                           ;delay.c: 15: while(i--) {
  6688  002EC0  D007               	goto	l4492
  6689  002EC2                     l4488:
  6690  002EC2  0E77               	movlw	119
  6691  002EC4  6E1A               	movwf	DelayMs@_dcnt,c
  6692  002EC6  D002               	goto	l95
  6693  002EC8                     l96:
  6694  002EC8  F000               	nop		;# 
  6695  002ECA  F000               	nop		;# 
  6696  002ECC                     l95:
  6697  002ECC  2E1A               	decfsz	DelayMs@_dcnt,f,c
  6698  002ECE  D7FC               	goto	l96
  6699  002ED0                     l4492:
  6700  002ED0  0619               	decf	DelayMs@i,f,c
  6701  002ED2  2819               	incf	DelayMs@i,w,c
  6702  002ED4  A4D8               	btfss	status,2,c
  6703  002ED6  D7F5               	goto	l4488
  6704  002ED8                     l4494:
  6705  002ED8  0618               	decf	DelayMs@cnt,f,c
  6706  002EDA  2818               	incf	DelayMs@cnt,w,c
  6707  002EDC  B4D8               	btfsc	status,2,c
  6708  002EDE  0012               	return	
  6709  002EE0  D7ED               	goto	l4486
  6710  002EE2                     __end_of_DelayMs:
  6711                           	opt stack 0
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodh	equ	0xFF4
  6717                           prodl	equ	0xFF3
  6718                           intcon	equ	0xFF2
  6719                           postinc0	equ	0xFEE
  6720                           wreg	equ	0xFE8
  6721                           postdec1	equ	0xFE5
  6722                           fsr1l	equ	0xFE1
  6723                           postinc2	equ	0xFDE
  6724                           postdec2	equ	0xFDD
  6725                           fsr2h	equ	0xFDA
  6726                           fsr2l	equ	0xFD9
  6727                           status	equ	0xFD8
  6728                           
  6729 ;; *************** function _PWMSetup *****************
  6730 ;; Defined at:
  6731 ;;		line 1 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\PID&Motors.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;		None
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;		None
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      void 
  6738 ;; Registers used:
  6739 ;;		wreg, status,2
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6745 ;;      Params:         0       0       0       0       0       0       0
  6746 ;;      Locals:         0       0       0       0       0       0       0
  6747 ;;      Temps:          0       0       0       0       0       0       0
  6748 ;;      Totals:         0       0       0       0       0       0       0
  6749 ;;Total ram usage:        0 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    2
  6752 ;; This function calls:
  6753 ;;		Nothing
  6754 ;; This function is called by:
  6755 ;;		_main
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text31
  6760  002F90                     __ptext31:
  6761                           	opt stack 0
  6762  002F90                     _PWMSetup:
  6763                           	opt stack 28
  6764                           
  6765                           ;PID&Motors.c: 2: CCP1CON=0b00001111;
  6766                           
  6767                           ;incstack = 0
  6768  002F90  0E0F               	movlw	15
  6769  002F92  6EBD               	movwf	4029,c	;volatile
  6770                           
  6771                           ;PID&Motors.c: 3: T2CON= 0b00000100;
  6772  002F94  0E04               	movlw	4
  6773  002F96  6ECA               	movwf	4042,c	;volatile
  6774                           
  6775                           ;PID&Motors.c: 4: PR2= 255;
  6776  002F98  68CB               	setf	4043,c	;volatile
  6777  002F9A  0012               	return		;funcret
  6778  002F9C                     __end_of_PWMSetup:
  6779                           	opt stack 0
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           prodh	equ	0xFF4
  6785                           prodl	equ	0xFF3
  6786                           intcon	equ	0xFF2
  6787                           postinc0	equ	0xFEE
  6788                           wreg	equ	0xFE8
  6789                           postdec1	equ	0xFE5
  6790                           fsr1l	equ	0xFE1
  6791                           postinc2	equ	0xFDE
  6792                           postdec2	equ	0xFDD
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8
  6796                           
  6797 ;; *************** function _PIDupdate *****************
  6798 ;; Defined at:
  6799 ;;		line 7 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\PID&Motors.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;		None
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  Dterm           3   39[BANK0 ] float 
  6804 ;;  Iterm           3   36[BANK0 ] float 
  6805 ;;  Pterm           3   33[BANK0 ] float 
  6806 ;;  dt              3    0        float 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      void 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, status,0, cstack
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6816 ;;      Params:         0       0       0       0       0       0       0
  6817 ;;      Locals:         0      24       0       0       0       0       0
  6818 ;;      Temps:          0       0       0       0       0       0       0
  6819 ;;      Totals:         0      24       0       0       0       0       0
  6820 ;;Total ram usage:       24 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; Hardware stack levels required when called:    4
  6823 ;; This function calls:
  6824 ;;		___ftadd
  6825 ;;		___ftge
  6826 ;;		___ftmul
  6827 ;;		___ftneg
  6828 ;;		___fttol
  6829 ;; This function is called by:
  6830 ;;		_main
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text32
  6835  000D3A                     __ptext32:
  6836                           	opt stack 0
  6837  000D3A                     _PIDupdate:
  6838                           	opt stack 26
  6839                           
  6840                           ;PID&Motors.c: 8: static float precErrore = 0;
  6841                           ;PID&Motors.c: 9: static float sumErrore = 0;
  6842                           ;PID&Motors.c: 11: float Pterm, Iterm, Dterm;
  6843                           ;PID&Motors.c: 12: float dt;
  6844                           ;PID&Motors.c: 14: errore = offsetAngle - currentAngle;
  6845                           
  6846                           ;incstack = 0
  6847  000D3A  C0DD  F020         	movff	_currentAngle,___ftneg@f1
  6848  000D3E  C0DE  F021         	movff	_currentAngle+1,___ftneg@f1+1
  6849  000D42  C0DF  F022         	movff	_currentAngle+2,___ftneg@f1+2
  6850  000D46  EC84  F017         	call	___ftneg	;wreg free
  6851  000D4A  C020  F024         	movff	?___ftneg,___ftadd@f1
  6852  000D4E  C021  F025         	movff	?___ftneg+1,___ftadd@f1+1
  6853  000D52  C022  F026         	movff	?___ftneg+2,___ftadd@f1+2
  6854  000D56  C0E3  F027         	movff	_offsetAngle,___ftadd@f2
  6855  000D5A  C0E4  F028         	movff	_offsetAngle+1,___ftadd@f2+1
  6856  000D5E  C0E5  F029         	movff	_offsetAngle+2,___ftadd@f2+2
  6857  000D62  EC38  F00C         	call	___ftadd	;wreg free
  6858  000D66  C024  F0E0         	movff	?___ftadd,_errore
  6859  000D6A  C025  F0E1         	movff	?___ftadd+1,_errore+1
  6860  000D6E  C026  F0E2         	movff	?___ftadd+2,_errore+2
  6861                           
  6862                           ;PID&Motors.c: 16: Pterm = (float) kP * errore;
  6863  000D72  C044  F060         	movff	_kP,___ftmul@f1
  6864  000D76  C045  F061         	movff	_kP+1,___ftmul@f1+1
  6865  000D7A  C046  F062         	movff	_kP+2,___ftmul@f1+2
  6866  000D7E  C0E0  F063         	movff	_errore,___ftmul@f2
  6867  000D82  C0E1  F064         	movff	_errore+1,___ftmul@f2+1
  6868  000D86  C0E2  F065         	movff	_errore+2,___ftmul@f2+2
  6869  000D8A  ECE3  F00D         	call	___ftmul	;wreg free
  6870  000D8E  C060  F081         	movff	?___ftmul,PIDupdate@Pterm
  6871  000D92  C061  F082         	movff	?___ftmul+1,PIDupdate@Pterm+1
  6872  000D96  C062  F083         	movff	?___ftmul+2,PIDupdate@Pterm+2
  6873                           
  6874                           ;PID&Motors.c: 18: sumErrore += errore;
  6875  000D9A  C0D7  F024         	movff	PIDupdate@sumErrore,___ftadd@f1
  6876  000D9E  C0D8  F025         	movff	PIDupdate@sumErrore+1,___ftadd@f1+1
  6877  000DA2  C0D9  F026         	movff	PIDupdate@sumErrore+2,___ftadd@f1+2
  6878  000DA6  C0E0  F027         	movff	_errore,___ftadd@f2
  6879  000DAA  C0E1  F028         	movff	_errore+1,___ftadd@f2+1
  6880  000DAE  C0E2  F029         	movff	_errore+2,___ftadd@f2+2
  6881  000DB2  EC38  F00C         	call	___ftadd	;wreg free
  6882  000DB6  C024  F0D7         	movff	?___ftadd,PIDupdate@sumErrore
  6883  000DBA  C025  F0D8         	movff	?___ftadd+1,PIDupdate@sumErrore+1
  6884  000DBE  C026  F0D9         	movff	?___ftadd+2,PIDupdate@sumErrore+2
  6885                           
  6886                           ;PID&Motors.c: 19: Iterm = (float) kI * ((sumErrore)<(-20.0)?(-20.0):((sumErrore)>(20.0)
      +                          ?(20.0):(sumErrore)));
  6887  000DC2  C0D7  F06C         	movff	PIDupdate@sumErrore,___ftge@ff1
  6888  000DC6  C0D8  F06D         	movff	PIDupdate@sumErrore+1,___ftge@ff1+1
  6889  000DCA  C0D9  F06E         	movff	PIDupdate@sumErrore+2,___ftge@ff1+2
  6890  000DCE  0E00               	movlw	0
  6891  000DD0  0100               	movlb	0	; () banked
  6892  000DD2  6F6F               	movwf	___ftge@ff2& (0+255),b
  6893  000DD4  0EA0               	movlw	160
  6894  000DD6  0100               	movlb	0	; () banked
  6895  000DD8  6F70               	movwf	(___ftge@ff2+1)& (0+255),b
  6896  000DDA  0EC1               	movlw	193
  6897  000DDC  0100               	movlb	0	; () banked
  6898  000DDE  6F71               	movwf	(___ftge@ff2+2)& (0+255),b
  6899  000DE0  ECBA  F012         	call	___ftge	;wreg free
  6900  000DE4  0100               	movlb	0	; () banked
  6901  000DE6  A0D8               	btfss	status,0,c
  6902  000DE8  D02B               	goto	l4810
  6903                           
  6904                           ; BSR set to: 0
  6905  000DEA  0E00               	movlw	0
  6906  000DEC  0100               	movlb	0	; () banked
  6907  000DEE  6F6C               	movwf	___ftge@ff1& (0+255),b
  6908  000DF0  0EA0               	movlw	160
  6909  000DF2  0100               	movlb	0	; () banked
  6910  000DF4  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
  6911  000DF6  0E41               	movlw	65
  6912  000DF8  0100               	movlb	0	; () banked
  6913  000DFA  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
  6914  000DFC  C0D7  F06F         	movff	PIDupdate@sumErrore,___ftge@ff2
  6915  000E00  C0D8  F070         	movff	PIDupdate@sumErrore+1,___ftge@ff2+1
  6916  000E04  C0D9  F071         	movff	PIDupdate@sumErrore+2,___ftge@ff2+2
  6917  000E08  ECBA  F012         	call	___ftge	;wreg free
  6918  000E0C  0100               	movlb	0	; () banked
  6919  000E0E  A0D8               	btfss	status,0,c
  6920  000E10  D007               	goto	l4806
  6921                           
  6922                           ; BSR set to: 0
  6923  000E12  C0D7  F078         	movff	PIDupdate@sumErrore,_PIDupdate$404
  6924  000E16  C0D8  F079         	movff	PIDupdate@sumErrore+1,_PIDupdate$404+1
  6925  000E1A  C0D9  F07A         	movff	PIDupdate@sumErrore+2,_PIDupdate$404+2
  6926  000E1E  D009               	goto	l4808
  6927  000E20                     l4806:
  6928                           
  6929                           ; BSR set to: 0
  6930  000E20  0E00               	movlw	0
  6931  000E22  0100               	movlb	0	; () banked
  6932  000E24  6F78               	movwf	_PIDupdate$404& (0+255),b
  6933  000E26  0EA0               	movlw	160
  6934  000E28  0100               	movlb	0	; () banked
  6935  000E2A  6F79               	movwf	(_PIDupdate$404+1)& (0+255),b
  6936  000E2C  0E41               	movlw	65
  6937  000E2E  0100               	movlb	0	; () banked
  6938  000E30  6F7A               	movwf	(_PIDupdate$404+2)& (0+255),b
  6939  000E32                     l4808:
  6940                           
  6941                           ; BSR set to: 0
  6942  000E32  C078  F075         	movff	_PIDupdate$404,_PIDupdate$403
  6943  000E36  C079  F076         	movff	_PIDupdate$404+1,_PIDupdate$403+1
  6944  000E3A  C07A  F077         	movff	_PIDupdate$404+2,_PIDupdate$403+2
  6945  000E3E  D009               	goto	l4812
  6946  000E40                     l4810:
  6947                           
  6948                           ; BSR set to: 0
  6949  000E40  0E00               	movlw	0
  6950  000E42  0100               	movlb	0	; () banked
  6951  000E44  6F75               	movwf	_PIDupdate$403& (0+255),b
  6952  000E46  0EA0               	movlw	160
  6953  000E48  0100               	movlb	0	; () banked
  6954  000E4A  6F76               	movwf	(_PIDupdate$403+1)& (0+255),b
  6955  000E4C  0EC1               	movlw	193
  6956  000E4E  0100               	movlb	0	; () banked
  6957  000E50  6F77               	movwf	(_PIDupdate$403+2)& (0+255),b
  6958  000E52                     l4812:
  6959                           
  6960                           ; BSR set to: 0
  6961  000E52  C075  F060         	movff	_PIDupdate$403,___ftmul@f1
  6962  000E56  C076  F061         	movff	_PIDupdate$403+1,___ftmul@f1+1
  6963  000E5A  C077  F062         	movff	_PIDupdate$403+2,___ftmul@f1+2
  6964  000E5E  C041  F063         	movff	_kI,___ftmul@f2
  6965  000E62  C042  F064         	movff	_kI+1,___ftmul@f2+1
  6966  000E66  C043  F065         	movff	_kI+2,___ftmul@f2+2
  6967  000E6A  ECE3  F00D         	call	___ftmul	;wreg free
  6968  000E6E  C060  F084         	movff	?___ftmul,PIDupdate@Iterm
  6969  000E72  C061  F085         	movff	?___ftmul+1,PIDupdate@Iterm+1
  6970  000E76  C062  F086         	movff	?___ftmul+2,PIDupdate@Iterm+2
  6971                           
  6972                           ;PID&Motors.c: 23: Dterm = (float) kD * (errore - precErrore);
  6973  000E7A  C0E0  F027         	movff	_errore,___ftadd@f2
  6974  000E7E  C0E1  F028         	movff	_errore+1,___ftadd@f2+1
  6975  000E82  C0E2  F029         	movff	_errore+2,___ftadd@f2+2
  6976  000E86  C033  F020         	movff	PIDupdate@precErrore,___ftneg@f1
  6977  000E8A  C034  F021         	movff	PIDupdate@precErrore+1,___ftneg@f1+1
  6978  000E8E  C035  F022         	movff	PIDupdate@precErrore+2,___ftneg@f1+2
  6979  000E92  EC84  F017         	call	___ftneg	;wreg free
  6980  000E96  C020  F024         	movff	?___ftneg,___ftadd@f1
  6981  000E9A  C021  F025         	movff	?___ftneg+1,___ftadd@f1+1
  6982  000E9E  C022  F026         	movff	?___ftneg+2,___ftadd@f1+2
  6983  000EA2  EC38  F00C         	call	___ftadd	;wreg free
  6984  000EA6  C024  F060         	movff	?___ftadd,___ftmul@f1
  6985  000EAA  C025  F061         	movff	?___ftadd+1,___ftmul@f1+1
  6986  000EAE  C026  F062         	movff	?___ftadd+2,___ftmul@f1+2
  6987  000EB2  C03E  F063         	movff	_kD,___ftmul@f2
  6988  000EB6  C03F  F064         	movff	_kD+1,___ftmul@f2+1
  6989  000EBA  C040  F065         	movff	_kD+2,___ftmul@f2+2
  6990  000EBE  ECE3  F00D         	call	___ftmul	;wreg free
  6991  000EC2  C060  F087         	movff	?___ftmul,PIDupdate@Dterm
  6992  000EC6  C061  F088         	movff	?___ftmul+1,PIDupdate@Dterm+1
  6993  000ECA  C062  F089         	movff	?___ftmul+2,PIDupdate@Dterm+2
  6994                           
  6995                           ;PID&Motors.c: 24: precErrore = errore;
  6996  000ECE  C0E0  F033         	movff	_errore,PIDupdate@precErrore
  6997  000ED2  C0E1  F034         	movff	_errore+1,PIDupdate@precErrore+1
  6998  000ED6  C0E2  F035         	movff	_errore+2,PIDupdate@precErrore+2
  6999                           
  7000                           ;PID&Motors.c: 26: PID = (int) ((K*(Pterm + Iterm + Dterm))<(-255)?(-255):((K*(Pterm + I
      +                          term + Dterm))>(255)?(255):(K*(Pterm + Iterm + Dterm))));
  7001  000EDA  C084  F027         	movff	PIDupdate@Iterm,___ftadd@f2
  7002  000EDE  C085  F028         	movff	PIDupdate@Iterm+1,___ftadd@f2+1
  7003  000EE2  C086  F029         	movff	PIDupdate@Iterm+2,___ftadd@f2+2
  7004  000EE6  C081  F024         	movff	PIDupdate@Pterm,___ftadd@f1
  7005  000EEA  C082  F025         	movff	PIDupdate@Pterm+1,___ftadd@f1+1
  7006  000EEE  C083  F026         	movff	PIDupdate@Pterm+2,___ftadd@f1+2
  7007  000EF2  EC38  F00C         	call	___ftadd	;wreg free
  7008  000EF6  C024  F08A         	movff	?___ftadd,_PIDupdate$1197
  7009  000EFA  C025  F08B         	movff	?___ftadd+1,_PIDupdate$1197+1
  7010  000EFE  C026  F08C         	movff	?___ftadd+2,_PIDupdate$1197+2
  7011                           
  7012                           ;PID&Motors.c: 26: PID = (int) ((K*(Pterm + Iterm + Dterm))<(-255)?(-255):((K*(Pterm + I
      +                          term + Dterm))>(255)?(255):(K*(Pterm + Iterm + Dterm))));
  7013  000F02  C0E7  F063         	movff	_K,___ftmul@f2
  7014  000F06  C0E8  F064         	movff	_K+1,___ftmul@f2+1
  7015  000F0A  C0E9  F065         	movff	_K+2,___ftmul@f2+2
  7016  000F0E  C087  F027         	movff	PIDupdate@Dterm,___ftadd@f2
  7017  000F12  C088  F028         	movff	PIDupdate@Dterm+1,___ftadd@f2+1
  7018  000F16  C089  F029         	movff	PIDupdate@Dterm+2,___ftadd@f2+2
  7019  000F1A  C08A  F024         	movff	_PIDupdate$1197,___ftadd@f1
  7020  000F1E  C08B  F025         	movff	_PIDupdate$1197+1,___ftadd@f1+1
  7021  000F22  C08C  F026         	movff	_PIDupdate$1197+2,___ftadd@f1+2
  7022  000F26  EC38  F00C         	call	___ftadd	;wreg free
  7023  000F2A  C024  F060         	movff	?___ftadd,___ftmul@f1
  7024  000F2E  C025  F061         	movff	?___ftadd+1,___ftmul@f1+1
  7025  000F32  C026  F062         	movff	?___ftadd+2,___ftmul@f1+2
  7026  000F36  ECE3  F00D         	call	___ftmul	;wreg free
  7027  000F3A  C060  F06C         	movff	?___ftmul,___ftge@ff1
  7028  000F3E  C061  F06D         	movff	?___ftmul+1,___ftge@ff1+1
  7029  000F42  C062  F06E         	movff	?___ftmul+2,___ftge@ff1+2
  7030  000F46  0E00               	movlw	0
  7031  000F48  0100               	movlb	0	; () banked
  7032  000F4A  6F6F               	movwf	___ftge@ff2& (0+255),b
  7033  000F4C  0E7F               	movlw	127
  7034  000F4E  0100               	movlb	0	; () banked
  7035  000F50  6F70               	movwf	(___ftge@ff2+1)& (0+255),b
  7036  000F52  0EC3               	movlw	195
  7037  000F54  0100               	movlb	0	; () banked
  7038  000F56  6F71               	movwf	(___ftge@ff2+2)& (0+255),b
  7039  000F58  ECBA  F012         	call	___ftge	;wreg free
  7040  000F5C  0100               	movlb	0	; () banked
  7041  000F5E  A0D8               	btfss	status,0,c
  7042  000F60  D08B               	goto	l4830
  7043                           
  7044                           ; BSR set to: 0
  7045  000F62  C084  F027         	movff	PIDupdate@Iterm,___ftadd@f2
  7046  000F66  C085  F028         	movff	PIDupdate@Iterm+1,___ftadd@f2+1
  7047  000F6A  C086  F029         	movff	PIDupdate@Iterm+2,___ftadd@f2+2
  7048  000F6E  C081  F024         	movff	PIDupdate@Pterm,___ftadd@f1
  7049  000F72  C082  F025         	movff	PIDupdate@Pterm+1,___ftadd@f1+1
  7050  000F76  C083  F026         	movff	PIDupdate@Pterm+2,___ftadd@f1+2
  7051  000F7A  EC38  F00C         	call	___ftadd	;wreg free
  7052  000F7E  C024  F08A         	movff	?___ftadd,_PIDupdate$1197
  7053  000F82  C025  F08B         	movff	?___ftadd+1,_PIDupdate$1197+1
  7054  000F86  C026  F08C         	movff	?___ftadd+2,_PIDupdate$1197+2
  7055  000F8A  0E00               	movlw	0
  7056  000F8C  0100               	movlb	0	; () banked
  7057  000F8E  6F6C               	movwf	___ftge@ff1& (0+255),b
  7058  000F90  0E7F               	movlw	127
  7059  000F92  0100               	movlb	0	; () banked
  7060  000F94  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
  7061  000F96  0E43               	movlw	67
  7062  000F98  0100               	movlb	0	; () banked
  7063  000F9A  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
  7064  000F9C  C0E7  F063         	movff	_K,___ftmul@f2
  7065  000FA0  C0E8  F064         	movff	_K+1,___ftmul@f2+1
  7066  000FA4  C0E9  F065         	movff	_K+2,___ftmul@f2+2
  7067  000FA8  C087  F027         	movff	PIDupdate@Dterm,___ftadd@f2
  7068  000FAC  C088  F028         	movff	PIDupdate@Dterm+1,___ftadd@f2+1
  7069  000FB0  C089  F029         	movff	PIDupdate@Dterm+2,___ftadd@f2+2
  7070  000FB4  C08A  F024         	movff	_PIDupdate$1197,___ftadd@f1
  7071  000FB8  C08B  F025         	movff	_PIDupdate$1197+1,___ftadd@f1+1
  7072  000FBC  C08C  F026         	movff	_PIDupdate$1197+2,___ftadd@f1+2
  7073  000FC0  EC38  F00C         	call	___ftadd	;wreg free
  7074  000FC4  C024  F060         	movff	?___ftadd,___ftmul@f1
  7075  000FC8  C025  F061         	movff	?___ftadd+1,___ftmul@f1+1
  7076  000FCC  C026  F062         	movff	?___ftadd+2,___ftmul@f1+2
  7077  000FD0  ECE3  F00D         	call	___ftmul	;wreg free
  7078  000FD4  C060  F06F         	movff	?___ftmul,___ftge@ff2
  7079  000FD8  C061  F070         	movff	?___ftmul+1,___ftge@ff2+1
  7080  000FDC  C062  F071         	movff	?___ftmul+2,___ftge@ff2+2
  7081  000FE0  ECBA  F012         	call	___ftge	;wreg free
  7082  000FE4  0100               	movlb	0	; () banked
  7083  000FE6  A0D8               	btfss	status,0,c
  7084  000FE8  D037               	goto	l4826
  7085                           
  7086                           ; BSR set to: 0
  7087  000FEA  C084  F027         	movff	PIDupdate@Iterm,___ftadd@f2
  7088  000FEE  C085  F028         	movff	PIDupdate@Iterm+1,___ftadd@f2+1
  7089  000FF2  C086  F029         	movff	PIDupdate@Iterm+2,___ftadd@f2+2
  7090  000FF6  C081  F024         	movff	PIDupdate@Pterm,___ftadd@f1
  7091  000FFA  C082  F025         	movff	PIDupdate@Pterm+1,___ftadd@f1+1
  7092  000FFE  C083  F026         	movff	PIDupdate@Pterm+2,___ftadd@f1+2
  7093  001002  EC38  F00C         	call	___ftadd	;wreg free
  7094  001006  C024  F08A         	movff	?___ftadd,_PIDupdate$1197
  7095  00100A  C025  F08B         	movff	?___ftadd+1,_PIDupdate$1197+1
  7096  00100E  C026  F08C         	movff	?___ftadd+2,_PIDupdate$1197+2
  7097  001012  C087  F027         	movff	PIDupdate@Dterm,___ftadd@f2
  7098  001016  C088  F028         	movff	PIDupdate@Dterm+1,___ftadd@f2+1
  7099  00101A  C089  F029         	movff	PIDupdate@Dterm+2,___ftadd@f2+2
  7100  00101E  C08A  F024         	movff	_PIDupdate$1197,___ftadd@f1
  7101  001022  C08B  F025         	movff	_PIDupdate$1197+1,___ftadd@f1+1
  7102  001026  C08C  F026         	movff	_PIDupdate$1197+2,___ftadd@f1+2
  7103  00102A  EC38  F00C         	call	___ftadd	;wreg free
  7104  00102E  C024  F060         	movff	?___ftadd,___ftmul@f1
  7105  001032  C025  F061         	movff	?___ftadd+1,___ftmul@f1+1
  7106  001036  C026  F062         	movff	?___ftadd+2,___ftmul@f1+2
  7107  00103A  C0E7  F063         	movff	_K,___ftmul@f2
  7108  00103E  C0E8  F064         	movff	_K+1,___ftmul@f2+1
  7109  001042  C0E9  F065         	movff	_K+2,___ftmul@f2+2
  7110  001046  ECE3  F00D         	call	___ftmul	;wreg free
  7111  00104A  C060  F07E         	movff	?___ftmul,_PIDupdate$406
  7112  00104E  C061  F07F         	movff	?___ftmul+1,_PIDupdate$406+1
  7113  001052  C062  F080         	movff	?___ftmul+2,_PIDupdate$406+2
  7114  001056  D009               	goto	l4828
  7115  001058                     l4826:
  7116  001058  0E00               	movlw	0
  7117  00105A  0100               	movlb	0	; () banked
  7118  00105C  6F7E               	movwf	_PIDupdate$406& (0+255),b
  7119  00105E  0E7F               	movlw	127
  7120  001060  0100               	movlb	0	; () banked
  7121  001062  6F7F               	movwf	(_PIDupdate$406+1)& (0+255),b
  7122  001064  0E43               	movlw	67
  7123  001066  0100               	movlb	0	; () banked
  7124  001068  6F80               	movwf	(_PIDupdate$406+2)& (0+255),b
  7125  00106A                     l4828:
  7126  00106A  C07E  F07B         	movff	_PIDupdate$406,_PIDupdate$405
  7127  00106E  C07F  F07C         	movff	_PIDupdate$406+1,_PIDupdate$405+1
  7128  001072  C080  F07D         	movff	_PIDupdate$406+2,_PIDupdate$405+2
  7129  001076  D009               	goto	l4832
  7130  001078                     l4830:
  7131  001078  0E00               	movlw	0
  7132  00107A  0100               	movlb	0	; () banked
  7133  00107C  6F7B               	movwf	_PIDupdate$405& (0+255),b
  7134  00107E  0E7F               	movlw	127
  7135  001080  0100               	movlb	0	; () banked
  7136  001082  6F7C               	movwf	(_PIDupdate$405+1)& (0+255),b
  7137  001084  0EC3               	movlw	195
  7138  001086  0100               	movlb	0	; () banked
  7139  001088  6F7D               	movwf	(_PIDupdate$405+2)& (0+255),b
  7140  00108A                     l4832:
  7141  00108A  C07B  F018         	movff	_PIDupdate$405,___fttol@f1
  7142  00108E  C07C  F019         	movff	_PIDupdate$405+1,___fttol@f1+1
  7143  001092  C07D  F01A         	movff	_PIDupdate$405+2,___fttol@f1+2
  7144  001096  EC6A  F011         	call	___fttol	;wreg free
  7145  00109A  C018  F039         	movff	?___fttol,_PID
  7146  00109E  C019  F03A         	movff	?___fttol+1,_PID+1
  7147  0010A2  0012               	return		;funcret
  7148  0010A4                     __end_of_PIDupdate:
  7149                           	opt stack 0
  7150                           tblptru	equ	0xFF8
  7151                           tblptrh	equ	0xFF7
  7152                           tblptrl	equ	0xFF6
  7153                           tablat	equ	0xFF5
  7154                           prodh	equ	0xFF4
  7155                           prodl	equ	0xFF3
  7156                           intcon	equ	0xFF2
  7157                           postinc0	equ	0xFEE
  7158                           wreg	equ	0xFE8
  7159                           postdec1	equ	0xFE5
  7160                           fsr1l	equ	0xFE1
  7161                           postinc2	equ	0xFDE
  7162                           postdec2	equ	0xFDD
  7163                           fsr2h	equ	0xFDA
  7164                           fsr2l	equ	0xFD9
  7165                           status	equ	0xFD8
  7166                           
  7167 ;; *************** function ___fttol *****************
  7168 ;; Defined at:
  7169 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;  f1              3   23[COMRAM] float 
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  lval            4   33[COMRAM] unsigned long 
  7174 ;;  exp1            1   37[COMRAM] unsigned char 
  7175 ;;  sign1           1   32[COMRAM] unsigned char 
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  4   23[COMRAM] long 
  7178 ;; Registers used:
  7179 ;;		wreg, status,2, status,0
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7185 ;;      Params:         4       0       0       0       0       0       0
  7186 ;;      Locals:         6       0       0       0       0       0       0
  7187 ;;      Temps:          5       0       0       0       0       0       0
  7188 ;;      Totals:        15       0       0       0       0       0       0
  7189 ;;Total ram usage:       15 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    2
  7192 ;; This function calls:
  7193 ;;		Nothing
  7194 ;; This function is called by:
  7195 ;;		_PIDupdate
  7196 ;;		_pow
  7197 ;;		_exp
  7198 ;;		_floor
  7199 ;;		_sprintf
  7200 ;; This function uses a non-reentrant model
  7201 ;;
  7202                           
  7203                           	psect	text33
  7204  0022D4                     __ptext33:
  7205                           	opt stack 0
  7206  0022D4                     ___fttol:
  7207                           	opt stack 24
  7208                           
  7209                           ;incstack = 0
  7210  0022D4  C01A  F01C         	movff	___fttol@f1+2,??___fttol
  7211  0022D8  6A1D               	clrf	(??___fttol+1)& (0+255),c
  7212  0022DA  6A1E               	clrf	(??___fttol+2)& (0+255),c
  7213  0022DC  3419               	rlcf	___fttol@f1+1,w,c
  7214  0022DE  361C               	rlcf	??___fttol& (0+255),f,c
  7215  0022E0  E301               	bnc	u4931
  7216  0022E2  801D               	bsf	(??___fttol+1)& (0+255),0,c
  7217  0022E4                     u4931:
  7218  0022E4  501C               	movf	??___fttol,w,c
  7219  0022E6  6E26               	movwf	___fttol@exp1,c
  7220  0022E8  5026               	movf	___fttol@exp1,w,c
  7221  0022EA  A4D8               	btfss	status,2,c
  7222  0022EC  D009               	goto	l4172
  7223  0022EE  0E00               	movlw	0
  7224  0022F0  6E18               	movwf	?___fttol,c
  7225  0022F2  0E00               	movlw	0
  7226  0022F4  6E19               	movwf	?___fttol+1,c
  7227  0022F6  0E00               	movlw	0
  7228  0022F8  6E1A               	movwf	?___fttol+2,c
  7229  0022FA  0E00               	movlw	0
  7230  0022FC  6E1B               	movwf	?___fttol+3,c
  7231  0022FE  0012               	return	
  7232  002300                     l4172:
  7233  002300  0E17               	movlw	23
  7234  002302  6E1C               	movwf	??___fttol& (0+255),c
  7235  002304  C018  F01D         	movff	___fttol@f1,??___fttol+1
  7236  002308  C019  F01E         	movff	___fttol@f1+1,??___fttol+2
  7237  00230C  C01A  F01F         	movff	___fttol@f1+2,??___fttol+3
  7238  002310  281C               	incf	??___fttol,w,c
  7239  002312  6E20               	movwf	(??___fttol+4)& (0+255),c
  7240  002314  D004               	goto	u4950
  7241  002316                     u4955:
  7242  002316  90D8               	bcf	status,0,c
  7243  002318  321F               	rrcf	??___fttol+3,f,c
  7244  00231A  321E               	rrcf	??___fttol+2,f,c
  7245  00231C  321D               	rrcf	??___fttol+1,f,c
  7246  00231E                     u4950:
  7247  00231E  2E20               	decfsz	(??___fttol+4)& (0+255),f,c
  7248  002320  D7FA               	goto	u4955
  7249  002322  501D               	movf	??___fttol+1,w,c
  7250  002324  6E21               	movwf	___fttol@sign1,c
  7251  002326  8E19               	bsf	___fttol@f1+1,7,c
  7252  002328  0EFF               	movlw	255
  7253  00232A  1618               	andwf	___fttol@f1,f,c
  7254  00232C  0EFF               	movlw	255
  7255  00232E  1619               	andwf	___fttol@f1+1,f,c
  7256  002330  0E00               	movlw	0
  7257  002332  161A               	andwf	___fttol@f1+2,f,c
  7258  002334  5018               	movf	___fttol@f1,w,c
  7259  002336  6E22               	movwf	___fttol@lval,c
  7260  002338  5019               	movf	___fttol@f1+1,w,c
  7261  00233A  6E23               	movwf	___fttol@lval+1,c
  7262  00233C  501A               	movf	___fttol@f1+2,w,c
  7263  00233E  6E24               	movwf	___fttol@lval+2,c
  7264  002340  6A25               	clrf	___fttol@lval+3,c
  7265  002342  0E8E               	movlw	142
  7266  002344  5E26               	subwf	___fttol@exp1,f,c
  7267  002346  AE26               	btfss	___fttol@exp1,7,c
  7268  002348  D016               	goto	l4194
  7269  00234A  5026               	movf	___fttol@exp1,w,c
  7270  00234C  0A80               	xorlw	128
  7271  00234E  0F8F               	addlw	143
  7272  002350  B0D8               	btfsc	status,0,c
  7273  002352  D009               	goto	l4190
  7274  002354  0E00               	movlw	0
  7275  002356  6E18               	movwf	?___fttol,c
  7276  002358  0E00               	movlw	0
  7277  00235A  6E19               	movwf	?___fttol+1,c
  7278  00235C  0E00               	movlw	0
  7279  00235E  6E1A               	movwf	?___fttol+2,c
  7280  002360  0E00               	movlw	0
  7281  002362  6E1B               	movwf	?___fttol+3,c
  7282  002364  0012               	return	
  7283  002366                     l4190:
  7284  002366  90D8               	bcf	status,0,c
  7285  002368  3225               	rrcf	___fttol@lval+3,f,c
  7286  00236A  3224               	rrcf	___fttol@lval+2,f,c
  7287  00236C  3223               	rrcf	___fttol@lval+1,f,c
  7288  00236E  3222               	rrcf	___fttol@lval,f,c
  7289  002370  3E26               	incfsz	___fttol@exp1,f,c
  7290  002372  D7F9               	goto	l4190
  7291  002374  D015               	goto	l4204
  7292  002376                     l4194:
  7293  002376  0E17               	movlw	23
  7294  002378  6426               	cpfsgt	___fttol@exp1,c
  7295  00237A  D00F               	goto	l4202
  7296  00237C  0E00               	movlw	0
  7297  00237E  6E18               	movwf	?___fttol,c
  7298  002380  0E00               	movlw	0
  7299  002382  6E19               	movwf	?___fttol+1,c
  7300  002384  0E00               	movlw	0
  7301  002386  6E1A               	movwf	?___fttol+2,c
  7302  002388  0E00               	movlw	0
  7303  00238A  6E1B               	movwf	?___fttol+3,c
  7304  00238C  0012               	return	
  7305  00238E                     l4200:
  7306  00238E  90D8               	bcf	status,0,c
  7307  002390  3622               	rlcf	___fttol@lval,f,c
  7308  002392  3623               	rlcf	___fttol@lval+1,f,c
  7309  002394  3624               	rlcf	___fttol@lval+2,f,c
  7310  002396  3625               	rlcf	___fttol@lval+3,f,c
  7311  002398  0626               	decf	___fttol@exp1,f,c
  7312  00239A                     l4202:
  7313  00239A  5026               	movf	___fttol@exp1,w,c
  7314  00239C  A4D8               	btfss	status,2,c
  7315  00239E  D7F7               	goto	l4200
  7316  0023A0                     l4204:
  7317  0023A0  5021               	movf	___fttol@sign1,w,c
  7318  0023A2  B4D8               	btfsc	status,2,c
  7319  0023A4  D008               	goto	l4208
  7320  0023A6  1E25               	comf	___fttol@lval+3,f,c
  7321  0023A8  1E24               	comf	___fttol@lval+2,f,c
  7322  0023AA  1E23               	comf	___fttol@lval+1,f,c
  7323  0023AC  6C22               	negf	___fttol@lval,c
  7324  0023AE  0E00               	movlw	0
  7325  0023B0  2223               	addwfc	___fttol@lval+1,f,c
  7326  0023B2  2224               	addwfc	___fttol@lval+2,f,c
  7327  0023B4  2225               	addwfc	___fttol@lval+3,f,c
  7328  0023B6                     l4208:
  7329  0023B6  C022  F018         	movff	___fttol@lval,?___fttol
  7330  0023BA  C023  F019         	movff	___fttol@lval+1,?___fttol+1
  7331  0023BE  C024  F01A         	movff	___fttol@lval+2,?___fttol+2
  7332  0023C2  C025  F01B         	movff	___fttol@lval+3,?___fttol+3
  7333  0023C6  0012               	return	
  7334  0023C8                     __end_of___fttol:
  7335                           	opt stack 0
  7336                           tblptru	equ	0xFF8
  7337                           tblptrh	equ	0xFF7
  7338                           tblptrl	equ	0xFF6
  7339                           tablat	equ	0xFF5
  7340                           prodh	equ	0xFF4
  7341                           prodl	equ	0xFF3
  7342                           intcon	equ	0xFF2
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           postdec1	equ	0xFE5
  7346                           fsr1l	equ	0xFE1
  7347                           postinc2	equ	0xFDE
  7348                           postdec2	equ	0xFDD
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function ___ftneg *****************
  7354 ;; Defined at:
  7355 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  f1              3   31[COMRAM] float 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  3   31[COMRAM] float 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7369 ;;      Params:         3       0       0       0       0       0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0
  7372 ;;      Totals:         3       0       0       0       0       0       0
  7373 ;;Total ram usage:        3 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    2
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_computeAngle
  7380 ;;		_PIDupdate
  7381 ;;		_main
  7382 ;;		_atan
  7383 ;;		_fabs
  7384 ;;		_pow
  7385 ;;		_exp
  7386 ;;		_sprintf
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           	psect	text34
  7391  002F08                     __ptext34:
  7392                           	opt stack 0
  7393  002F08                     ___ftneg:
  7394                           	opt stack 25
  7395                           
  7396                           ;incstack = 0
  7397  002F08  5020               	movf	___ftneg@f1,w,c
  7398  002F0A  1021               	iorwf	___ftneg@f1+1,w,c
  7399  002F0C  1022               	iorwf	___ftneg@f1+2,w,c
  7400  002F0E  B4D8               	btfsc	status,2,c
  7401  002F10  D006               	goto	l888
  7402  002F12  0E00               	movlw	0
  7403  002F14  1A20               	xorwf	___ftneg@f1,f,c
  7404  002F16  0E00               	movlw	0
  7405  002F18  1A21               	xorwf	___ftneg@f1+1,f,c
  7406  002F1A  0E80               	movlw	128
  7407  002F1C  1A22               	xorwf	___ftneg@f1+2,f,c
  7408  002F1E                     l888:
  7409  002F1E  C020  F020         	movff	___ftneg@f1,?___ftneg
  7410  002F22  C021  F021         	movff	___ftneg@f1+1,?___ftneg+1
  7411  002F26  C022  F022         	movff	___ftneg@f1+2,?___ftneg+2
  7412  002F2A  0012               	return		;funcret
  7413  002F2C                     __end_of___ftneg:
  7414                           	opt stack 0
  7415                           tblptru	equ	0xFF8
  7416                           tblptrh	equ	0xFF7
  7417                           tblptrl	equ	0xFF6
  7418                           tablat	equ	0xFF5
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           intcon	equ	0xFF2
  7422                           postinc0	equ	0xFEE
  7423                           wreg	equ	0xFE8
  7424                           postdec1	equ	0xFE5
  7425                           fsr1l	equ	0xFE1
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           fsr2h	equ	0xFDA
  7429                           fsr2l	equ	0xFD9
  7430                           status	equ	0xFD8
  7431                           
  7432 ;; *************** function ___ftmul *****************
  7433 ;; Defined at:
  7434 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  f1              3    0[BANK0 ] float 
  7437 ;;  f2              3    3[BANK0 ] float 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  f3_as_produc    3    7[BANK0 ] unsigned um
  7440 ;;  sign            1   11[BANK0 ] unsigned char 
  7441 ;;  cntr            1   10[BANK0 ] unsigned char 
  7442 ;;  exp             1    6[BANK0 ] unsigned char 
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  3    0[BANK0 ] float 
  7445 ;; Registers used:
  7446 ;;		wreg, status,2, status,0, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7452 ;;      Params:         0       6       0       0       0       0       0
  7453 ;;      Locals:         0       6       0       0       0       0       0
  7454 ;;      Temps:          3       0       0       0       0       0       0
  7455 ;;      Totals:         3      12       0       0       0       0       0
  7456 ;;Total ram usage:       15 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    3
  7459 ;; This function calls:
  7460 ;;		___ftpack
  7461 ;; This function is called by:
  7462 ;;		_computeAngle
  7463 ;;		_PIDupdate
  7464 ;;		_atan
  7465 ;;		_eval_poly
  7466 ;;		_pow
  7467 ;;		_sqrt
  7468 ;;		_exp
  7469 ;;		_log
  7470 ;;		_sprintf
  7471 ;;		_scale
  7472 ;;		_fround
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           	psect	text35
  7477  001BC6                     __ptext35:
  7478                           	opt stack 0
  7479  001BC6                     ___ftmul:
  7480                           	opt stack 25
  7481                           
  7482                           ;incstack = 0
  7483  001BC6  C062  F030         	movff	___ftmul@f1+2,??___ftmul
  7484  001BCA  6A31               	clrf	(??___ftmul+1)& (0+255),c
  7485  001BCC  6A32               	clrf	(??___ftmul+2)& (0+255),c
  7486  001BCE  0100               	movlb	0	; () banked
  7487  001BD0  3561               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7488  001BD2  3630               	rlcf	??___ftmul& (0+255),f,c
  7489  001BD4  E301               	bnc	u4841
  7490  001BD6  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  7491  001BD8                     u4841:
  7492  001BD8  5030               	movf	??___ftmul,w,c
  7493  001BDA  0100               	movlb	0	; () banked
  7494  001BDC  6F66               	movwf	___ftmul@exp& (0+255),b
  7495  001BDE  0100               	movlb	0	; () banked
  7496  001BE0  5166               	movf	___ftmul@exp& (0+255),w,b
  7497  001BE2  A4D8               	btfss	status,2,c
  7498  001BE4  D00A               	goto	l4106
  7499                           
  7500                           ; BSR set to: 0
  7501  001BE6  0E00               	movlw	0
  7502  001BE8  0100               	movlb	0	; () banked
  7503  001BEA  6F60               	movwf	?___ftmul& (0+255),b
  7504  001BEC  0E00               	movlw	0
  7505  001BEE  0100               	movlb	0	; () banked
  7506  001BF0  6F61               	movwf	(?___ftmul+1)& (0+255),b
  7507  001BF2  0E00               	movlw	0
  7508  001BF4  0100               	movlb	0	; () banked
  7509  001BF6  6F62               	movwf	(?___ftmul+2)& (0+255),b
  7510                           
  7511                           ; BSR set to: 0
  7512  001BF8  0012               	return	
  7513  001BFA                     l4106:
  7514                           
  7515                           ; BSR set to: 0
  7516  001BFA  C065  F030         	movff	___ftmul@f2+2,??___ftmul
  7517  001BFE  6A31               	clrf	(??___ftmul+1)& (0+255),c
  7518  001C00  6A32               	clrf	(??___ftmul+2)& (0+255),c
  7519  001C02  0100               	movlb	0	; () banked
  7520  001C04  3564               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7521  001C06  3630               	rlcf	??___ftmul& (0+255),f,c
  7522  001C08  E301               	bnc	u4861
  7523  001C0A  8031               	bsf	(??___ftmul+1)& (0+255),0,c
  7524  001C0C                     u4861:
  7525  001C0C  5030               	movf	??___ftmul,w,c
  7526  001C0E  0100               	movlb	0	; () banked
  7527  001C10  6F6B               	movwf	___ftmul@sign& (0+255),b
  7528  001C12  0100               	movlb	0	; () banked
  7529  001C14  516B               	movf	___ftmul@sign& (0+255),w,b
  7530  001C16  A4D8               	btfss	status,2,c
  7531  001C18  D00A               	goto	l4112
  7532                           
  7533                           ; BSR set to: 0
  7534  001C1A  0E00               	movlw	0
  7535  001C1C  0100               	movlb	0	; () banked
  7536  001C1E  6F60               	movwf	?___ftmul& (0+255),b
  7537  001C20  0E00               	movlw	0
  7538  001C22  0100               	movlb	0	; () banked
  7539  001C24  6F61               	movwf	(?___ftmul+1)& (0+255),b
  7540  001C26  0E00               	movlw	0
  7541  001C28  0100               	movlb	0	; () banked
  7542  001C2A  6F62               	movwf	(?___ftmul+2)& (0+255),b
  7543                           
  7544                           ; BSR set to: 0
  7545  001C2C  0012               	return	
  7546  001C2E                     l4112:
  7547                           
  7548                           ; BSR set to: 0
  7549  001C2E  0100               	movlb	0	; () banked
  7550  001C30  516B               	movf	___ftmul@sign& (0+255),w,b
  7551  001C32  0F7B               	addlw	123
  7552  001C34  0100               	movlb	0	; () banked
  7553  001C36  2766               	addwf	___ftmul@exp& (0+255),f,b
  7554                           
  7555                           ; BSR set to: 0
  7556  001C38  C062  F06B         	movff	___ftmul@f1+2,___ftmul@sign
  7557  001C3C  0100               	movlb	0	; () banked
  7558  001C3E  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7559  001C40  0100               	movlb	0	; () banked
  7560  001C42  1B6B               	xorwf	___ftmul@sign& (0+255),f,b
  7561  001C44  0E80               	movlw	128
  7562  001C46  0100               	movlb	0	; () banked
  7563  001C48  176B               	andwf	___ftmul@sign& (0+255),f,b
  7564                           
  7565                           ; BSR set to: 0
  7566  001C4A  0100               	movlb	0	; () banked
  7567  001C4C  8F61               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7568                           
  7569                           ; BSR set to: 0
  7570  001C4E  0100               	movlb	0	; () banked
  7571  001C50  8F64               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7572                           
  7573                           ; BSR set to: 0
  7574  001C52  0EFF               	movlw	255
  7575  001C54  0100               	movlb	0	; () banked
  7576  001C56  1763               	andwf	___ftmul@f2& (0+255),f,b
  7577  001C58  0EFF               	movlw	255
  7578  001C5A  0100               	movlb	0	; () banked
  7579  001C5C  1764               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7580  001C5E  0E00               	movlw	0
  7581  001C60  0100               	movlb	0	; () banked
  7582  001C62  1765               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7583                           
  7584                           ; BSR set to: 0
  7585  001C64  0E00               	movlw	0
  7586  001C66  0100               	movlb	0	; () banked
  7587  001C68  6F67               	movwf	___ftmul@f3_as_product& (0+255),b
  7588  001C6A  0E00               	movlw	0
  7589  001C6C  0100               	movlb	0	; () banked
  7590  001C6E  6F68               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7591  001C70  0E00               	movlw	0
  7592  001C72  0100               	movlb	0	; () banked
  7593  001C74  6F69               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7594                           
  7595                           ; BSR set to: 0
  7596  001C76  0E07               	movlw	7
  7597  001C78  0100               	movlb	0	; () banked
  7598  001C7A  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7599  001C7C                     l4126:
  7600                           
  7601                           ; BSR set to: 0
  7602  001C7C  0100               	movlb	0	; () banked
  7603  001C7E  A160               	btfss	___ftmul@f1& (0+255),0,b
  7604  001C80  D00C               	goto	l4130
  7605                           
  7606                           ; BSR set to: 0
  7607  001C82  0100               	movlb	0	; () banked
  7608  001C84  5163               	movf	___ftmul@f2& (0+255),w,b
  7609  001C86  0100               	movlb	0	; () banked
  7610  001C88  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7611  001C8A  0100               	movlb	0	; () banked
  7612  001C8C  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7613  001C8E  0100               	movlb	0	; () banked
  7614  001C90  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7615  001C92  0100               	movlb	0	; () banked
  7616  001C94  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7617  001C96  0100               	movlb	0	; () banked
  7618  001C98  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7619  001C9A                     l4130:
  7620                           
  7621                           ; BSR set to: 0
  7622  001C9A  0100               	movlb	0	; () banked
  7623  001C9C  90D8               	bcf	status,0,c
  7624  001C9E  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7625  001CA0  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7626  001CA2  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7627  001CA4  0100               	movlb	0	; () banked
  7628  001CA6  90D8               	bcf	status,0,c
  7629  001CA8  3763               	rlcf	___ftmul@f2& (0+255),f,b
  7630  001CAA  3764               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7631  001CAC  3765               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7632                           
  7633                           ; BSR set to: 0
  7634  001CAE  0100               	movlb	0	; () banked
  7635  001CB0  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7636  001CB2  D7E4               	goto	l4126
  7637                           
  7638                           ; BSR set to: 0
  7639                           
  7640                           ; BSR set to: 0
  7641  001CB4  0E09               	movlw	9
  7642  001CB6  0100               	movlb	0	; () banked
  7643  001CB8  6F6A               	movwf	___ftmul@cntr& (0+255),b
  7644  001CBA                     l4136:
  7645                           
  7646                           ; BSR set to: 0
  7647  001CBA  0100               	movlb	0	; () banked
  7648  001CBC  A160               	btfss	___ftmul@f1& (0+255),0,b
  7649  001CBE  D00C               	goto	l4140
  7650                           
  7651                           ; BSR set to: 0
  7652  001CC0  0100               	movlb	0	; () banked
  7653  001CC2  5163               	movf	___ftmul@f2& (0+255),w,b
  7654  001CC4  0100               	movlb	0	; () banked
  7655  001CC6  2767               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7656  001CC8  0100               	movlb	0	; () banked
  7657  001CCA  5164               	movf	(___ftmul@f2+1)& (0+255),w,b
  7658  001CCC  0100               	movlb	0	; () banked
  7659  001CCE  2368               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7660  001CD0  0100               	movlb	0	; () banked
  7661  001CD2  5165               	movf	(___ftmul@f2+2)& (0+255),w,b
  7662  001CD4  0100               	movlb	0	; () banked
  7663  001CD6  2369               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7664  001CD8                     l4140:
  7665                           
  7666                           ; BSR set to: 0
  7667  001CD8  0100               	movlb	0	; () banked
  7668  001CDA  90D8               	bcf	status,0,c
  7669  001CDC  3362               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7670  001CDE  3361               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7671  001CE0  3360               	rrcf	___ftmul@f1& (0+255),f,b
  7672  001CE2  0100               	movlb	0	; () banked
  7673  001CE4  90D8               	bcf	status,0,c
  7674  001CE6  3369               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7675  001CE8  3368               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7676  001CEA  3367               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7677                           
  7678                           ; BSR set to: 0
  7679  001CEC  0100               	movlb	0	; () banked
  7680  001CEE  2F6A               	decfsz	___ftmul@cntr& (0+255),f,b
  7681  001CF0  D7E4               	goto	l4136
  7682                           
  7683                           ; BSR set to: 0
  7684                           
  7685                           ; BSR set to: 0
  7686  001CF2  C067  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  7687  001CF6  C068  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7688  001CFA  C069  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7689  001CFE  C066  F01B         	movff	___ftmul@exp,___ftpack@exp
  7690  001D02  C06B  F01C         	movff	___ftmul@sign,___ftpack@sign
  7691  001D06  ECDE  F013         	call	___ftpack	;wreg free
  7692  001D0A  C018  F060         	movff	?___ftpack,?___ftmul
  7693  001D0E  C019  F061         	movff	?___ftpack+1,?___ftmul+1
  7694  001D12  C01A  F062         	movff	?___ftpack+2,?___ftmul+2
  7695  001D16  0012               	return	
  7696  001D18                     __end_of___ftmul:
  7697                           	opt stack 0
  7698                           tblptru	equ	0xFF8
  7699                           tblptrh	equ	0xFF7
  7700                           tblptrl	equ	0xFF6
  7701                           tablat	equ	0xFF5
  7702                           prodh	equ	0xFF4
  7703                           prodl	equ	0xFF3
  7704                           intcon	equ	0xFF2
  7705                           postinc0	equ	0xFEE
  7706                           wreg	equ	0xFE8
  7707                           postdec1	equ	0xFE5
  7708                           fsr1l	equ	0xFE1
  7709                           postinc2	equ	0xFDE
  7710                           postdec2	equ	0xFDD
  7711                           fsr2h	equ	0xFDA
  7712                           fsr2l	equ	0xFD9
  7713                           status	equ	0xFD8
  7714                           
  7715 ;; *************** function ___ftge *****************
  7716 ;; Defined at:
  7717 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  7718 ;; Parameters:    Size  Location     Type
  7719 ;;  ff1             3   12[BANK0 ] float 
  7720 ;;  ff2             3   15[BANK0 ] float 
  7721 ;; Auto vars:     Size  Location     Type
  7722 ;;		None
  7723 ;; Return value:  Size  Location     Type
  7724 ;;		None               void
  7725 ;; Registers used:
  7726 ;;		wreg, status,2, status,0
  7727 ;; Tracked objects:
  7728 ;;		On entry : 0/0
  7729 ;;		On exit  : 0/0
  7730 ;;		Unchanged: 0/0
  7731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7732 ;;      Params:         0       6       0       0       0       0       0
  7733 ;;      Locals:         0       0       0       0       0       0       0
  7734 ;;      Temps:          0       3       0       0       0       0       0
  7735 ;;      Totals:         0       9       0       0       0       0       0
  7736 ;;Total ram usage:        9 bytes
  7737 ;; Hardware stack levels used:    1
  7738 ;; Hardware stack levels required when called:    2
  7739 ;; This function calls:
  7740 ;;		Nothing
  7741 ;; This function is called by:
  7742 ;;		_PIDupdate
  7743 ;;		_main
  7744 ;;		_atan
  7745 ;;		_pow
  7746 ;;		_sqrt
  7747 ;;		_exp
  7748 ;;		_floor
  7749 ;;		_sprintf
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           	psect	text36
  7754  002574                     __ptext36:
  7755                           	opt stack 0
  7756  002574                     ___ftge:
  7757                           	opt stack 26
  7758                           
  7759                           ;incstack = 0
  7760  002574  0100               	movlb	0	; () banked
  7761  002576  AF6E               	btfss	(___ftge@ff1+2)& (0+255),7,b
  7762  002578  D01D               	goto	l4152
  7763                           
  7764                           ; BSR set to: 0
  7765  00257A  C06C  F072         	movff	___ftge@ff1,??___ftge
  7766  00257E  C06D  F073         	movff	___ftge@ff1+1,??___ftge+1
  7767  002582  C06E  F074         	movff	___ftge@ff1+2,??___ftge+2
  7768  002586  0100               	movlb	0	; () banked
  7769  002588  1F72               	comf	??___ftge& (0+255),f,b
  7770  00258A  1F73               	comf	(??___ftge+1)& (0+255),f,b
  7771  00258C  1F74               	comf	(??___ftge+2)& (0+255),f,b
  7772  00258E  2B72               	incf	??___ftge& (0+255),f,b
  7773  002590  0E00               	movlw	0
  7774  002592  2373               	addwfc	(??___ftge+1)& (0+255),f,b
  7775  002594  2374               	addwfc	(??___ftge+2)& (0+255),f,b
  7776  002596  0E00               	movlw	0
  7777  002598  0100               	movlb	0	; () banked
  7778  00259A  2572               	addwf	??___ftge& (0+255),w,b
  7779  00259C  0100               	movlb	0	; () banked
  7780  00259E  6F6C               	movwf	___ftge@ff1& (0+255),b
  7781  0025A0  0E00               	movlw	0
  7782  0025A2  0100               	movlb	0	; () banked
  7783  0025A4  2173               	addwfc	(??___ftge+1)& (0+255),w,b
  7784  0025A6  0100               	movlb	0	; () banked
  7785  0025A8  6F6D               	movwf	(___ftge@ff1+1)& (0+255),b
  7786  0025AA  0E80               	movlw	128
  7787  0025AC  0100               	movlb	0	; () banked
  7788  0025AE  2174               	addwfc	(??___ftge+2)& (0+255),w,b
  7789  0025B0  0100               	movlb	0	; () banked
  7790  0025B2  6F6E               	movwf	(___ftge@ff1+2)& (0+255),b
  7791  0025B4                     l4152:
  7792                           
  7793                           ; BSR set to: 0
  7794  0025B4  0100               	movlb	0	; () banked
  7795  0025B6  AF71               	btfss	(___ftge@ff2+2)& (0+255),7,b
  7796  0025B8  D01D               	goto	l4156
  7797                           
  7798                           ; BSR set to: 0
  7799  0025BA  C06F  F072         	movff	___ftge@ff2,??___ftge
  7800  0025BE  C070  F073         	movff	___ftge@ff2+1,??___ftge+1
  7801  0025C2  C071  F074         	movff	___ftge@ff2+2,??___ftge+2
  7802  0025C6  0100               	movlb	0	; () banked
  7803  0025C8  1F72               	comf	??___ftge& (0+255),f,b
  7804  0025CA  1F73               	comf	(??___ftge+1)& (0+255),f,b
  7805  0025CC  1F74               	comf	(??___ftge+2)& (0+255),f,b
  7806  0025CE  2B72               	incf	??___ftge& (0+255),f,b
  7807  0025D0  0E00               	movlw	0
  7808  0025D2  2373               	addwfc	(??___ftge+1)& (0+255),f,b
  7809  0025D4  2374               	addwfc	(??___ftge+2)& (0+255),f,b
  7810  0025D6  0E00               	movlw	0
  7811  0025D8  0100               	movlb	0	; () banked
  7812  0025DA  2572               	addwf	??___ftge& (0+255),w,b
  7813  0025DC  0100               	movlb	0	; () banked
  7814  0025DE  6F6F               	movwf	___ftge@ff2& (0+255),b
  7815  0025E0  0E00               	movlw	0
  7816  0025E2  0100               	movlb	0	; () banked
  7817  0025E4  2173               	addwfc	(??___ftge+1)& (0+255),w,b
  7818  0025E6  0100               	movlb	0	; () banked
  7819  0025E8  6F70               	movwf	(___ftge@ff2+1)& (0+255),b
  7820  0025EA  0E80               	movlw	128
  7821  0025EC  0100               	movlb	0	; () banked
  7822  0025EE  2174               	addwfc	(??___ftge+2)& (0+255),w,b
  7823  0025F0  0100               	movlb	0	; () banked
  7824  0025F2  6F71               	movwf	(___ftge@ff2+2)& (0+255),b
  7825  0025F4                     l4156:
  7826                           
  7827                           ; BSR set to: 0
  7828  0025F4  0E00               	movlw	0
  7829  0025F6  0100               	movlb	0	; () banked
  7830  0025F8  1B6C               	xorwf	___ftge@ff1& (0+255),f,b
  7831  0025FA  0E00               	movlw	0
  7832  0025FC  0100               	movlb	0	; () banked
  7833  0025FE  1B6D               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  7834  002600  0E80               	movlw	128
  7835  002602  0100               	movlb	0	; () banked
  7836  002604  1B6E               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  7837                           
  7838                           ; BSR set to: 0
  7839  002606  0E00               	movlw	0
  7840  002608  0100               	movlb	0	; () banked
  7841  00260A  1B6F               	xorwf	___ftge@ff2& (0+255),f,b
  7842  00260C  0E00               	movlw	0
  7843  00260E  0100               	movlb	0	; () banked
  7844  002610  1B70               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  7845  002612  0E80               	movlw	128
  7846  002614  0100               	movlb	0	; () banked
  7847  002616  1B71               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  7848  002618  0100               	movlb	0	; () banked
  7849  00261A  516F               	movf	___ftge@ff2& (0+255),w,b
  7850  00261C  0100               	movlb	0	; () banked
  7851  00261E  5D6C               	subwf	___ftge@ff1& (0+255),w,b
  7852  002620  0100               	movlb	0	; () banked
  7853  002622  5170               	movf	(___ftge@ff2+1)& (0+255),w,b
  7854  002624  0100               	movlb	0	; () banked
  7855  002626  596D               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  7856  002628  0100               	movlb	0	; () banked
  7857  00262A  5171               	movf	(___ftge@ff2+2)& (0+255),w,b
  7858  00262C  0100               	movlb	0	; () banked
  7859  00262E  596E               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  7860  002630  B0D8               	btfsc	status,0,c
  7861  002632  D002               	goto	l4162
  7862                           
  7863                           ; BSR set to: 0
  7864  002634  90D8               	bcf	status,0,c
  7865  002636  0012               	return	
  7866  002638                     l4162:
  7867                           
  7868                           ; BSR set to: 0
  7869  002638  80D8               	bsf	status,0,c
  7870                           
  7871                           ; BSR set to: 0
  7872  00263A  0012               	return	
  7873  00263C                     __end_of___ftge:
  7874                           	opt stack 0
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           prodh	equ	0xFF4
  7880                           prodl	equ	0xFF3
  7881                           intcon	equ	0xFF2
  7882                           postinc0	equ	0xFEE
  7883                           wreg	equ	0xFE8
  7884                           postdec1	equ	0xFE5
  7885                           fsr1l	equ	0xFE1
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           fsr2h	equ	0xFDA
  7889                           fsr2l	equ	0xFD9
  7890                           status	equ	0xFD8
  7891                           
  7892 ;; *************** function ___ftadd *****************
  7893 ;; Defined at:
  7894 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  7895 ;; Parameters:    Size  Location     Type
  7896 ;;  f1              3   35[COMRAM] float 
  7897 ;;  f2              3   38[COMRAM] float 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  exp1            1   46[COMRAM] unsigned char 
  7900 ;;  exp2            1   45[COMRAM] unsigned char 
  7901 ;;  sign            1   44[COMRAM] unsigned char 
  7902 ;; Return value:  Size  Location     Type
  7903 ;;                  3   35[COMRAM] float 
  7904 ;; Registers used:
  7905 ;;		wreg, status,2, status,0, cstack
  7906 ;; Tracked objects:
  7907 ;;		On entry : 0/0
  7908 ;;		On exit  : 0/0
  7909 ;;		Unchanged: 0/0
  7910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7911 ;;      Params:         6       0       0       0       0       0       0
  7912 ;;      Locals:         3       0       0       0       0       0       0
  7913 ;;      Temps:          3       0       0       0       0       0       0
  7914 ;;      Totals:        12       0       0       0       0       0       0
  7915 ;;Total ram usage:       12 bytes
  7916 ;; Hardware stack levels used:    1
  7917 ;; Hardware stack levels required when called:    3
  7918 ;; This function calls:
  7919 ;;		___ftpack
  7920 ;; This function is called by:
  7921 ;;		_computeAngle
  7922 ;;		_PIDupdate
  7923 ;;		_main
  7924 ;;		_atan
  7925 ;;		_eval_poly
  7926 ;;		___ftsub
  7927 ;;		_floor
  7928 ;;		_log
  7929 ;;		_sprintf
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           	psect	text37
  7934  001870                     __ptext37:
  7935                           	opt stack 0
  7936  001870                     ___ftadd:
  7937                           	opt stack 24
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;incstack = 0
  7941  001870  C026  F02A         	movff	___ftadd@f1+2,??___ftadd
  7942  001874  6A2B               	clrf	(??___ftadd+1)& (0+255),c
  7943  001876  6A2C               	clrf	(??___ftadd+2)& (0+255),c
  7944  001878  3425               	rlcf	___ftadd@f1+1,w,c
  7945  00187A  362A               	rlcf	??___ftadd& (0+255),f,c
  7946  00187C  E301               	bnc	u4631
  7947  00187E  802B               	bsf	(??___ftadd+1)& (0+255),0,c
  7948  001880                     u4631:
  7949  001880  502A               	movf	??___ftadd,w,c
  7950  001882  6E2F               	movwf	___ftadd@exp1,c
  7951  001884  C029  F02A         	movff	___ftadd@f2+2,??___ftadd
  7952  001888  6A2B               	clrf	(??___ftadd+1)& (0+255),c
  7953  00188A  6A2C               	clrf	(??___ftadd+2)& (0+255),c
  7954  00188C  3428               	rlcf	___ftadd@f2+1,w,c
  7955  00188E  362A               	rlcf	??___ftadd& (0+255),f,c
  7956  001890  E301               	bnc	u4641
  7957  001892  802B               	bsf	(??___ftadd+1)& (0+255),0,c
  7958  001894                     u4641:
  7959  001894  502A               	movf	??___ftadd,w,c
  7960  001896  6E2E               	movwf	___ftadd@exp2,c
  7961  001898  502F               	movf	___ftadd@exp1,w,c
  7962  00189A  B4D8               	btfsc	status,2,c
  7963  00189C  D00B               	goto	l814
  7964  00189E  502E               	movf	___ftadd@exp2,w,c
  7965  0018A0  5C2F               	subwf	___ftadd@exp1,w,c
  7966  0018A2  B0D8               	btfsc	status,0,c
  7967  0018A4  D00E               	goto	l4038
  7968  0018A6  502F               	movf	___ftadd@exp1,w,c
  7969  0018A8  0800               	sublw	0
  7970  0018AA  242E               	addwf	___ftadd@exp2,w,c
  7971  0018AC  6E2A               	movwf	??___ftadd& (0+255),c
  7972  0018AE  0E18               	movlw	24
  7973  0018B0  642A               	cpfsgt	??___ftadd,c
  7974  0018B2  D007               	goto	l4038
  7975  0018B4                     l814:
  7976  0018B4  C027  F024         	movff	___ftadd@f2,?___ftadd
  7977  0018B8  C028  F025         	movff	___ftadd@f2+1,?___ftadd+1
  7978  0018BC  C029  F026         	movff	___ftadd@f2+2,?___ftadd+2
  7979  0018C0  0012               	return	
  7980  0018C2                     l4038:
  7981  0018C2  502E               	movf	___ftadd@exp2,w,c
  7982  0018C4  B4D8               	btfsc	status,2,c
  7983  0018C6  D00B               	goto	l818
  7984  0018C8  502F               	movf	___ftadd@exp1,w,c
  7985  0018CA  5C2E               	subwf	___ftadd@exp2,w,c
  7986  0018CC  B0D8               	btfsc	status,0,c
  7987  0018CE  D00E               	goto	l4044
  7988  0018D0  502E               	movf	___ftadd@exp2,w,c
  7989  0018D2  0800               	sublw	0
  7990  0018D4  242F               	addwf	___ftadd@exp1,w,c
  7991  0018D6  6E2A               	movwf	??___ftadd& (0+255),c
  7992  0018D8  0E18               	movlw	24
  7993  0018DA  642A               	cpfsgt	??___ftadd,c
  7994  0018DC  D007               	goto	l4044
  7995  0018DE                     l818:
  7996  0018DE  C024  F024         	movff	___ftadd@f1,?___ftadd
  7997  0018E2  C025  F025         	movff	___ftadd@f1+1,?___ftadd+1
  7998  0018E6  C026  F026         	movff	___ftadd@f1+2,?___ftadd+2
  7999  0018EA  0012               	return	
  8000  0018EC                     l4044:
  8001  0018EC  0E06               	movlw	6
  8002  0018EE  6E2D               	movwf	___ftadd@sign,c
  8003  0018F0  BE26               	btfsc	___ftadd@f1+2,7,c
  8004  0018F2  8E2D               	bsf	___ftadd@sign,7,c
  8005  0018F4  BE29               	btfsc	___ftadd@f2+2,7,c
  8006  0018F6  8C2D               	bsf	___ftadd@sign,6,c
  8007  0018F8  8E25               	bsf	___ftadd@f1+1,7,c
  8008  0018FA  0EFF               	movlw	255
  8009  0018FC  1624               	andwf	___ftadd@f1,f,c
  8010  0018FE  0EFF               	movlw	255
  8011  001900  1625               	andwf	___ftadd@f1+1,f,c
  8012  001902  0E00               	movlw	0
  8013  001904  1626               	andwf	___ftadd@f1+2,f,c
  8014  001906  8E28               	bsf	___ftadd@f2+1,7,c
  8015  001908  0EFF               	movlw	255
  8016  00190A  1627               	andwf	___ftadd@f2,f,c
  8017  00190C  0EFF               	movlw	255
  8018  00190E  1628               	andwf	___ftadd@f2+1,f,c
  8019  001910  0E00               	movlw	0
  8020  001912  1629               	andwf	___ftadd@f2+2,f,c
  8021  001914  502E               	movf	___ftadd@exp2,w,c
  8022  001916  5C2F               	subwf	___ftadd@exp1,w,c
  8023  001918  B0D8               	btfsc	status,0,c
  8024  00191A  D01B               	goto	l4070
  8025  00191C                     l4060:
  8026  00191C  90D8               	bcf	status,0,c
  8027  00191E  3627               	rlcf	___ftadd@f2,f,c
  8028  001920  3628               	rlcf	___ftadd@f2+1,f,c
  8029  001922  3629               	rlcf	___ftadd@f2+2,f,c
  8030  001924  062E               	decf	___ftadd@exp2,f,c
  8031  001926  502F               	movf	___ftadd@exp1,w,c
  8032  001928  182E               	xorwf	___ftadd@exp2,w,c
  8033  00192A  B4D8               	btfsc	status,2,c
  8034  00192C  D00D               	goto	l4068
  8035  00192E  062D               	decf	___ftadd@sign,f,c
  8036  001930  C02D  F02A         	movff	___ftadd@sign,??___ftadd
  8037  001934  0E07               	movlw	7
  8038  001936  162A               	andwf	??___ftadd,f,c
  8039  001938  B4D8               	btfsc	status,2,c
  8040  00193A  D006               	goto	l4068
  8041  00193C  D7EF               	goto	l4060
  8042  00193E                     l4066:
  8043  00193E  90D8               	bcf	status,0,c
  8044  001940  3226               	rrcf	___ftadd@f1+2,f,c
  8045  001942  3225               	rrcf	___ftadd@f1+1,f,c
  8046  001944  3224               	rrcf	___ftadd@f1,f,c
  8047  001946  2A2F               	incf	___ftadd@exp1,f,c
  8048  001948                     l4068:
  8049  001948  502E               	movf	___ftadd@exp2,w,c
  8050  00194A  182F               	xorwf	___ftadd@exp1,w,c
  8051  00194C  B4D8               	btfsc	status,2,c
  8052  00194E  D01F               	goto	l829
  8053  001950  D7F6               	goto	l4066
  8054  001952                     l4070:
  8055  001952  502F               	movf	___ftadd@exp1,w,c
  8056  001954  5C2E               	subwf	___ftadd@exp2,w,c
  8057  001956  B0D8               	btfsc	status,0,c
  8058  001958  D01A               	goto	l829
  8059  00195A                     l4072:
  8060  00195A  90D8               	bcf	status,0,c
  8061  00195C  3624               	rlcf	___ftadd@f1,f,c
  8062  00195E  3625               	rlcf	___ftadd@f1+1,f,c
  8063  001960  3626               	rlcf	___ftadd@f1+2,f,c
  8064  001962  062F               	decf	___ftadd@exp1,f,c
  8065  001964  502F               	movf	___ftadd@exp1,w,c
  8066  001966  182E               	xorwf	___ftadd@exp2,w,c
  8067  001968  B4D8               	btfsc	status,2,c
  8068  00196A  D00D               	goto	l4080
  8069  00196C  062D               	decf	___ftadd@sign,f,c
  8070  00196E  C02D  F02A         	movff	___ftadd@sign,??___ftadd
  8071  001972  0E07               	movlw	7
  8072  001974  162A               	andwf	??___ftadd,f,c
  8073  001976  B4D8               	btfsc	status,2,c
  8074  001978  D006               	goto	l4080
  8075  00197A  D7EF               	goto	l4072
  8076  00197C                     l4078:
  8077  00197C  90D8               	bcf	status,0,c
  8078  00197E  3229               	rrcf	___ftadd@f2+2,f,c
  8079  001980  3228               	rrcf	___ftadd@f2+1,f,c
  8080  001982  3227               	rrcf	___ftadd@f2,f,c
  8081  001984  2A2E               	incf	___ftadd@exp2,f,c
  8082  001986                     l4080:
  8083  001986  502E               	movf	___ftadd@exp2,w,c
  8084  001988  182F               	xorwf	___ftadd@exp1,w,c
  8085  00198A  A4D8               	btfss	status,2,c
  8086  00198C  D7F7               	goto	l4078
  8087  00198E                     l829:
  8088  00198E  AE2D               	btfss	___ftadd@sign,7,c
  8089  001990  D00C               	goto	l838
  8090  001992  0EFF               	movlw	255
  8091  001994  1A24               	xorwf	___ftadd@f1,f,c
  8092  001996  0EFF               	movlw	255
  8093  001998  1A25               	xorwf	___ftadd@f1+1,f,c
  8094  00199A  0EFF               	movlw	255
  8095  00199C  1A26               	xorwf	___ftadd@f1+2,f,c
  8096  00199E  0E01               	movlw	1
  8097  0019A0  2624               	addwf	___ftadd@f1,f,c
  8098  0019A2  0E00               	movlw	0
  8099  0019A4  2225               	addwfc	___ftadd@f1+1,f,c
  8100  0019A6  0E00               	movlw	0
  8101  0019A8  2226               	addwfc	___ftadd@f1+2,f,c
  8102  0019AA                     l838:
  8103  0019AA  AC2D               	btfss	___ftadd@sign,6,c
  8104  0019AC  D00C               	goto	l4086
  8105  0019AE  0EFF               	movlw	255
  8106  0019B0  1A27               	xorwf	___ftadd@f2,f,c
  8107  0019B2  0EFF               	movlw	255
  8108  0019B4  1A28               	xorwf	___ftadd@f2+1,f,c
  8109  0019B6  0EFF               	movlw	255
  8110  0019B8  1A29               	xorwf	___ftadd@f2+2,f,c
  8111  0019BA  0E01               	movlw	1
  8112  0019BC  2627               	addwf	___ftadd@f2,f,c
  8113  0019BE  0E00               	movlw	0
  8114  0019C0  2228               	addwfc	___ftadd@f2+1,f,c
  8115  0019C2  0E00               	movlw	0
  8116  0019C4  2229               	addwfc	___ftadd@f2+2,f,c
  8117  0019C6                     l4086:
  8118  0019C6  0E00               	movlw	0
  8119  0019C8  6E2D               	movwf	___ftadd@sign,c
  8120  0019CA  5024               	movf	___ftadd@f1,w,c
  8121  0019CC  2627               	addwf	___ftadd@f2,f,c
  8122  0019CE  5025               	movf	___ftadd@f1+1,w,c
  8123  0019D0  2228               	addwfc	___ftadd@f2+1,f,c
  8124  0019D2  5026               	movf	___ftadd@f1+2,w,c
  8125  0019D4  2229               	addwfc	___ftadd@f2+2,f,c
  8126  0019D6  AE29               	btfss	___ftadd@f2+2,7,c
  8127  0019D8  D00E               	goto	l4096
  8128  0019DA  0EFF               	movlw	255
  8129  0019DC  1A27               	xorwf	___ftadd@f2,f,c
  8130  0019DE  0EFF               	movlw	255
  8131  0019E0  1A28               	xorwf	___ftadd@f2+1,f,c
  8132  0019E2  0EFF               	movlw	255
  8133  0019E4  1A29               	xorwf	___ftadd@f2+2,f,c
  8134  0019E6  0E01               	movlw	1
  8135  0019E8  2627               	addwf	___ftadd@f2,f,c
  8136  0019EA  0E00               	movlw	0
  8137  0019EC  2228               	addwfc	___ftadd@f2+1,f,c
  8138  0019EE  0E00               	movlw	0
  8139  0019F0  2229               	addwfc	___ftadd@f2+2,f,c
  8140  0019F2  0E01               	movlw	1
  8141  0019F4  6E2D               	movwf	___ftadd@sign,c
  8142  0019F6                     l4096:
  8143  0019F6  C027  F018         	movff	___ftadd@f2,___ftpack@arg
  8144  0019FA  C028  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  8145  0019FE  C029  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  8146  001A02  C02F  F01B         	movff	___ftadd@exp1,___ftpack@exp
  8147  001A06  C02D  F01C         	movff	___ftadd@sign,___ftpack@sign
  8148  001A0A  ECDE  F013         	call	___ftpack	;wreg free
  8149  001A0E  C018  F024         	movff	?___ftpack,?___ftadd
  8150  001A12  C019  F025         	movff	?___ftpack+1,?___ftadd+1
  8151  001A16  C01A  F026         	movff	?___ftpack+2,?___ftadd+2
  8152  001A1A  0012               	return	
  8153  001A1C                     __end_of___ftadd:
  8154                           	opt stack 0
  8155                           tblptru	equ	0xFF8
  8156                           tblptrh	equ	0xFF7
  8157                           tblptrl	equ	0xFF6
  8158                           tablat	equ	0xFF5
  8159                           prodh	equ	0xFF4
  8160                           prodl	equ	0xFF3
  8161                           intcon	equ	0xFF2
  8162                           postinc0	equ	0xFEE
  8163                           wreg	equ	0xFE8
  8164                           postdec1	equ	0xFE5
  8165                           fsr1l	equ	0xFE1
  8166                           postinc2	equ	0xFDE
  8167                           postdec2	equ	0xFDD
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function ___ftpack *****************
  8173 ;; Defined at:
  8174 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  arg             3   23[COMRAM] unsigned um
  8177 ;;  exp             1   26[COMRAM] unsigned char 
  8178 ;;  sign            1   27[COMRAM] unsigned char 
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;		None
  8181 ;; Return value:  Size  Location     Type
  8182 ;;                  3   23[COMRAM] float 
  8183 ;; Registers used:
  8184 ;;		wreg, status,2, status,0
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8190 ;;      Params:         5       0       0       0       0       0       0
  8191 ;;      Locals:         0       0       0       0       0       0       0
  8192 ;;      Temps:          3       0       0       0       0       0       0
  8193 ;;      Totals:         8       0       0       0       0       0       0
  8194 ;;Total ram usage:        8 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    2
  8197 ;; This function calls:
  8198 ;;		Nothing
  8199 ;; This function is called by:
  8200 ;;		___altoft
  8201 ;;		___awtoft
  8202 ;;		___ftadd
  8203 ;;		___ftdiv
  8204 ;;		___ftmul
  8205 ;;		___lltoft
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           	psect	text38
  8210  0027BC                     __ptext38:
  8211                           	opt stack 0
  8212  0027BC                     ___ftpack:
  8213                           	opt stack 24
  8214                           
  8215                           ;incstack = 0
  8216  0027BC  501B               	movf	___ftpack@exp,w,c
  8217  0027BE  B4D8               	btfsc	status,2,c
  8218  0027C0  D005               	goto	l3976
  8219  0027C2  5018               	movf	___ftpack@arg,w,c
  8220  0027C4  1019               	iorwf	___ftpack@arg+1,w,c
  8221  0027C6  101A               	iorwf	___ftpack@arg+2,w,c
  8222  0027C8  A4D8               	btfss	status,2,c
  8223  0027CA  D00C               	goto	l3982
  8224  0027CC                     l3976:
  8225  0027CC  0E00               	movlw	0
  8226  0027CE  6E18               	movwf	?___ftpack,c
  8227  0027D0  0E00               	movlw	0
  8228  0027D2  6E19               	movwf	?___ftpack+1,c
  8229  0027D4  0E00               	movlw	0
  8230  0027D6  6E1A               	movwf	?___ftpack+2,c
  8231  0027D8  0012               	return	
  8232  0027DA                     l3980:
  8233  0027DA  2A1B               	incf	___ftpack@exp,f,c
  8234  0027DC  90D8               	bcf	status,0,c
  8235  0027DE  321A               	rrcf	___ftpack@arg+2,f,c
  8236  0027E0  3219               	rrcf	___ftpack@arg+1,f,c
  8237  0027E2  3218               	rrcf	___ftpack@arg,f,c
  8238  0027E4                     l3982:
  8239  0027E4  0E00               	movlw	0
  8240  0027E6  1418               	andwf	___ftpack@arg,w,c
  8241  0027E8  6E1D               	movwf	??___ftpack& (0+255),c
  8242  0027EA  0E00               	movlw	0
  8243  0027EC  1419               	andwf	___ftpack@arg+1,w,c
  8244  0027EE  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  8245  0027F0  0EFE               	movlw	254
  8246  0027F2  141A               	andwf	___ftpack@arg+2,w,c
  8247  0027F4  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  8248  0027F6  501D               	movf	??___ftpack,w,c
  8249  0027F8  101E               	iorwf	??___ftpack+1,w,c
  8250  0027FA  101F               	iorwf	??___ftpack+2,w,c
  8251  0027FC  B4D8               	btfsc	status,2,c
  8252  0027FE  D00C               	goto	l3988
  8253  002800  D7EC               	goto	l3980
  8254  002802                     l3984:
  8255  002802  2A1B               	incf	___ftpack@exp,f,c
  8256  002804  0E01               	movlw	1
  8257  002806  2618               	addwf	___ftpack@arg,f,c
  8258  002808  0E00               	movlw	0
  8259  00280A  2219               	addwfc	___ftpack@arg+1,f,c
  8260  00280C  0E00               	movlw	0
  8261  00280E  221A               	addwfc	___ftpack@arg+2,f,c
  8262  002810  90D8               	bcf	status,0,c
  8263  002812  321A               	rrcf	___ftpack@arg+2,f,c
  8264  002814  3219               	rrcf	___ftpack@arg+1,f,c
  8265  002816  3218               	rrcf	___ftpack@arg,f,c
  8266  002818                     l3988:
  8267  002818  0E00               	movlw	0
  8268  00281A  1418               	andwf	___ftpack@arg,w,c
  8269  00281C  6E1D               	movwf	??___ftpack& (0+255),c
  8270  00281E  0E00               	movlw	0
  8271  002820  1419               	andwf	___ftpack@arg+1,w,c
  8272  002822  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  8273  002824  0EFF               	movlw	255
  8274  002826  141A               	andwf	___ftpack@arg+2,w,c
  8275  002828  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  8276  00282A  501D               	movf	??___ftpack,w,c
  8277  00282C  101E               	iorwf	??___ftpack+1,w,c
  8278  00282E  101F               	iorwf	??___ftpack+2,w,c
  8279  002830  B4D8               	btfsc	status,2,c
  8280  002832  D006               	goto	l3992
  8281  002834  D7E6               	goto	l3984
  8282  002836                     l3990:
  8283  002836  061B               	decf	___ftpack@exp,f,c
  8284  002838  90D8               	bcf	status,0,c
  8285  00283A  3618               	rlcf	___ftpack@arg,f,c
  8286  00283C  3619               	rlcf	___ftpack@arg+1,f,c
  8287  00283E  361A               	rlcf	___ftpack@arg+2,f,c
  8288  002840                     l3992:
  8289  002840  BE19               	btfsc	___ftpack@arg+1,7,c
  8290  002842  D003               	goto	l791
  8291  002844  0E02               	movlw	2
  8292  002846  601B               	cpfslt	___ftpack@exp,c
  8293  002848  D7F6               	goto	l3990
  8294  00284A                     l791:
  8295  00284A  A01B               	btfss	___ftpack@exp,0,c
  8296  00284C  9E19               	bcf	___ftpack@arg+1,7,c
  8297  00284E  90D8               	bcf	status,0,c
  8298  002850  321B               	rrcf	___ftpack@exp,f,c
  8299  002852  501B               	movf	___ftpack@exp,w,c
  8300  002854  121A               	iorwf	___ftpack@arg+2,f,c
  8301  002856  501C               	movf	___ftpack@sign,w,c
  8302  002858  A4D8               	btfss	status,2,c
  8303  00285A  8E1A               	bsf	___ftpack@arg+2,7,c
  8304  00285C  C018  F018         	movff	___ftpack@arg,?___ftpack
  8305  002860  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  8306  002864  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  8307  002868  0012               	return	
  8308  00286A                     __end_of___ftpack:
  8309                           	opt stack 0
  8310                           tblptru	equ	0xFF8
  8311                           tblptrh	equ	0xFF7
  8312                           tblptrl	equ	0xFF6
  8313                           tablat	equ	0xFF5
  8314                           prodh	equ	0xFF4
  8315                           prodl	equ	0xFF3
  8316                           intcon	equ	0xFF2
  8317                           postinc0	equ	0xFEE
  8318                           wreg	equ	0xFE8
  8319                           postdec1	equ	0xFE5
  8320                           fsr1l	equ	0xFE1
  8321                           postinc2	equ	0xFDE
  8322                           postdec2	equ	0xFDD
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _PICsetup *****************
  8328 ;; Defined at:
  8329 ;;		line 17 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\main.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;		None
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;		None
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      void 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8343 ;;      Params:         0       0       0       0       0       0       0
  8344 ;;      Locals:         0       0       0       0       0       0       0
  8345 ;;      Temps:          0       0       0       0       0       0       0
  8346 ;;      Totals:         0       0       0       0       0       0       0
  8347 ;;Total ram usage:        0 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    2
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_main
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text39
  8358  002F2C                     __ptext39:
  8359                           	opt stack 0
  8360  002F2C                     _PICsetup:
  8361                           	opt stack 28
  8362                           
  8363                           ;main.c: 18: OSCCON =0b01110000;
  8364                           
  8365                           ;incstack = 0
  8366  002F2C  0E70               	movlw	112
  8367  002F2E  6ED3               	movwf	4051,c	;volatile
  8368                           
  8369                           ;main.c: 19: PLLEN =1;
  8370  002F30  8C9B               	bsf	3995,6,c	;volatile
  8371                           
  8372                           ;main.c: 20: TRISA =0b11111110;
  8373  002F32  0EFE               	movlw	254
  8374  002F34  6E92               	movwf	3986,c	;volatile
  8375                           
  8376                           ;main.c: 21: TRISB =0b11000011;
  8377  002F36  0EC3               	movlw	195
  8378  002F38  6E93               	movwf	3987,c	;volatile
  8379                           
  8380                           ;main.c: 22: TRISC =0b10111001;
  8381  002F3A  0EB9               	movlw	185
  8382  002F3C  6E94               	movwf	3988,c	;volatile
  8383                           
  8384                           ;main.c: 23: T0CON =0b10001000;
  8385  002F3E  0E88               	movlw	136
  8386  002F40  6ED5               	movwf	4053,c	;volatile
  8387                           
  8388                           ;main.c: 24: RA0 =0;
  8389  002F42  9080               	bcf	3968,0,c	;volatile
  8390                           
  8391                           ;main.c: 25: RB2 =0;
  8392  002F44  9481               	bcf	3969,2,c	;volatile
  8393                           
  8394                           ;main.c: 26: RB3 =0;
  8395  002F46  9681               	bcf	3969,3,c	;volatile
  8396                           
  8397                           ;main.c: 27: RB4 =0;
  8398  002F48  9881               	bcf	3969,4,c	;volatile
  8399                           
  8400                           ;main.c: 28: RB5 =0;
  8401  002F4A  9A81               	bcf	3969,5,c	;volatile
  8402                           
  8403                           ;main.c: 29: TMR0IE =1;
  8404  002F4C  8AF2               	bsf	intcon,5,c	;volatile
  8405  002F4E  0012               	return		;funcret
  8406  002F50                     __end_of_PICsetup:
  8407                           	opt stack 0
  8408                           tblptru	equ	0xFF8
  8409                           tblptrh	equ	0xFF7
  8410                           tblptrl	equ	0xFF6
  8411                           tablat	equ	0xFF5
  8412                           prodh	equ	0xFF4
  8413                           prodl	equ	0xFF3
  8414                           intcon	equ	0xFF2
  8415                           postinc0	equ	0xFEE
  8416                           wreg	equ	0xFE8
  8417                           postdec1	equ	0xFE5
  8418                           fsr1l	equ	0xFE1
  8419                           postinc2	equ	0xFDE
  8420                           postdec2	equ	0xFDD
  8421                           fsr2h	equ	0xFDA
  8422                           fsr2l	equ	0xFD9
  8423                           status	equ	0xFD8
  8424                           
  8425 ;; *************** function _OpenI2C_StSpeed *****************
  8426 ;; Defined at:
  8427 ;;		line 59 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\i2c.c"
  8428 ;; Parameters:    Size  Location     Type
  8429 ;;		None
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;		None
  8432 ;; Return value:  Size  Location     Type
  8433 ;;                  1    wreg      void 
  8434 ;; Registers used:
  8435 ;;		wreg, status,2
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8441 ;;      Params:         0       0       0       0       0       0       0
  8442 ;;      Locals:         0       0       0       0       0       0       0
  8443 ;;      Temps:          0       0       0       0       0       0       0
  8444 ;;      Totals:         0       0       0       0       0       0       0
  8445 ;;Total ram usage:        0 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    2
  8448 ;; This function calls:
  8449 ;;		Nothing
  8450 ;; This function is called by:
  8451 ;;		_main
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           	psect	text40
  8456  002F7E                     __ptext40:
  8457                           	opt stack 0
  8458  002F7E                     _OpenI2C_StSpeed:
  8459                           	opt stack 28
  8460                           
  8461                           ;i2c.c: 61: SSPCON1 = 0b00101000;
  8462                           
  8463                           ;incstack = 0
  8464  002F7E  0E28               	movlw	40
  8465  002F80  6EC6               	movwf	4038,c	;volatile
  8466                           
  8467                           ;i2c.c: 62: SSPSTAT = 0b00000000;
  8468  002F82  0E00               	movlw	0
  8469  002F84  6EC7               	movwf	4039,c	;volatile
  8470                           
  8471                           ;i2c.c: 63: SSPADD = 19;
  8472  002F86  0E13               	movlw	19
  8473  002F88  6EC8               	movwf	4040,c	;volatile
  8474                           
  8475                           ;i2c.c: 64: SSPCON2 = 0;
  8476  002F8A  0E00               	movlw	0
  8477  002F8C  6EC5               	movwf	4037,c	;volatile
  8478  002F8E  0012               	return		;funcret
  8479  002F90                     __end_of_OpenI2C_StSpeed:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon	equ	0xFF2
  8488                           postinc0	equ	0xFEE
  8489                           wreg	equ	0xFE8
  8490                           postdec1	equ	0xFE5
  8491                           fsr1l	equ	0xFE1
  8492                           postinc2	equ	0xFDE
  8493                           postdec2	equ	0xFDD
  8494                           fsr2h	equ	0xFDA
  8495                           fsr2l	equ	0xFD9
  8496                           status	equ	0xFD8
  8497                           
  8498 ;; *************** function _my_ISR *****************
  8499 ;; Defined at:
  8500 ;;		line 57 in file "D:\Desktop\Self Balancing Robot v2.0 Funzionante quasi\main.c"
  8501 ;; Parameters:    Size  Location     Type
  8502 ;;		None
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;		None
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  2  408[None  ] int 
  8507 ;; Registers used:
  8508 ;;		wreg, status,2, status,0, cstack
  8509 ;; Tracked objects:
  8510 ;;		On entry : 0/0
  8511 ;;		On exit  : 0/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8514 ;;      Params:         0       0       0       0       0       0       0
  8515 ;;      Locals:         0       0       0       0       0       0       0
  8516 ;;      Temps:         14       0       0       0       0       0       0
  8517 ;;      Totals:        14       0       0       0       0       0       0
  8518 ;;Total ram usage:       14 bytes
  8519 ;; Hardware stack levels used:    1
  8520 ;; Hardware stack levels required when called:    1
  8521 ;; This function calls:
  8522 ;;		___llmod
  8523 ;; This function is called by:
  8524 ;;		Interrupt level 2
  8525 ;; This function uses a non-reentrant model
  8526 ;;
  8527                           
  8528                           	psect	intcode
  8529  000008                     __pintcode:
  8530                           	opt stack 0
  8531  000008                     _my_ISR:
  8532                           	opt stack 23
  8533                           
  8534                           ;incstack = 0
  8535  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8536  00000A  CFFA F00A          	movff	pclath,??_my_ISR
  8537  00000E  CFFB F00B          	movff	pclatu,??_my_ISR+1
  8538  000012  ED1E  F013         	call	int_func,f	;refresh shadow registers
  8539                           pclatu	equ	0xFFB
  8540                           pclath	equ	0xFFA
  8541                           tblptru	equ	0xFF8
  8542                           tblptrh	equ	0xFF7
  8543                           tblptrl	equ	0xFF6
  8544                           tablat	equ	0xFF5
  8545                           prodh	equ	0xFF4
  8546                           prodl	equ	0xFF3
  8547                           intcon	equ	0xFF2
  8548                           postinc0	equ	0xFEE
  8549                           wreg	equ	0xFE8
  8550                           postdec1	equ	0xFE5
  8551                           fsr1l	equ	0xFE1
  8552                           postinc2	equ	0xFDE
  8553                           postdec2	equ	0xFDD
  8554                           fsr2h	equ	0xFDA
  8555                           fsr2l	equ	0xFD9
  8556                           status	equ	0xFD8
  8557                           
  8558                           	psect	intcode_body
  8559  00263C                     __pintcode_body:
  8560                           	opt stack 23
  8561  00263C                     int_func:
  8562                           	opt stack 23
  8563  00263C  0006               	pop		; remove dummy address from shadow register refresh
  8564  00263E  CFE9 F00C          	movff	fsr0l,??_my_ISR+2
  8565  002642  CFEA F00D          	movff	fsr0h,??_my_ISR+3
  8566  002646  CFE1 F00E          	movff	fsr1l,??_my_ISR+4
  8567  00264A  CFE2 F00F          	movff	fsr1h,??_my_ISR+5
  8568  00264E  CFD9 F010          	movff	fsr2l,??_my_ISR+6
  8569  002652  CFDA F011          	movff	fsr2h,??_my_ISR+7
  8570  002656  CFF3 F012          	movff	prodl,??_my_ISR+8
  8571  00265A  CFF4 F013          	movff	prodh,??_my_ISR+9
  8572  00265E  CFF6 F014          	movff	tblptrl,??_my_ISR+10
  8573  002662  CFF7 F015          	movff	tblptrh,??_my_ISR+11
  8574  002666  CFF8 F016          	movff	tblptru,??_my_ISR+12
  8575  00266A  CFF5 F017          	movff	tablat,??_my_ISR+13
  8576                           
  8577                           ;main.c: 58: if(TMR0IE && TMR0IF){
  8578  00266E  BAF2               	btfsc	intcon,5,c	;volatile
  8579  002670  A4F2               	btfss	intcon,2,c	;volatile
  8580  002672  D029               	goto	i2l411
  8581                           
  8582                           ;main.c: 59: TMR0 =-8000;
  8583  002674  0EE0               	movlw	224
  8584  002676  6ED7               	movwf	4055,c	;volatile
  8585  002678  0EC0               	movlw	192
  8586  00267A  6ED6               	movwf	4054,c	;volatile
  8587                           
  8588                           ;main.c: 60: TMR0IF = 0;
  8589  00267C  94F2               	bcf	intcon,2,c	;volatile
  8590                           
  8591                           ;main.c: 61: millis++;
  8592  00267E  0E01               	movlw	1
  8593  002680  0100               	movlb	0	; () banked
  8594  002682  27D3               	addwf	_millis& (0+255),f,b
  8595  002684  0E00               	movlw	0
  8596  002686  23D4               	addwfc	(_millis+1)& (0+255),f,b
  8597  002688  23D5               	addwfc	(_millis+2)& (0+255),f,b
  8598  00268A  23D6               	addwfc	(_millis+3)& (0+255),f,b
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;main.c: 62: if (millis%100 == 0) RA0 = !RA0;
  8602  00268C  C0D3  F001         	movff	_millis,___llmod@dividend
  8603  002690  C0D4  F002         	movff	_millis+1,___llmod@dividend+1
  8604  002694  C0D5  F003         	movff	_millis+2,___llmod@dividend+2
  8605  002698  C0D6  F004         	movff	_millis+3,___llmod@dividend+3
  8606  00269C  0E64               	movlw	100
  8607  00269E  6E05               	movwf	___llmod@divisor,c
  8608  0026A0  0E00               	movlw	0
  8609  0026A2  6E06               	movwf	___llmod@divisor+1,c
  8610  0026A4  0E00               	movlw	0
  8611  0026A6  6E07               	movwf	___llmod@divisor+2,c
  8612  0026A8  0E00               	movlw	0
  8613  0026AA  6E08               	movwf	___llmod@divisor+3,c
  8614  0026AC  EC61  F016         	call	___llmod	;wreg free
  8615  0026B0  5001               	movf	?___llmod,w,c
  8616  0026B2  1002               	iorwf	?___llmod+1,w,c
  8617  0026B4  1003               	iorwf	?___llmod+2,w,c
  8618  0026B6  1004               	iorwf	?___llmod+3,w,c
  8619  0026B8  A4D8               	btfss	status,2,c
  8620  0026BA  D005               	goto	i2l411
  8621  0026BC  B080               	btfsc	3968,0,c	;volatile
  8622  0026BE  D002               	goto	i2u418_40
  8623  0026C0  8080               	bsf	3968,0,c	;volatile
  8624  0026C2  D001               	goto	i2l411
  8625  0026C4                     i2u418_40:
  8626  0026C4  9080               	bcf	3968,0,c	;volatile
  8627  0026C6                     i2l411:
  8628  0026C6  C017  FFF5         	movff	??_my_ISR+13,tablat
  8629  0026CA  C016  FFF8         	movff	??_my_ISR+12,tblptru
  8630  0026CE  C015  FFF7         	movff	??_my_ISR+11,tblptrh
  8631  0026D2  C014  FFF6         	movff	??_my_ISR+10,tblptrl
  8632  0026D6  C013  FFF4         	movff	??_my_ISR+9,prodh
  8633  0026DA  C012  FFF3         	movff	??_my_ISR+8,prodl
  8634  0026DE  C011  FFDA         	movff	??_my_ISR+7,fsr2h
  8635  0026E2  C010  FFD9         	movff	??_my_ISR+6,fsr2l
  8636  0026E6  C00F  FFE2         	movff	??_my_ISR+5,fsr1h
  8637  0026EA  C00E  FFE1         	movff	??_my_ISR+4,fsr1l
  8638  0026EE  C00D  FFEA         	movff	??_my_ISR+3,fsr0h
  8639  0026F2  C00C  FFE9         	movff	??_my_ISR+2,fsr0l
  8640  0026F6  C00B  FFFB         	movff	??_my_ISR+1,pclatu
  8641  0026FA  C00A  FFFA         	movff	??_my_ISR,pclath
  8642  0026FE  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8643  002700  0011               	retfie		f
  8644  002702                     __end_of_my_ISR:
  8645                           	opt stack 0
  8646                           pclatu	equ	0xFFB
  8647                           pclath	equ	0xFFA
  8648                           tblptru	equ	0xFF8
  8649                           tblptrh	equ	0xFF7
  8650                           tblptrl	equ	0xFF6
  8651                           tablat	equ	0xFF5
  8652                           prodh	equ	0xFF4
  8653                           prodl	equ	0xFF3
  8654                           intcon	equ	0xFF2
  8655                           postinc0	equ	0xFEE
  8656                           fsr0h	equ	0xFEA
  8657                           fsr0l	equ	0xFE9
  8658                           wreg	equ	0xFE8
  8659                           postdec1	equ	0xFE5
  8660                           fsr1h	equ	0xFE2
  8661                           fsr1l	equ	0xFE1
  8662                           postinc2	equ	0xFDE
  8663                           postdec2	equ	0xFDD
  8664                           fsr2h	equ	0xFDA
  8665                           fsr2l	equ	0xFD9
  8666                           status	equ	0xFD8
  8667                           
  8668 ;; *************** function ___llmod *****************
  8669 ;; Defined at:
  8670 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;  dividend        4    0[COMRAM] unsigned long 
  8673 ;;  divisor         4    4[COMRAM] unsigned long 
  8674 ;; Auto vars:     Size  Location     Type
  8675 ;;  counter         1    8[COMRAM] unsigned char 
  8676 ;; Return value:  Size  Location     Type
  8677 ;;                  4    0[COMRAM] unsigned long 
  8678 ;; Registers used:
  8679 ;;		wreg, status,2, status,0
  8680 ;; Tracked objects:
  8681 ;;		On entry : 0/0
  8682 ;;		On exit  : 0/0
  8683 ;;		Unchanged: 0/0
  8684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8685 ;;      Params:         8       0       0       0       0       0       0
  8686 ;;      Locals:         1       0       0       0       0       0       0
  8687 ;;      Temps:          0       0       0       0       0       0       0
  8688 ;;      Totals:         9       0       0       0       0       0       0
  8689 ;;Total ram usage:        9 bytes
  8690 ;; Hardware stack levels used:    1
  8691 ;; This function calls:
  8692 ;;		Nothing
  8693 ;; This function is called by:
  8694 ;;		_my_ISR
  8695 ;;		_sprintf
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699                           	psect	text42
  8700  002CC2                     __ptext42:
  8701                           	opt stack 0
  8702  002CC2                     ___llmod:
  8703                           	opt stack 23
  8704                           
  8705                           ;incstack = 0
  8706  002CC2  5005               	movf	___llmod@divisor,w,c
  8707  002CC4  1006               	iorwf	___llmod@divisor+1,w,c
  8708  002CC6  1007               	iorwf	___llmod@divisor+2,w,c
  8709  002CC8  1008               	iorwf	___llmod@divisor+3,w,c
  8710  002CCA  B4D8               	btfsc	status,2,c
  8711  002CCC  D024               	goto	i2l948
  8712  002CCE  0E01               	movlw	1
  8713  002CD0  6E09               	movwf	___llmod@counter,c
  8714  002CD2  D006               	goto	i2l3384
  8715  002CD4                     i2l3382:
  8716  002CD4  90D8               	bcf	status,0,c
  8717  002CD6  3605               	rlcf	___llmod@divisor,f,c
  8718  002CD8  3606               	rlcf	___llmod@divisor+1,f,c
  8719  002CDA  3607               	rlcf	___llmod@divisor+2,f,c
  8720  002CDC  3608               	rlcf	___llmod@divisor+3,f,c
  8721  002CDE  2A09               	incf	___llmod@counter,f,c
  8722  002CE0                     i2l3384:
  8723  002CE0  AE08               	btfss	___llmod@divisor+3,7,c
  8724  002CE2  D7F8               	goto	i2l3382
  8725  002CE4                     i2l3386:
  8726  002CE4  5005               	movf	___llmod@divisor,w,c
  8727  002CE6  5C01               	subwf	___llmod@dividend,w,c
  8728  002CE8  5006               	movf	___llmod@divisor+1,w,c
  8729  002CEA  5802               	subwfb	___llmod@dividend+1,w,c
  8730  002CEC  5007               	movf	___llmod@divisor+2,w,c
  8731  002CEE  5803               	subwfb	___llmod@dividend+2,w,c
  8732  002CF0  5008               	movf	___llmod@divisor+3,w,c
  8733  002CF2  5804               	subwfb	___llmod@dividend+3,w,c
  8734  002CF4  A0D8               	btfss	status,0,c
  8735  002CF6  D008               	goto	i2l3390
  8736  002CF8  5005               	movf	___llmod@divisor,w,c
  8737  002CFA  5E01               	subwf	___llmod@dividend,f,c
  8738  002CFC  5006               	movf	___llmod@divisor+1,w,c
  8739  002CFE  5A02               	subwfb	___llmod@dividend+1,f,c
  8740  002D00  5007               	movf	___llmod@divisor+2,w,c
  8741  002D02  5A03               	subwfb	___llmod@dividend+2,f,c
  8742  002D04  5008               	movf	___llmod@divisor+3,w,c
  8743  002D06  5A04               	subwfb	___llmod@dividend+3,f,c
  8744  002D08                     i2l3390:
  8745  002D08  90D8               	bcf	status,0,c
  8746  002D0A  3208               	rrcf	___llmod@divisor+3,f,c
  8747  002D0C  3207               	rrcf	___llmod@divisor+2,f,c
  8748  002D0E  3206               	rrcf	___llmod@divisor+1,f,c
  8749  002D10  3205               	rrcf	___llmod@divisor,f,c
  8750  002D12  2E09               	decfsz	___llmod@counter,f,c
  8751  002D14  D7E7               	goto	i2l3386
  8752  002D16                     i2l948:
  8753  002D16  C001  F001         	movff	___llmod@dividend,?___llmod
  8754  002D1A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  8755  002D1E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  8756  002D22  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  8757  002D26  0012               	return		;funcret
  8758  002D28                     __end_of___llmod:
  8759                           	opt stack 0
  8760                           pclatu	equ	0xFFB
  8761                           pclath	equ	0xFFA
  8762                           tblptru	equ	0xFF8
  8763                           tblptrh	equ	0xFF7
  8764                           tblptrl	equ	0xFF6
  8765                           tablat	equ	0xFF5
  8766                           prodh	equ	0xFF4
  8767                           prodl	equ	0xFF3
  8768                           intcon	equ	0xFF2
  8769                           postinc0	equ	0xFEE
  8770                           fsr0h	equ	0xFEA
  8771                           fsr0l	equ	0xFE9
  8772                           wreg	equ	0xFE8
  8773                           postdec1	equ	0xFE5
  8774                           fsr1h	equ	0xFE2
  8775                           fsr1l	equ	0xFE1
  8776                           postinc2	equ	0xFDE
  8777                           postdec2	equ	0xFDD
  8778                           fsr2h	equ	0xFDA
  8779                           fsr2l	equ	0xFD9
  8780                           status	equ	0xFD8
  8781                           pclatu	equ	0xFFB
  8782                           pclath	equ	0xFFA
  8783                           tblptru	equ	0xFF8
  8784                           tblptrh	equ	0xFF7
  8785                           tblptrl	equ	0xFF6
  8786                           tablat	equ	0xFF5
  8787                           prodh	equ	0xFF4
  8788                           prodl	equ	0xFF3
  8789                           intcon	equ	0xFF2
  8790                           postinc0	equ	0xFEE
  8791                           fsr0h	equ	0xFEA
  8792                           fsr0l	equ	0xFE9
  8793                           wreg	equ	0xFE8
  8794                           postdec1	equ	0xFE5
  8795                           fsr1h	equ	0xFE2
  8796                           fsr1l	equ	0xFE1
  8797                           postinc2	equ	0xFDE
  8798                           postdec2	equ	0xFDD
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803                           	psect	rparam
  8804  0000                     pclatu	equ	0xFFB
  8805                           pclath	equ	0xFFA
  8806                           tblptru	equ	0xFF8
  8807                           tblptrh	equ	0xFF7
  8808                           tblptrl	equ	0xFF6
  8809                           tablat	equ	0xFF5
  8810                           prodh	equ	0xFF4
  8811                           prodl	equ	0xFF3
  8812                           intcon	equ	0xFF2
  8813                           postinc0	equ	0xFEE
  8814                           fsr0h	equ	0xFEA
  8815                           fsr0l	equ	0xFE9
  8816                           wreg	equ	0xFE8
  8817                           postdec1	equ	0xFE5
  8818                           fsr1h	equ	0xFE2
  8819                           fsr1l	equ	0xFE1
  8820                           postinc2	equ	0xFDE
  8821                           postdec2	equ	0xFDD
  8822                           fsr2h	equ	0xFDA
  8823                           fsr2l	equ	0xFD9
  8824                           status	equ	0xFD8
  8825                           
  8826                           	psect	temp
  8827  000048                     btemp:
  8828                           	opt stack 0
  8829  000048                     	ds	1
  8830  0000                     int$flags	set	btemp
  8831                           pclatu	equ	0xFFB
  8832                           pclath	equ	0xFFA
  8833                           tblptru	equ	0xFF8
  8834                           tblptrh	equ	0xFF7
  8835                           tblptrl	equ	0xFF6
  8836                           tablat	equ	0xFF5
  8837                           prodh	equ	0xFF4
  8838                           prodl	equ	0xFF3
  8839                           intcon	equ	0xFF2
  8840                           postinc0	equ	0xFEE
  8841                           fsr0h	equ	0xFEA
  8842                           fsr0l	equ	0xFE9
  8843                           wreg	equ	0xFE8
  8844                           postdec1	equ	0xFE5
  8845                           fsr1h	equ	0xFE2
  8846                           fsr1l	equ	0xFE1
  8847                           postinc2	equ	0xFDE
  8848                           postdec2	equ	0xFDD
  8849                           fsr2h	equ	0xFDA
  8850                           fsr2l	equ	0xFD9
  8851                           status	equ	0xFD8


Data Sizes:
    Strings     7
    Constant    211
    Data        15
    BSS         66
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      71
    BANK0           160    115     141
    BANK1           256     39      74
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), atan@coeff_a(CODE[18]), atan@coeff_b(CODE[15]), 


Critical Paths under _main in COMRAM

    _sensorSetup->_WriteI2C
    _map->___aldiv
    ___aldiv->___lmul
    _computeAngle->___ftmul
    _sqrt->___ftmul
    _pow->___ftmul
    _log->___ftmul
    _exp->___ftmul
    ___altoft->___fttol
    ___ftsub->___ftadd
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    _getGyroY->_WriteI2C
    _getAccelZ->_WriteI2C
    _getAccelY->_WriteI2C
    _getAccelX->_WriteI2C
    _WriteI2C->_IdleI2C
    _atan->___ftmul
    _fabs->___ftneg
    _eval_poly->___ftmul
    ___ftdiv->___ftmul
    _PIDupdate->___ftmul
    ___ftneg->___ftpack
    ___ftmul->___ftadd
    ___ftge->___ftmul
    ___ftadd->___awtoft

Critical Paths under _my_ISR in COMRAM

    _my_ISR->___llmod

Critical Paths under _main in BANK0

    _main->_computeAngle
    _motorsUpdate->_map
    _computeAngle->_atan
    _sqrt->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->___ftdiv
    _ldexp->_eval_poly
    _floor->___ftge
    _atan->_sqrt
    _eval_poly->___ftmul
    ___ftdiv->___ftge
    _PIDupdate->___ftge
    ___ftge->___ftmul

Critical Paths under _my_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_computeAngle

Critical Paths under _my_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _my_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _my_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0  265399
                                            101 BANK0     14    14      0
                            _DelayMs
                    _OpenI2C_StSpeed
                           _PICsetup
                          _PIDupdate
                           _PWMSetup
                            ___ftadd
                             ___ftge
                            ___ftneg
                       _computeAngle
                       _motorsUpdate
                        _sensorSetup
 ---------------------------------------------------------------------------------
 (1) _sensorSetup                                          0     0      0      31
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (1) _motorsUpdate                                         2     0      2    1664
                                             32 BANK0      2     0      2
                                _map
 ---------------------------------------------------------------------------------
 (2) _map                                                 32    12     20    1352
                                              0 BANK0     32    12     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     322
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     428
                                             35 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _computeAngle                                        67    67      0  229277
                                             97 BANK0      4     4      0
                                              0 BANK1     39    39      0
                            _DelayMs
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lltoft
                               _atan
                          _getAccelX
                          _getAccelY
                          _getAccelZ
                           _getGyroY
                                _pow
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                19    16      3   20981
                                             62 BANK0     19    16      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftsub
                                _pow (ARG)
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6  128377
                                             45 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   42845
                                             24 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   68008
                                             36 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     513
                                             24 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   15417
                                             21 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     630
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    2865
                                             38 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    8843
                                              0 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3487
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2901
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _getGyroY                                            10     8      2     133
                                             25 COMRAM    10     8      2
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _getAccelZ                                           10     8      2     133
                                             25 COMRAM    10     8      2
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _getAccelY                                           10     8      2     133
                                             25 COMRAM    10     8      2
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _getAccelX                                           10     8      2     133
                                             25 COMRAM    10     8      2
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (2) _WriteI2C                                             1     1      0      31
                                             24 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (3) _IdleI2C                                              1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _atan                                                16    13      3   48481
                                             81 BANK0     16    13      3
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                          _eval_poly
                               _fabs
                                _pow (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 3     0      3    1374
                                             34 COMRAM     3     0      3
                            ___ftneg
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   21129
                                             12 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2736
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    4504
                                             21 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                            ___ftsub (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) _DelayMs                                              3     3      0     102
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _PWMSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIDupdate                                           33    33      0   22435
                                             21 BANK0     24    24      0
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     862
                                             23 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3    1204
                                             31 COMRAM     3     0      3
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    9012
                                             47 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6    2412
                                             12 BANK0      9     3      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    8203
                                             35 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _PICsetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenI2C_StSpeed                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _my_ISR                                              14    14      0     599
                                              9 COMRAM    14    14      0
                            ___llmod
 ---------------------------------------------------------------------------------
 (8) ___llmod                                              9     1      8     599
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DelayMs
   _OpenI2C_StSpeed
   _PICsetup
   _PIDupdate
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftge
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftpack (ARG)
     ___fttol
   _PWMSetup
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
     ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
     _frexp (ARG)
   ___ftge
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg (ARG)
       ___ftpack (ARG)
   ___ftneg
     ___ftpack (ARG)
   _computeAngle
     _DelayMs
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftneg
       ___ftpack (ARG)
     ___lltoft
       ___ftpack
     _atan
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftge (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _fabs (ARG)
         ___ftneg
           ___ftpack (ARG)
       _pow (ARG)
         ___ftge
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftpack (ARG)
         ___fttol
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftge
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___ftpack (ARG)
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___fttol
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___fttol
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _sqrt (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftge (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         _pow (ARG)
           ___ftge
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___ftpack (ARG)
           ___fttol
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge (ARG)
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftsub (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___ftge
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
               ___ftpack (ARG)
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
               ___fttol
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftneg (ARG)
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
     _getAccelX
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _getAccelY
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _getAccelZ
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _getGyroY
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _pow
       ___ftge
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
         ___ftpack (ARG)
       ___fttol
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftsub (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___ftge
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftpack (ARG)
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___fttol
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___wmul
         _frexp
     _sqrt
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftge (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftsub (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___ftge (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftsub (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
       _pow (ARG)
         ___ftge
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
           ___ftpack (ARG)
         ___fttol
         ___lltoft
           ___ftpack
         _exp
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftsub (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___ftge
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
             ___ftpack (ARG)
           ___ftsub
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
           ___fttol
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _floor
             ___altoft
               ___ftpack
               ___fttol (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftge
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
             ___fttol
             _frexp
           _ldexp
             _eval_poly (ARG)
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftneg (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
         _log
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
             ___wmul
           _frexp
   _motorsUpdate
     _map
       ___aldiv
         ___lmul (ARG)
       ___lmul
   _sensorSetup
     _IdleI2C
     _WriteI2C
       _IdleI2C

 _my_ISR (ROOT)
   ___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     27      4A       7       28.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     73      8D       5       88.1%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     32      47       1       75.5%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11E       3        0.0%
DATA                 0      0     11E      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Jun 30 22:39:23 2017

            ___altoft@exp 002F                         _K 00E7                         _i 00E6  
                       _j 003D               _SSPSTATbits 000FC7             ___altoft@sign 0030  
                      l95 2ECC                        l96 2EC8                        _kD 003E  
                      _kI 0041                        _kP 0044       ___wmul@multiplicand 001A  
            ___ftadd@exp1 002F              ___ftadd@exp2 002E              ___ftadd@sign 002D  
                     l201 28EE                       l300 2A60                       l204 28F8  
                     l213 29A8                       l222 29DA                       l303 2A66  
                     l231 2A0C                       l207 2910                       l160 2F62  
                     l240 2B4C                       l312 2A98                       l216 29BA  
                     l161 2F64                       l225 29E0                       l306 2A6C  
                     l234 2A12                       l243 2B5E                       l315 2A9E  
                     l219 29D4                       l252 2B84                       l228 29F2  
                     l180 2870                       l173 2EAC                       l261 2BB6  
                     l309 2A7E                       l325 09EA                       l246 2B78  
                     l270 2AD2                       l255 2B96                       l183 2888  
                     l192 28B4                       l249 2B7E                       l273 2AEC  
                     l258 2BB0                       l282 2B0A                       l186 2892  
                     l267 2AC0                       l195 28CC                       l276 2AF2  
                     l285 2B24                       l189 28AA                       l294 2A34  
                     l198 28D6                       l279 2AF8                       l288 2B2A  
                     l297 2A46                       l378 274C                       l814 18B4  
                     l399 1414                       l745 2E80                       l818 18DE  
                     l667 1570                       l829 198E                       l838 19AA  
                     l791 284A                       l849 1E2E                       _BIT 0238  
                     l888 2F1E                       _GIE 007F97                       _RA0 007C00  
                     _RB2 007C0A                       _RB3 007C0B                       _RB4 007C0C  
                     _RB5 007C0D                       _PR2 000FCB                       _PID 0039  
                     _map 1FA6                       _exp 10A4                       _log 1E64  
                     _pow 1A1C                       wreg 000FE8              __CFG_LVP$OFF 000000  
            ___ftdiv@cntr 007E              ___ftdiv@sign 0083              __CFG_WDT$OFF 000000  
                    l1023 1A62                      l1028 1BB8                      l1205 1186  
                    l1206 12CC                      l1216 22C6                      l1157 16FE  
                    l1158 16EA                      l4022 2BF8                      l4112 1C2E  
                    l4200 238E                      l4024 2C04                      l4130 1C9A  
                    l4106 1BFA                      l4202 239A                      l4060 191C  
                    l4044 18EC                      l4140 1CD8                      l4204 23A0  
                    l4220 293E                      l4070 1952                      l4038 18C2  
                    l4126 1C7C                      l4080 1986                      l4072 195A  
                    l4152 25B4                      l4136 1CBA                      l4208 23B6  
                    l4066 193E                      l4162 2638                      l4250 1D8C  
                    l4234 2F6C                      l4410 2D2E                      l4306 2E3A  
                    l2802 2DA8                      l4068 1948                      l4156 25F4  
                    l4172 2300                      l4244 1D52                      l4412 2D3A  
                    l4332 224A                      l4324 2218                      l2820 24DC  
                    l5212 13DC                      l4086 19C6                      l4078 197C  
                    l4190 2366                      l4270 1DEC                      l4430 1EB2  
                    l2830 250E                      l2814 24C4                      l4096 19F6  
                    l4328 222C                      l4352 2154                      l4344 20F0  
                    l4424 1E86                      l5216 144A                      l5208 1328  
                    l4194 2376                      l2826 24FE                      l2842 254C  
                    l5218 1458                      l4364 2180                      l4452 110C  
                    l2828 250A                      l4294 240C                      l4446 10C8  
                    l4622 1A76                      l2846 2562                      l2838 253E  
                    ?_map 0060                      l4296 248E                      l4704 1682  
                    l4288 2DFC                      l4368 2190                      l4480 129C  
                    l4640 1B30                      l5192 12F6                      l4810 0E40  
                    l4458 1150                      l4812 0E52                      l4492 2ED0  
                    l4708 1696                      l4636 1B0A                      l4628 1A9A  
                    l5188 12EC                      l4830 1078                      l4806 0E20  
                    l4486 2EBC                      l4494 2ED8                      l2798 2D94  
                    l5198 1302                      l4832 108A                      l4808 0E32  
                    l4488 2EC2                      l4760 070A                      l4826 1058  
                    l3980 27DA                      l4828 106A                      l4692 1508  
                    l4668 1766                      l4780 09F6                      l4756 0700  
                    l4844 2740                      ?_exp 0084                      ?_log 0078  
                    l3990 2836                      l3982 27E4                      l4774 08A6  
                    l4846 2754                      l4838 271E                      l3992 2840  
                    l3984 2802                      l3976 27CC                      l4784 0A26  
                    l3988 2818                      ?_pow 008D                      STR_1 06D4  
                    _BRGH 007D62                      u5020 2966             __CFG_DEBUG$ON 000000  
                    u5051 1D2E                      u5028 2968                      u5071 1D68  
                    u5160 223C                      u5190 2122                      u4631 1880  
                    u6080 2716                      u4641 1894                      u5370 115A  
                    _RCIE 007CED                      u5380 115C                      u5198 2126  
                    u5800 1AEE                      u4841 1BD8                      u4931 22E4  
                    u4861 1C0C                      u4950 231E                      u5850 1534  
                    u4955 2316                      u5860 1536                      u6690 14C6  
 __end_of_OpenI2C_StSpeed 2F90                      _TMR0 000FD6                      _SPEN 007D5F  
                    _TXIF 007CF4                      _TXEN 007D65                      _accX 00DA  
                    _fabs 2E5E                      _data 0127                      _atan 14C8  
                    _main 12DA                      _vPin 0147              ___ftpack@arg 0018  
            ___ftpack@exp 001B        motorsUpdate@torque 0080                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr0l 000FE9                      fsr2h 000FDA  
                    fsr1l 000FE1                      map@x 0060                      fsr2l 000FD9  
                    btemp 0048                      _sqrt 16B4                      exp@x 0084  
                    log@x 0078                      pclat 000FFA                      pow@x 008D  
                    pow@y 0090                      prodh 000FF4                      prodl 000FF3  
                    start 0016             ?_computeAngle 0001           __end_of_DelayMs 2EE2  
         __end_of_IdleI2C 2F7E             __CFG_MCLRE$ON 000000              ___ftmul@cntr 006A  
            ___param_bank 000010              ___ftmul@sign 006B           __end_of_ReadI2C 2F6C  
        computeAngle@mode 0103              ___fttol@exp1 0026                     ??_map 0074  
                   ??_exp 0033                     ??_log 0033              ___fttol@lval 0022  
                   ??_pow 0033                     ?_fabs 0023           __end_of___aldiv 2574  
                   ?_atan 00B1                     ?_main 0001           __end_of___ftadd 1A1C  
                   _BRG16 007DC3           __end_of___ftdiv 1E64           __end_of___ftneg 2F2C  
                   ?_sqrt 009E           __end_of___ftmul 1D18                     _T0CON 000FD5  
         __end_of___llmod 2D28           __end_of___ftsub 2E26           __end_of___fttol 23C8  
                   _T2CON 000FCA                     i2l411 26C6                     i2l948 2D16  
                   _PLLEN 007CDE                     _RCSTA 000FAB                     _SPBRG 000FAF  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISC 000F94  
                   _TXREG 000FAD                     _TXSTA 000FAC          __end_of_RADtoDEG 067A  
     ___lmul@multiplicand 001C              ___lltoft@exp 0028          __end_of_PICsetup 2F50  
           ___awtoft@sign 0023                     _alpha 00EA           __end_of_dpowers 0629  
                   fabs@d 0023                     _floor 21E0        __size_of_PIDupdate 036A  
                   _ldexp 20CC                     _frexp 2916                     _errno 003B  
                   atan@f 00B1                     _gyroY 0036                     atan@x 00B7  
                   atan@y 00B4             ___ftpack@sign 001C            __pbitbssCOMRAM 0238  
                   tablat 000FF5          __end_of_PWMSetup 2F9C                     pow@yi 009A  
                   sqrt@a 009E                     sqrt@i 00AA                     sqrt@q 00AB  
                   sqrt@x 00AE                     sqrt@z 00A7                     status 000FD8  
          ??_computeAngle 00C1               exp@exponent 008A               ldexp@newexp 007B  
         __initialization 2C4E               log@exponent 007B              __end_of_fabs 2E8E  
            __end_of_atan 16B4              __end_of_main 14C8              __end_of_sqrt 1870  
                  ??_fabs 0026                    ??_atan 0033                    ??_main 00C5  
           ___fttol@sign1 0021                    ??_sqrt 00A1             __activetblptr 000002  
    computeAngle@angleSum 0104                    ?_floor 0075                    ?_ldexp 0078  
                  ?_frexp 0018          __end_of___altoft 2C4E          ___llmod@dividend 0001  
                  _CCPR1L 000FBE          __end_of_WriteI2C 2EB8          __end_of___awtoft 2E5E  
        __end_of___ftpack 286A          __end_of___lltoft 2D84                    i2l3390 2D08  
                  i2l3382 2CD4                    i2l3384 2CE0                    i2l3386 2CE4  
        ?_OpenI2C_StSpeed 0001                 ??_DelayMs 0018                 ??_IdleI2C 0018  
                  _OSCCON 000FD3                    _TMR0IE 007F95                    _TMR0IF 007F92  
                  _SSPADD 000FC8                    _SSPBUF 000FC9                 ??_ReadI2C 0018  
    computeAngle@rawGyroY 0125          __end_of_getGyroY 2A32          __end_of__powers_ 0677  
                  ___ftge 2574                    ___lmul 2D84                 ??___aldiv 002C  
                  ___wmul 2EE2                 ??___ftadd 002A                 ??___ftdiv 007B  
               ??___ftneg 0023         __end_of_PIDupdate 10A4                 ??___ftmul 0030  
               ??___llmod 0009                 ??___ftsub 0030                 ??___fttol 001C  
                  _my_ISR 0008                    _errore 00E0                    _millis 00D3  
                  clear_0 2C94                    clear_1 2CA0                    clear_2 2CAE  
            ?_sensorSetup 0001                    floor@i 0078                    floor@x 0075  
   ___ftmul@f3_as_product 0067              __pdataCOMRAM 003E              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
                  sqrt@og 00A4          __end_ofexp@coeff 0698          __end_oflog@coeff 06B3  
              __accesstop 0060   __end_of__initialization 2CB4                ___altoft@c 0027  
         __CFG_PBADEN$OFF 000000                ___ftadd@f1 0024                ___ftadd@f2 0027  
              ___ftge@ff1 006C                ___ftge@ff2 006F              eval_poly@res 0075  
           ___rparam_used 000001                ___ftdiv@f1 0075                ___ftdiv@f2 0078  
              ___ftdiv@f3 007F                ___ftneg@f1 0020                ___awtoft@c 0020  
              ___ftmul@f1 0060                ___ftmul@f2 0063                ___ftsub@f1 0060  
              ___ftsub@f2 0063                ___fttol@f1 0018            __pcstackCOMRAM 0001  
            __pidataBANK0 2FA5                ___lltoft@c 0020                 ?_PICsetup 0001  
           __end_of_floor 22D4             __end_of_ldexp 21E0             __end_of_frexp 29A6  
      __size_of_getAccelX 008C        __size_of_getAccelY 008C        __size_of_getAccelZ 008C  
               ?_PWMSetup 0001           __CFG_OSC$IRCIO7 000000      __end_of_computeAngle 0D3A  
                 ??_floor 0033                   ??_ldexp 007D                   ??_frexp 001D  
              __pbssBANK0 00D3                __pbssBANK1 0127        __size_of_eval_poly 00E0  
                 ?___ftge 006C                   ?___lmul 0018                   ?___wmul 0018  
              ??_PICsetup 0018                   _CCP1CON 000FBD                 ?___altoft 0027  
                 ?_my_ISR 0001            ___lmul@product 0020                 ?_WriteI2C 0001  
               ?___awtoft 0020                 ?___ftpack 0018                 ?___lltoft 0020  
              ??_PWMSetup 0018                 ?_getGyroY 001A                   _SSPCON1 000FC6  
                 _SSPCON2 000FC5                   _SSPSTAT 000FC7                   _DelayMs 2EB8  
                 _IdleI2C 2F6C         __end_of_getAccelX 2BD6         __end_of_getAccelY 2B4A  
       __end_of_getAccelZ 2ABE                   _ReadI2C 2F50         __end_of__npowers_ 0650  
                 __Hparam 0000                   __Lparam 0000                   ___aldiv 24A8  
         __size_of___ftge 00C8           __size_of___lmul 0056                   ___ftadd 1870  
                 ___ftdiv 1D18                   ___ftneg 2F08           __size_of___wmul 0026  
                 ___ftmul 1BC6                   ___llmod 2CC2                   ___ftsub 2DDA  
                 ___fttol 22D4              __psmallconst 0600                ??___altoft 002B  
                 __pcinit 2C4E                ??_WriteI2C 0019                ??___awtoft 0023  
         __size_of_my_ISR 26FA                ??___ftpack 001D         __end_of_eval_poly 24A8  
                 __ramtop 0600                ??___lltoft 0024                   __ptext0 12DA  
                 __ptext1 286A                   __ptext2 2702                   __ptext3 1FA6  
                 __ptext4 2D84                   __ptext5 24A8                   __ptext6 06DC  
                 __ptext7 16B4                   __ptext8 1A1C                   __ptext9 1E64  
                 _dpowers 0601              __size_of_map 0126              __size_of_exp 0236  
            __size_of_log 0142           atan@val_squared 00BB              __size_of_pow 01AA  
    __size_of_sensorSetup 00AC          ___aldiv@dividend 0024                   atan@val 00BE  
              ??_getGyroY 001C                _loopMillis 013B            __pintcode_body 263C  
    end_of_initialization 2CB4                   exp@sign 008C             ?_motorsUpdate 0080  
           __Lmediumconst 0000                   int_func 263C                _sensMillis 0143  
      PIDupdate@sumErrore 00D7                   pow@sign 0099          ___aldiv@quotient 002E  
                 postdec1 000FE5                   postdec2 000FDD                   postinc0 000FEE  
                 postinc2 000FDE     __size_of_computeAngle 065E                 _PIDupdate 0D3A  
           getAccelX@data 0022             getAccelY@data 0022             getAccelZ@data 0022  
          ??_motorsUpdate 0032                map@out_max 0070                map@out_min 006C  
             ___ftdiv@exp 0082              _computeAngle 06DC               ___ftmul@exp 0066  
__size_of_OpenI2C_StSpeed 0012            __end_of___ftge 263C            __end_of___lmul 2DDA  
          __end_of___wmul 2F08             __pidataCOMRAM 2F9C         __size_of_PICsetup 0024  
          __end_of_my_ISR 2702                ?_PIDupdate 0001              DelayMs@_dcnt 001A  
              floor@expon 007B       start_initialization 2C4E         __size_of_PWMSetup 000C  
              eval_poly@d 006F                eval_poly@n 0071                eval_poly@x 006C  
          _PIDupdate$1197 008A                ldexp@value 0078               __end_of_map 20CC  
             __end_of_exp 12DA               __end_of_log 1FA6               __end_of_pow 1BC6  
        WriteI2C@data_out 0019                frexp@value 0018           ___llmod@divisor 0005  
         ___llmod@counter 0009       computeAngle@rawAccX 011F       computeAngle@rawAccY 0121  
     computeAngle@rawAccZ 0123                  ??___ftge 0072                  ??___lmul 0020  
                ??___wmul 001C               __pdataBANK0 00E7                  ??_my_ISR 000A  
       __size_of___altoft 0078         __size_of_WriteI2C 002A         __size_of___awtoft 0038  
       __size_of___ftpack 00AE         __size_of___lltoft 005C               __pbssCOMRAM 0033  
           __pcstackBANK0 0060             __pcstackBANK1 0100         __size_of_getGyroY 008C  
                ?_DelayMs 0001              _currentAngle 00DD                  ?_IdleI2C 0001  
                ?_ReadI2C 0001                 _getAccelX 2B4A                 _getAccelY 2ABE  
               _getAccelZ 2A32                 _main$1198 00CD                 __pintcode 0008  
                ?___aldiv 0024                  ?___ftadd 0024                  ?___ftdiv 0075  
                ?___ftneg 0020                  ?___ftmul 0060                  ?___llmod 0001  
                ?___ftsub 0060                 __npowers_ 0629                  ?___fttol 0018  
    __end_of_motorsUpdate 27BC         ??_OpenI2C_StSpeed 0018               ??_PIDupdate 0033  
             __smallconst 0600                 _eval_poly 23C8                 _pidMillis 013F  
          PIDupdate@Dterm 0087            PIDupdate@Iterm 0084            __size_of_floor 00F4  
          __size_of_ldexp 0114            __size_of_frexp 0090            PIDupdate@Pterm 0081  
         ___aldiv@divisor 0028           ___aldiv@counter 002C            ___wmul@product 001C  
                DelayMs@i 0019                 atan@recip 00BA                ?_getAccelX 001A  
              ?_getAccelY 001A                ?_getAccelZ 001A                  i2u418_40 26C4  
                _RADtoDEG 0677                  _PICsetup 2F2C                 map@in_max 0068  
               map@in_min 0064             ??_sensorSetup 001A         ___wmul@multiplier 0018  
                _PWMSetup 2F90                ?_eval_poly 006C            computeAngle@dt 0100  
     __end_ofatan@coeff_a 06C5       __end_ofatan@coeff_b 06D4         ___lmul@multiplier 0018  
               copy_data0 2C62                 copy_data1 2C82             _PIDupdate$403 0075  
           _PIDupdate$404 0078             _PIDupdate$405 007B             _PIDupdate$406 007E  
        __size_of_DelayMs 002A          __size_of_IdleI2C 0012                 frexp@eptr 001B  
        __size_of_ReadI2C 001C                  __Hrparam 0000                  __Lrparam 0000  
        __size_of___aldiv 00CC          __size_of___ftadd 01AC          __size_of___ftdiv 014C  
        __size_of___ftneg 0024                  ___altoft 2BD6          __size_of___ftmul 0152  
        __size_of___llmod 0066          __size_of___ftsub 004C          __size_of___fttol 00F4  
                _WriteI2C 2E8E                  ___awtoft 2E26                  ___ftpack 27BC  
                ___lltoft 2D28                  _exp$1205 0087                  _main$419 00D0  
     __end_of_sensorSetup 2916                  __ptext10 10A4                  __ptext11 20CC  
                __ptext20 2ABE                  __ptext12 21E0                  __ptext21 2B4A  
                __ptext13 2916                  __ptext30 2EB8                  __ptext22 2E8E  
                __ptext14 2BD6                  __ptext31 2F90                  __ptext23 2F6C  
                __ptext15 2DDA                  _getGyroY 29A6                  __ptext40 2F7E  
                __ptext32 0D3A                  __ptext24 2F50                  __ptext16 2E26  
                __ptext33 22D4                  __ptext25 14C8                  __ptext17 2D28  
                __ptext42 2CC2                  __ptext34 2F08                  __ptext26 2E5E  
                __ptext18 29A6                  __ptext35 1BC6                  __ptext27 23C8  
                __ptext19 2A32                  __ptext36 2574                  __ptext28 2EE2  
                __ptext37 1870                  __ptext29 1D18                  __ptext38 27BC  
                __ptext39 2F2C             getGyroY@dataH 001E             getGyroY@dataL 0020  
                __powers_ 0650                  _pow$1203 0093                  _pow$1204 0096  
             _offsetAngle 00E3             __size_of_fabs 0030             __size_of_atan 01EC  
           __size_of_main 01EE             __size_of_sqrt 01BC               ??_getAccelX 001C  
             ??_getAccelY 001C               ??_getAccelZ 001C     __size_of_motorsUpdate 00BA  
                int$flags 0048       PIDupdate@precErrore 0033               atan@coeff_a 06B3  
             atan@coeff_b 06C5                  exp@coeff 067A                  log@coeff 0698  
              DelayMs@cnt 0018         _computeAngle$1190 010A         _computeAngle$1191 010D  
       _computeAngle$1192 0110         _computeAngle$1193 0113         _computeAngle$1194 0116  
       _computeAngle$1195 0119         _computeAngle$1196 011C         _computeAngle$1189 0107  
             ??_eval_poly 0073                  intlevel2 0000              _motorsUpdate 2702  
            getGyroY@data 0022           _OpenI2C_StSpeed 2F7E               _sensorSetup 286A  
            ___aldiv@sign 002D               _SSPCON1bits 000FC6               _SSPCON2bits 000FC5  
          getAccelX@dataH 001E            getAccelX@dataL 0020            getAccelY@dataH 001E  
          getAccelY@dataL 0020            getAccelZ@dataH 001E            getAccelZ@dataL 0020  
